(function () {
    'use strict';

    const gasDischargeLines = [
        {
            "name": "Aluminum",
            "wavelengths": [
                390.068, 393.2, 394.4, 396.152, 399.586, 422.681, 458.582, 458.819, 466.68, 489.876,
                490.277, 528.021, 510.752, 528.377, 528.585, 531.232, 531.607, 537.184, 555.706, 555.795,
                559.323, 585.362, 597.194, 600.176, 600.188, 600.642, 606.111, 606.843, 606.853, 607.323,
                618.157, 618.168, 618.228, 618.245, 618.342, 620.152, 620.17, 622.618, 623.178, 624.336,
                633.574, 669.602, 669.867, 708.397, 708.464
            ],
            "strengths": [
                450, 60, 4500, 9000, 110, 290, 150, 110, 550, 110, 110, 150, 70, 290, 150, 110, 220, 150,
                180, 110, 450, 110, 220, 290, 220, 450, 150, 290, 110, 450, 110, 150, 290, 220, 450, 450,
                360, 290, 360, 450, 450, 360, 230, 60, 70
            ]
        },
        {
            "name": "Argon",
            "wavelengths": [
                392.572, 392.862, 393.255, 394.61, 394.751, 394.898, 397.936, 399.479, 401.386, 403.381,
                403.546, 404.289, 404.442, 405.292, 407.201, 407.239, 407.663, 407.957, 408.239, 410.391,
                413.172, 415.609, 415.859, 416.418, 417.93, 418.188, 419.071, 419.103, 419.832, 420.067,
                421.867, 422.264, 422.699, 422.816, 423.722, 425.119, 425.936, 426.629, 426.653, 427.217,
                427.753, 428.29, 430.01, 430.065, 430.924, 433.12, 433.203, 433.356, 433.534, 434.517,
                434.806, 435.221, 436.207, 436.783, 437.075, 437.133, 437.595, 437.967, 438.506, 440.01,
                440.099, 442.6, 443.019, 443.1, 443.384, 443.946, 444.888, 447.476, 448.181, 451.073,
                452.232, 453.055, 454.505, 456.441, 457.935, 458.99, 459.61, 460.957, 462.844, 463.723,
                465.79, 470.232, 472.159, 472.687, 473.205, 473.591, 476.487, 480.602, 484.781, 486.591,
                487.986, 488.904, 490.475, 493.321, 496.508, 500.933, 501.716, 506.204, 509.05, 514.178,
                514.531, 515.139, 516.229, 516.577, 518.775, 521.681, 522.127, 542.135, 545.165, 549.587,
                550.611, 555.87, 557.254, 560.673, 565.07, 573.952, 583.426, 586.031, 588.262, 588.858,
                591.209, 592.881, 594.267, 598.73, 599.9, 602.515, 603.213, 604.322, 605.272, 605.937,
                609.88, 610.564, 611.492, 614.544, 617.017, 617.228, 617.31, 621.25, 621.594, 624.312,
                629.687, 630.766, 636.958, 638.472, 641.631, 648.308, 653.811, 660.485, 663.822, 663.974,
                664.37, 666.068, 666.405, 666.636, 667.728, 668.429, 675.283, 675.616, 676.661, 686.127,
                687.129, 687.958, 688.817, 693.766, 695.148, 696.025, 696.543, 703.025, 706.722, 706.874,
                710.748, 712.582, 714.704, 715.884
            ],
            "strengths": [
                35, 50, 25, 70, 7, 35, 20, 35, 50, 50, 20, 150, 50, 100, 200, 70, 25, 35, 25, 150, 300,
                35, 400, 50, 35, 50, 100, 50, 200, 400, 25, 25, 25, 100, 100, 25, 200, 100, 70, 150, 550,
                20, 100, 25, 70, 200, 50, 100, 50, 25, 800, 50, 25, 50, 200, 70, 50, 150, 50, 70, 200,
                400, 150, 50, 50, 20, 35, 100, 200, 100, 20, 20, 400, 20, 400, 400, 15, 550, 7, 35, 400,
                15, 20, 550, 50, 300, 800, 550, 150, 50, 800, 70, 20, 35, 200, 50, 70, 70, 20, 100, 70, 5,
                15, 25, 20, 20, 7, 5, 10, 25, 5, 25, 10, 35, 20, 10, 5, 10, 15, 25, 50, 15, 5, 7, 5, 5,
                70, 35, 10, 20, 7, 10, 100, 10, 7, 150, 10, 10, 5, 25, 7, 15, 7, 20, 70, 25, 15, 15, 25,
                20, 50, 5, 5, 25, 100, 35, 150, 5, 15, 20, 150, 5, 10, 50, 7, 7, 9999, 150, 9999, 100, 25,
                25, 1000, 15
            ]
        },
        {
            "name": "Barium",
            "wavelengths": [
                405.371, 408.096, 408.487, 408.725, 408.734, 413.065, 413.243, 416.6, 417.935, 422.396,
                423.956, 424.26, 426.442, 426.792, 428.31, 429.116, 430.518, 430.927, 430.927, 432.3,
                432.511, 433.291, 435.033, 435.953, 440.254, 440.683, 441.366, 443.189, 446.709, 448.898,
                449.364, 450.435, 450.592, 452.317, 452.493, 455.403, 457.385, 457.964, 458.976, 459.182,
                459.972, 460.498, 461.992, 462.833, 467.362, 469.161, 469.744, 469.91, 470.042, 472.471,
                472.643, 487.765, 489.993, 490.285, 493.408, 494.731, 495.709, 499.564, 501.295, 501.295,
                504.955, 505.496, 509.754, 510.225, 513.454, 515.988, 525.38, 530.57, 542.455, 543.732,
                551.904, 553.548, 553.587, 559.331, 568.0, 568.018, 577.762, 578.404, 580.023, 580.568,
                581.881, 582.627, 585.368, 590.764, 597.17, 597.846, 599.709, 599.8, 601.947, 606.311,
                608.339, 610.199, 611.078, 612.923, 614.171, 634.168, 637.711, 638.376, 641.111, 645.085,
                648.291, 649.69, 649.876, 652.617, 652.731, 659.533, 665.411, 667.527, 669.384, 676.948,
                677.186, 686.569, 686.791, 687.408, 687.408, 696.148
            ],
            "strengths": [
                18, 13, 43, 8, 9, 910, 309, 103, 14, 34, 25, 17, 42, 8, 530, 26, 6, 4, 4, 61, 18, 39, 271,
                9, 273, 29, 13, 374, 30, 234, 137, 5, 209, 327, 188, 9300, 230, 580, 22, 28, 108, 28, 40,
                63, 133, 306, 15, 24, 80, 8, 371, 66, 273, 63, 6900, 25, 10, 5, 5, 5, 10, 19, 10, 12, 10,
                80, 5, 6, 199, 5, 280, 1830, 112, 5, 21, 41, 740, 5, 203, 419, 14, 610, 331, 94, 700, 8,
                620, 10, 610, 840, 5, 13, 880, 5, 1510, 900, 10, 10, 3, 580, 1770, 900, 1060, 8, 890, 740,
                9, 462, 454, 6, 4, 62, 8, 7, 7, 1
            ]
        },
        {
            "name": "Calcium",
            "wavelengths": [
                362.411, 363.075, 363.097, 364.441, 364.477, 364.499, 367.529, 367.821, 368.37, 369.411,
                369.436, 370.603, 373.69, 373.938, 374.835, 375.029, 375.334, 375.567, 375.839, 387.048,
                387.254, 387.256, 387.578, 387.58, 388.91, 392.348, 393.366, 393.529, 394.604, 394.89,
                395.705, 396.847, 397.257, 397.371, 408.177, 409.71, 409.853, 409.857, 410.982, 411.028,
                415.357, 416.431, 418.42, 420.618, 420.724, 422.007, 422.673, 423.374, 424.046, 424.074,
                428.301, 428.439, 428.936, 429.899, 430.253, 430.281, 430.774, 431.865, 432.919, 433.357,
                435.508, 435.838, 439.959, 440.629, 442.544, 443.13, 443.496, 443.569, 445.478, 445.589,
                445.661, 447.204, 447.923, 448.918, 449.988, 451.659, 452.694, 457.212, 457.855, 458.14,
                458.147, 458.587, 458.596, 468.527, 470.883, 471.627, 471.674, 472.103, 479.997, 485.917,
                487.813, 500.148, 500.895, 501.997, 502.114, 504.162, 505.007, 518.885, 523.182, 524.737,
                526.171, 526.224, 526.424, 526.556, 527.027, 527.198, 528.527, 530.132, 530.722, 532.129,
                532.806, 533.919, 534.947, 551.298, 557.058, 557.906, 558.197, 558.876, 559.012, 559.447,
                559.849, 560.129, 560.285, 585.745, 592.272, 592.369, 606.998, 610.272, 612.222, 616.129,
                616.217, 616.376, 616.644, 616.906, 616.956, 617.322, 621.398, 629.489, 637.011, 638.755,
                642.451, 643.907, 644.981, 645.56, 645.687, 646.257, 647.166, 648.535, 649.378, 649.965,
                653.878, 654.224, 657.278, 671.769, 714.815, 720.219, 730.869, 732.615
            ],
            "strengths": [
                15, 17, 14, 20, 14, 8, 5, 6, 30, 40, 10, 170, 180, 10, 6, 8, 9, 20, 30, 9, 11, 11, 12, 12,
                6, 6, 230, 9, 6, 15, 17, 220, 8, 18, 15, 50, 15, 15, 60, 30, 15, 15, 15, 40, 18, 50, 50,
                17, 15, 16, 24, 15, 22, 22, 25, 20, 23, 22, 15, 16, 20, 15, 19, 17, 25, 17, 26, 25, 30,
                28, 20, 20, 10, 20, 19, 18, 23, 18, 22, 23, 23, 24, 24, 20, 11, 11, 30, 40, 40, 10, 25,
                70, 10, 80, 40, 23, 10, 25, 10, 11, 22, 23, 22, 24, 25, 13, 60, 10, 70, 11, 10, 50, 27,
                23, 11, 10, 25, 27, 24, 26, 25, 24, 24, 30, 10, 10, 13, 27, 29, 22, 30, 22, 24, 26, 28,
                10, 12, 11, 11, 10, 12, 35, 30, 22, 80, 34, 29, 12, 32, 28, 10, 10, 23, 30, 33, 31, 10, 33
            ]
        },
        {
            "name": "Carbon",
            "wavelengths": [
                391.898, 392.069, 407.452, 407.585, 426.7, 426.726, 477.175, 493.205, 505.217, 513.294,
                513.328, 514.349, 514.516, 515.109, 538.034, 564.807, 566.247, 588.977, 589.159, 600.113,
                600.603, 600.718, 601.068, 601.322, 601.484, 657.805, 658.288, 658.761, 678.39, 711.318,
                711.519, 711.563, 711.699, 711.99
            ],
            "strengths": [
                570, 800, 250, 350, 800, 1000, 200, 200, 200, 350, 350, 350, 570, 400, 300, 250, 350, 570,
                350, 200, 250, 110, 150, 300, 250, 800, 570, 200, 250, 250, 250, 250, 200, 350
            ]
        },
        {
            "name": "Helium",
            "wavelengths": [
                396.473, 400.927, 402.619, 402.636, 412.082, 412.099, 414.376, 438.793, 443.755, 447.148,
                447.168, 468.54, 468.57, 471.315, 471.338, 492.193, 501.568, 504.774, 541.152, 587.562,
                587.597, 656.01, 667.815, 686.748, 706.519, 706.571
            ],
            "strengths": [
                20, 1, 50, 5, 12, 2, 3, 10, 3, 200, 25, 6, 30, 30, 4, 20, 100, 10, 5, 500, 100, 8, 100, 3,
                200, 30
            ]
        },
        {
            "name": "Hydrogen",
            "wavelengths": [
                397.007, 410.174, 434.047, 486.133, 656.272, 656.285
            ],
            "strengths": [
                8, 15, 30, 80, 120, 180
            ]
        },
        {
            "name": "Iron",
            "wavelengths": [
                400.524, 400.971, 401.453, 402.187, 404.064, 404.581, 406.359, 406.698, 406.798, 407.174,
                407.663, 410.074, 410.749, 411.854, 412.76, 413.206, 413.468, 413.7, 414.342, 414.387,
                415.39, 415.45, 415.68, 417.274, 417.491, 417.564, 417.759, 418.175, 418.489, 418.704,
                418.78, 419.143, 419.532, 419.83, 419.91, 420.203, 420.398, 420.67, 421.034, 421.618,
                421.936, 422.221, 422.596, 422.742, 423.36, 423.594, 423.88, 424.743, 425.012, 425.079,
                425.832, 426.047, 427.115, 427.176, 428.24, 429.146, 429.923, 430.79, 431.508, 432.576,
                435.273, 436.977, 437.593, 438.354, 440.475, 441.512, 442.73, 446.165, 446.655, 447.602,
                448.217, 448.225, 448.974, 452.861, 464.743, 473.677, 485.974, 487.132, 487.214, 487.821,
                489.075, 489.149, 490.331, 491.899, 492.05, 495.76, 500.186, 500.191, 500.571, 500.612,
                501.207, 501.494, 503.077, 504.176, 504.982, 505.163, 507.475, 510.073, 511.036, 513.369,
                513.925, 513.946, 515.191, 516.227, 516.628, 516.749, 516.889, 517.16, 519.145, 519.234,
                519.494, 520.458, 521.518, 521.627, 521.685, 522.686, 522.715, 523.294, 526.026, 526.656,
                526.954, 527.036, 528.179, 528.362, 530.23, 532.418, 532.804, 532.853, 533.29, 533.993,
                534.102, 536.487, 536.747, 536.996, 537.149, 538.337, 539.317, 539.713, 540.412, 540.577,
                541.091, 541.52, 542.407, 542.783, 542.97, 543.452, 544.687, 545.545, 545.561, 546.593,
                546.694, 548.231, 549.752, 550.146, 550.62, 550.678, 556.962, 557.284, 558.676, 561.564,
                562.454, 566.252, 576.299, 586.235, 591.411, 598.696, 596.171, 596.24, 606.548, 610.216,
                613.661, 613.769, 614.773, 614.924, 619.156, 621.343, 621.928, 623.073, 623.837, 624.632,
                624.756, 625.255, 639.36, 640.0, 641.165, 641.69, 642.135, 643.084, 644.643, 645.638,
                649.498, 651.605, 654.624, 659.291, 667.799
            ],
            "strengths": [
                400, 60, 80, 100, 50, 4000, 1500, 50, 50, 1200, 40, 40, 40, 150, 40, 400, 80, 40, 200,
                800, 40, 50, 60, 50, 60, 50, 50, 120, 50, 120, 120, 80, 40, 150, 40, 300, 40, 80, 80, 400,
                100, 50, 50, 200, 100, 250, 50, 50, 200, 300, 40, 800, 250, 1200, 1200, 80, 250, 1200,
                150, 1500, 80, 80, 800, 3000, 1200, 300, 600, 400, 120, 80, 80, 200, 50, 50, 30, 30, 50,
                120, 60, 30, 100, 250, 30, 150, 500, 1500, 80, 18, 30, 100, 60, 30, 25, 150, 30, 30, 25,
                18, 150, 40, 40, 100, 25, 30, 80, 2500, 80, 500, 50, 80, 200, 30, 25, 150, 18, 60, 1000,
                250, 18, 100, 1200, 800, 30, 60, 25, 150, 800, 300, 100, 80, 500, 25, 40, 50, 400, 60, 40,
                300, 60, 250, 30, 60, 60, 30, 250, 100, 200, 25, 120, 16, 20, 16, 25, 20, 18, 30, 30, 60,
                120, 200, 20, 50, 20, 30, 30, 30, 18, 30, 40, 30, 40, 40, 30, 20, 40, 30, 30, 40, 20, 20,
                80, 30, 20, 30, 20, 20, 20, 30, 20, 200, 60, 20, 20, 20, 40
            ]
        },
        {
            "name": "Krypton",
            "wavelengths": [
                390.618, 392.008, 399.484, 399.779, 405.704, 406.513, 408.834, 409.873, 410.925, 414.512,
                425.058, 427.397, 428.297, 429.292, 430.049, 431.781, 431.855, 431.958, 432.298, 435.136,
                435.548, 436.264, 436.969, 437.612, 438.654, 439.997, 442.519, 443.169, 443.681, 445.392,
                446.369, 447.501, 448.988, 450.235, 452.314, 455.661, 457.721, 458.298, 459.28, 461.529,
                461.917, 463.389, 465.888, 468.04, 469.13, 469.436, 473.9, 476.244, 476.574, 481.176,
                482.518, 483.208, 484.661, 485.72, 494.559, 502.24, 508.652, 512.573, 520.832, 530.866,
                533.341, 546.817, 556.222, 557.029, 558.039, 564.956, 568.189, 569.035, 583.286, 587.091,
                599.222, 599.385, 605.613, 642.018, 642.103, 645.629, 657.007, 669.923, 690.468
            ],
            "strengths": [
                150, 200, 100, 100, 300, 300, 500, 250, 100, 250, 150, 1000, 100, 600, 200, 500, 400,
                1000, 150, 100, 3000, 500, 200, 800, 300, 200, 100, 500, 600, 600, 800, 800, 400, 600,
                400, 200, 800, 300, 150, 500, 1000, 800, 2000, 500, 100, 200, 3000, 300, 1000, 300, 300,
                800, 700, 150, 300, 200, 250, 400, 500, 200, 500, 200, 500, 2000, 80, 100, 400, 200, 100,
                3000, 200, 60, 60, 300, 100, 200, 150, 60, 100
            ]
        },
        {
            "name": "Magnesium",
            "wavelengths": [
                390.386, 393.84, 398.421, 398.675, 405.469, 405.75, 407.506, 408.183, 416.51, 416.727,
                435.191, 435.453, 438.038, 438.464, 439.059, 442.8, 443.399, 443.649, 443.66, 448.116,
                448.133, 453.429, 457.11, 462.13, 470.299, 473.003, 473.959, 473.971, 485.11, 516.733,
                517.268, 518.361, 526.421, 526.437, 534.598, 540.154, 550.96, 552.841, 571.109, 578.531,
                578.556, 591.643, 591.816, 631.872, 631.924, 631.949, 634.674, 634.696, 654.597, 662.044,
                662.057, 663.083, 678.145, 678.785, 681.286, 681.927, 689.49, 696.54, 706.041
            ],
            "strengths": [
                4, 6, 1, 8, 2, 10, 3, 2, 4, 15, 20, 6, 6, 9, 10, 8, 9, 5, 4, 14, 12, 6, 28, 3, 7, 10, 6,
                5, 7, 75, 22, 400, 8, 7, 1, 9, 2, 6, 30, 5, 4, 7, 6, 10, 9, 7, 10, 9, 11, 5, 6, 2, 7, 8,
                7, 8, 4, 6, 8
            ]
        },
        {
            "name": "Mercury",
            "wavelengths": [
                404.656, 407.783, 410.805, 433.922, 434.749, 435.833, 439.862, 466.028, 485.572, 488.3,
                488.991, 491.607, 497.037, 498.064, 510.27, 512.064, 512.845, 513.794, 529.074, 531.678,
                535.405, 538.463, 546.074, 554.963, 567.586, 576.96, 578.966, 579.066, 580.378, 585.925,
                587.173, 587.198, 607.272, 614.95, 623.44, 652.113, 671.643, 690.752, 708.19, 709.186
            ],
            "strengths": [
                1800, 150, 40, 125, 240, 2000, 100, 90, 80, 5, 5, 80, 5, 5, 20, 40, 100, 20, 20, 5, 60,
                30, 1100, 30, 160, 1240, 1100, 280, 140, 60, 60, 20, 20, 1000, 30, 80, 160, 250, 250, 200
            ]
        },
        {
            "name": "Neon",
            "wavelengths": [
                421.974, 423.385, 425.065, 436.986, 437.94, 437.955, 438.506, 439.199, 439.799, 440.93,
                441.322, 442.139, 442.852, 442.863, 443.09, 443.094, 445.705, 452.272, 453.775, 454.038,
                456.906, 470.44, 470.886, 471.007, 471.207, 471.535, 475.273, 478.893, 479.022, 482.734,
                488.492, 500.516, 503.775, 514.494, 533.078, 534.109, 534.328, 540.056, 556.277, 565.666,
                571.923, 574.83, 576.442, 580.445, 582.016, 585.249, 587.283, 588.19, 590.246, 590.643,
                594.483, 596.547, 597.463, 597.553, 598.791, 603.0, 607.434, 609.616, 612.845, 614.306,
                616.359, 618.215, 621.728, 626.65, 630.479, 633.443, 638.299, 640.225, 650.653, 653.288,
                659.895, 665.209, 667.828, 671.704, 692.947, 702.405, 703.241, 705.129, 705.911
            ],
            "strengths": [
                150, 100, 120, 120, 70, 150, 100, 200, 150, 150, 100, 100, 100, 100, 150, 150, 120, 100,
                10, 10, 100, 15, 12, 10, 10, 15, 10, 12, 10, 10, 10, 4, 10, 10, 25, 20, 8, 60, 5, 10, 5,
                12, 80, 12, 40, 500, 100, 100, 60, 60, 100, 100, 100, 120, 80, 100, 100, 80, 60, 100, 120,
                250, 150, 150, 60, 100, 120, 200, 150, 60, 150, 70, 90, 20, 100, 90, 100, 50, 80
            ]
        },
        {
            "name": "Nitrogen",
            "wavelengths": [
                391.9, 395.585, 399.5, 403.508, 404.131, 404.353, 409.994, 410.995, 417.616, 422.774,
                423.691, 423.705, 424.178, 443.274, 444.703, 453.041, 460.148, 460.716, 461.387, 462.139,
                463.054, 464.308, 478.813, 480.329, 484.738, 489.511, 491.494, 493.512, 495.023, 496.398,
                498.737, 499.436, 500.148, 500.27, 500.515, 500.732, 501.062, 501.639, 502.566, 504.51,
                528.12, 529.268, 549.567, 553.536, 566.663, 567.602, 567.956, 568.621, 571.077, 574.73,
                575.25, 576.475, 582.954, 585.404, 592.781, 593.178, 594.024, 594.165, 595.239, 599.943,
                600.847, 616.776, 637.962, 641.165, 642.064, 642.302, 642.832, 643.768, 644.094, 645.79,
                646.844, 648.205, 648.27, 648.375, 648.171, 648.48, 649.122, 649.954, 650.631, 661.056,
                662.254, 663.694, 664.496, 664.65, 665.346, 665.651, 672.262
            ],
            "strengths": [
                360, 450, 1000, 360, 550, 360, 140, 185, 285, 285, 285, 220, 450, 285, 650, 360, 550, 450,
                360, 450, 870, 550, 285, 450, 180, 285, 160, 210, 160, 350, 285, 450, 650, 360, 870, 550,
                450, 360, 360, 550, 185, 140, 450, 285, 650, 550, 870, 450, 450, 285, 700, 240, 265, 235,
                360, 550, 285, 650, 285, 160, 210, 285, 360, 185, 210, 210, 210, 185, 235, 185, 300, 750,
                360, 300, 265, 325, 160, 210, 185, 750, 185, 185, 235, 185, 235, 210, 185
            ]
        },
        {
            "name": "Oxygen",
            "wavelengths": [
                391.196, 391.929, 394.729, 394.748, 394.759, 395.437, 395.461, 397.326, 398.22, 406.99,
                407.216, 407.587, 408.391, 408.714, 408.927, 409.724, 410.5, 411.922, 413.281, 414.606,
                415.33, 418.546, 418.979, 423.327, 425.374, 425.398, 427.547, 430.378, 431.714, 433.686,
                434.556, 434.943, 436.69, 436.825, 439.595, 441.491, 441.698, 444.821, 445.238, 446.545,
                446.628, 446.783, 446.941, 459.097, 459.617, 460.939, 463.885, 464.181, 464.914, 465.084,
                466.164, 467.623, 469.921, 470.536, 492.46, 494.306, 532.91, 532.968, 533.074, 543.518,
                543.578, 543.686, 557.734, 595.839, 595.858, 599.528, 604.623, 604.644, 604.649, 610.627,
                615.598, 615.677, 615.818, 625.683, 626.155, 636.634, 637.432, 645.36, 645.444, 645.598,
                660.491, 665.383, 700.192, 700.223, 715.67
            ],
            "strengths": [
                450, 160, 185, 160, 140, 220, 100, 450, 220, 160, 285, 450, 80, 50, 150, 110, 220, 285,
                160, 50, 220, 285, 450, 80, 50, 50, 50, 50, 285, 160, 220, 285, 220, 100, 220, 450, 285,
                160, 160, 50, 50, 50, 50, 360, 285, 80, 160, 360, 450, 160, 360, 285, 220, 285, 160, 220,
                135, 160, 190, 90, 110, 135, 120, 160, 190, 80, 160, 190, 110, 100, 400, 450, 490, 80,
                100, 100, 100, 320, 360, 400, 80, 100, 360, 450, 210
            ]
        },
        {
            "name": "Potassium",
            "wavelengths": [
                360.888, 361.849, 362.642, 368.154, 371.66, 372.134, 373.913, 374.442, 376.736, 378.319,
                380.014, 381.656, 381.75, 387.374, 387.862, 389.792, 392.3, 392.636, 394.253, 395.521,
                396.672, 397.258, 399.51, 400.124, 401.21, 404.259, 409.369, 411.499, 413.472, 414.919,
                418.624, 422.297, 422.567, 426.34, 430.5, 430.91, 434.003, 438.816, 446.665, 450.533,
                459.565, 460.845, 465.938, 482.923, 494.329, 500.56, 505.627, 531.024, 547.013, 564.273,
                577.232, 596.964, 612.027, 624.659, 630.729, 642.796, 659.5
            ],
            "strengths": [
                5, 6, 4, 6, 5, 5, 5, 5, 6, 6, 6, 6, 7, 5, 4, 8, 5, 5, 6, 6, 6, 6, 6, 7, 5, 6, 5, 6, 7, 7,
                8, 7, 7, 7, 7, 7, 5, 7, 5, 6, 5, 8, 5, 9, 6, 8, 7, 5, 6, 5, 4, 2, 8, 6, 7, 5, 2
            ]
        },
        {
            "name": "Silicon",
            "wavelengths": [
                390.552, 395.574, 397.746, 399.177, 399.801, 407.545, 407.678, 410.294, 412.807, 413.089,
                418.335, 419.072, 419.813, 462.142, 462.172, 478.299, 479.221, 479.232, 488.32, 490.699,
                493.28, 494.761, 500.606, 504.103, 505.598, 518.19, 518.525, 519.286, 520.241, 529.519,
                540.534, 541.724, 542.892, 543.289, 543.862, 544.726, 545.449, 545.645, 546.643, 546.687,
                546.921, 549.323, 549.645, 551.754, 554.074, 557.666, 562.222, 563.297, 563.948, 564.561,
                566.066, 566.555, 566.956, 568.144, 568.448, 568.881, 569.043, 570.111, 570.137, 570.637,
                570.84, 574.767, 575.363, 575.422, 576.298, 577.215, 578.038, 578.573, 579.307, 579.49,
                579.786, 580.047, 580.674, 582.78, 584.613, 586.748, 586.84, 587.376, 591.522, 594.855,
                595.756, 597.893, 606.745, 608.006, 608.667, 612.502, 613.157, 613.185, 614.249, 614.502,
                615.513, 623.732, 623.829, 624.381, 624.447, 625.419, 633.195, 634.71, 637.136, 652.661,
                652.72, 655.546, 666.052, 666.5, 667.188, 669.938, 671.704, 672.185, 674.164, 675.028,
                681.845, 682.982, 684.857, 697.652, 700.357, 700.588, 701.728, 701.765, 703.49, 716.469,
                716.555, 718.489, 719.358, 719.39
            ],
            "strengths": [
                300, 10, 10, 15, 10, 20, 15, 70, 300, 500, 10, 100, 50, 100, 150, 50, 35, 80, 15, 20, 20,
                30, 40, 1000, 1000, 100, 100, 200, 500, 30, 100, 15, 15, 15, 100, 20, 15, 100, 500, 500,
                100, 40, 200, 35, 100, 150, 30, 100, 200, 90, 150, 80, 1000, 30, 120, 300, 100, 90, 200,
                100, 160, 45, 45, 45, 45, 70, 70, 30, 90, 30, 100, 150, 200, 30, 50, 10, 300, 40, 150,
                200, 500, 500, 10, 20, 10, 90, 85, 90, 100, 100, 160, 160, 40, 125, 125, 180, 45, 1000,
                1000, 45, 45, 45, 50, 15, 100, 20, 50, 100, 30, 20, 30, 50, 30, 80, 180, 180, 30, 90, 250,
                70, 200, 70, 65, 30
            ]
        },
        {
            "name": "Sodium",
            "wavelengths": [
                371.107, 411.37, 412.308, 423.326, 423.899, 424.09, 424.208, 424.208, 424.941, 425.252,
                427.364, 427.679, 427.679, 428.784, 429.101, 429.248, 429.286, 430.881, 430.904, 432.091,
                432.14, 432.462, 432.462, 433.729, 434.149, 434.411, 434.474, 436.86, 437.522, 438.749,
                439.003, 439.281, 439.334, 439.334, 440.512, 441.988, 442.325, 444.67, 444.741, 445.474,
                445.523, 445.721, 447.463, 447.88, 448.167, 449.015, 449.087, 449.418, 449.766, 449.766,
                449.962, 450.697, 451.921, 452.498, 453.332, 454.163, 454.519, 455.153, 459.092, 466.481,
                466.856, 466.856, 472.223, 473.11, 474.167, 474.794, 475.182, 476.879, 478.879, 497.854,
                498.281, 514.884, 515.34, 519.165, 520.855, 540.046, 541.455, 568.263, 568.819, 568.821,
                588.995, 589.592, 615.423, 616.075, 617.525, 619.926, 623.468, 626.001, 627.474, 636.115,
                636.641, 651.421, 652.468, 653.07, 654.404, 654.575, 655.243, 737.323, 737.349
            ],
            "strengths": [
                850, 300, 250, 250, 6, 250, 10, 10, 1, 2, 15, 20, 20, 2, 3, 250, 250, 250, 250, 250, 30,
                40, 40, 250, 3, 250, 5, 200, 200, 200, 40, 250, 60, 60, 200, 5, 8, 200, 200, 200, 200,
                200, 200, 200, 200, 200, 200, 60, 100, 100, 200, 200, 200, 200, 200, 10, 15, 200, 160,
                120, 200, 200, 160, 160, 160, 20, 30, 160, 100, 200, 400, 40, 80, 100, 80, 70, 90, 280,
                70, 560, 80000, 40000, 120, 240, 60, 70, 70, 80, 80, 70, 70, 90, 80, 130, 130, 130, 80,
                20, 10
            ]
        },
        {
            "name": "Strontium",
            "wavelengths": [
                403.038, 403.238, 407.771, 409.403, 409.702, 410.563, 416.18, 421.552, 429.857, 430.545,
                433.58, 443.804, 460.733, 468.508, 472.228, 474.192, 478.432, 481.188, 483.208, 485.504,
                486.87, 487.249, 487.606, 487.632, 489.198, 496.226, 496.794, 507.109, 513.034, 515.607,
                515.826, 522.22, 522.511, 522.927, 523.855, 525.69, 525.771, 526.221, 528.832, 532.982,
                539.103, 544.348, 545.084, 546.39, 548.084, 548.612, 550.417, 552.183, 553.481, 554.005,
                554.336, 566.466, 568.972, 597.01, 634.575, 636.394, 636.996, 638.075, 638.65, 638.824,
                640.847, 644.668, 646.579, 650.4, 654.679, 655.026, 661.726, 664.354, 679.105, 687.838,
                689.259
            ],
            "strengths": [
                1300, 300, 46000, 30, 30, 30, 200, 32000, 9, 340, 35, 350, 65000, 9, 3200, 2200, 1400,
                4800, 3600, 500, 600, 3000, 600, 2000, 1000, 8000, 1300, 30, 30, 800, 35, 1400, 2000,
                2000, 2800, 4800, 40, 30, 30, 350, 30, 40, 1500, 30, 7000, 1100, 3500, 2600, 2000, 2000,
                250, 30, 30, 200, 250, 250, 350, 1000, 900, 600, 9000, 250, 250, 5500, 1000, 1700, 3000,
                800, 1800, 4800, 1200
            ]
        },
        {
            "name": "Sulfur",
            "wavelengths": [
                390.2, 393.33, 412.08, 414.23, 414.51, 415.31, 416.27, 469.41, 469.54, 469.62, 471.62,
                481.55, 492.41, 492.53, 499.35, 542.86, 543.28, 545.38, 547.36, 550.97, 556.49, 560.61,
                564.0, 564.03, 564.7, 565.99, 566.47, 570.61, 581.92, 605.27, 628.64, 628.71, 630.55,
                631.27, 638.49, 639.73, 639.8, 641.37, 674.36, 674.88, 675.72, 757.9
            ],
            "strengths": [
                285, 360, 450, 280, 360, 450, 450, 450, 285, 160, 280, 450, 360, 450, 285, 360, 650, 1000,
                1000, 1000, 280, 1000, 450, 450, 280, 650, 450, 160, 450, 450, 280, 450, 450, 450, 280,
                280, 280, 360, 160, 285, 450, 450
            ]
        },
        {
            "name": "Xenon",
            "wavelengths": [
                390.791, 403.759, 405.746, 409.889, 415.804, 418.01, 419.315, 420.848, 420.947, 421.372,
                421.56, 422.3, 423.825, 424.538, 425.157, 429.64, 431.051, 433.052, 436.92, 437.378,
                439.32, 439.577, 440.688, 441.607, 444.813, 446.219, 448.086, 452.186, 473.415, 479.262,
                480.702, 482.971, 484.329, 491.651, 492.315, 497.171, 497.271, 498.877, 499.117, 502.828,
                504.492, 508.062, 512.242, 512.57, 517.882, 518.804, 519.137, 519.21, 526.044, 526.195,
                529.222, 530.927, 531.387, 533.933, 536.32, 536.807, 537.239, 539.28, 541.915, 543.896,
                544.545, 545.045, 546.039, 547.261, 549.486, 552.553, 553.107, 556.662, 561.667, 565.938,
                566.756, 567.091, 569.575, 569.961, 571.61, 572.691, 575.103, 575.865, 577.639, 581.596,
                582.389, 582.48, 587.502, 589.329, 589.499, 590.513, 593.417, 594.553, 597.113, 597.646,
                600.892, 603.62, 605.115, 609.35, 609.759, 610.143, 611.508, 614.645, 617.83, 617.966,
                618.242, 619.407, 619.826, 622.002, 627.082, 627.754, 628.441, 628.601, 630.086, 631.806,
                634.396, 635.635, 637.528, 639.799, 646.97, 647.284, 648.776, 649.872, 650.418, 651.283,
                652.865, 653.316, 659.501, 659.556, 659.725, 659.884, 666.892, 669.432, 672.801, 678.871,
                679.037, 680.574, 682.732, 687.211, 688.216, 691.022, 692.553, 694.211, 697.618, 699.088,
                708.215
            ],
            "strengths": [
                100, 100, 200, 100, 200, 1000, 500, 300, 100, 300, 100, 300, 400, 500, 100, 500, 500,
                1000, 200, 100, 500, 500, 200, 150, 500, 1000, 500, 100, 600, 150, 500, 400, 300, 500,
                500, 200, 400, 300, 100, 200, 200, 1000, 300, 100, 100, 300, 400, 100, 500, 500, 2000,
                300, 1000, 2000, 200, 200, 500, 100, 3000, 800, 300, 200, 400, 1000, 100, 200, 600, 100,
                300, 300, 600, 150, 100, 200, 200, 500, 500, 300, 300, 100, 300, 150, 100, 300, 100, 200,
                100, 500, 300, 2000, 200, 1000, 2000, 600, 1500, 400, 100, 100, 150, 120, 300, 500, 100,
                100, 500, 400, 100, 100, 250, 500, 400, 600, 200, 100, 300, 150, 120, 100, 200, 300, 200,
                100, 1000, 100, 400, 100, 150, 300, 200, 150, 100, 1000, 200, 100, 300, 80, 100, 800, 100,
                2000, 150
            ]
        }
    ];

    const wavelengthToRgbTable = new Float32Array([
        +0.00045, -0.00048, +0.00344, 0.0, +0.00054, -0.00057, +0.00411, 0.0, +0.00064, -0.00068, +0.00491, 0.0, +0.00076, -0.00081, +0.00587, 0.0,
        +0.00091, -0.00097, +0.00702, 0.0, +0.00109, -0.00116, +0.00840, 0.0, +0.00129, -0.00138, +0.01001, 0.0, +0.00153, -0.00164, +0.01190, 0.0,
        +0.00182, -0.00194, +0.01414, 0.0, +0.00218, -0.00234, +0.01703, 0.0, +0.00264, -0.00284, +0.02071, 0.0, +0.00322, -0.00348, +0.02534, 0.0,
        +0.00386, -0.00417, +0.03038, 0.0, +0.00450, -0.00486, +0.03546, 0.0, +0.00516, -0.00558, +0.04072, 0.0, +0.00598, -0.00647, +0.04724, 0.0,
        +0.00710, -0.00769, +0.05613, 0.0, +0.00863, -0.00936, +0.06836, 0.0, +0.01053, -0.01144, +0.08357, 0.0, +0.01274, -0.01385, +0.10125, 0.0,
        +0.01519, -0.01653, +0.12093, 0.0, +0.01803, -0.01965, +0.14389, 0.0, +0.02168, -0.02365, +0.17330, 0.0, +0.02643, -0.02888, +0.21162, 0.0,
        +0.03245, -0.03552, +0.26028, 0.0, +0.03908, -0.04284, +0.31394, 0.0, +0.04569, -0.05016, +0.36771, 0.0, +0.05227, -0.05746, +0.42149, 0.0,
        +0.06027, -0.06638, +0.48734, 0.0, +0.07081, -0.07815, +0.57443, 0.0, +0.08552, -0.09461, +0.69639, 0.0, +0.10362, -0.11491, +0.84703, 0.0,
        +0.12528, -0.13927, +1.02788, 0.0, +0.14983, -0.16697, +1.23378, 0.0, +0.17827, -0.19920, +1.47406, 0.0, +0.21158, -0.23708, +1.75729, 0.0,
        +0.25101, -0.28203, +2.09453, 0.0, +0.29624, -0.33380, +2.48475, 0.0, +0.34779, -0.39321, +2.93667, 0.0, +0.40658, -0.46162, +3.46319, 0.0,
        +0.47220, -0.53867, +4.06305, 0.0, +0.54051, -0.61973, +4.70338, 0.0, +0.60635, -0.69886, +5.33983, 0.0, +0.66537, -0.77121, +5.93862, 0.0,
        +0.71768, -0.83688, +6.49979, 0.0, +0.76113, -0.89376, +7.01109, 0.0, +0.79616, -0.94228, +7.47436, 0.0, +0.82035, -0.97986, +7.87338, 0.0,
        +0.83614, -1.00873, +8.22049, 0.0, +0.84242, -1.02744, +8.50645, 0.0, +0.84078, -1.03762, +8.74118, 0.0, +0.83034, -1.03859, +8.92043, 0.0,
        +0.81254, -1.03214, +9.05476, 0.0, +0.78703, -1.01809, +9.14316, 0.0, +0.75484, -0.99759, +9.19545, 0.0, +0.71615, -0.97105, +9.21808, 0.0,
        +0.67160, -0.93921, +9.21831, 0.0, +0.62161, -0.90259, +9.20002, 0.0, +0.56689, -0.86205, +9.17044, 0.0, +0.50834, -0.81861, +9.13661, 0.0,
        +0.44594, -0.77208, +9.09795, 0.0, +0.37943, -0.72170, +9.04709, 0.0, +0.30755, -0.66573, +8.97282, 0.0, +0.23092, -0.60438, +8.87416, 0.0,
        +0.14981, -0.53723, +8.74625, 0.0, +0.06594, -0.46565, +8.59299, 0.0, -0.02033, -0.38919, +8.40964, 0.0, -0.10876, -0.30770, +8.19449, 0.0,
        -0.20050, -0.21796, +7.92484, 0.0, -0.29554, -0.11954, +7.59637, 0.0, -0.39331, -0.01241, +7.21152, 0.0, -0.49150, +0.09945, +6.80323, 0.0,
        -0.58821, +0.21359, +6.39517, 0.0, -0.68287, +0.32900, +5.99509, 0.0, -0.77548, +0.44604, +5.60104, 0.0, -0.86610, +0.56489, +5.21161, 0.0,
        -0.95460, +0.68545, +4.82936, 0.0, -1.04075, +0.80685, +4.45829, 0.0, -1.12455, +0.92810, +4.09979, 0.0, -1.20591, +1.04853, +3.75664, 0.0,
        -1.28534, +1.16898, +3.42953, 0.0, -1.36289, +1.29080, +3.12382, 0.0, -1.43893, +1.41475, +2.83930, 0.0, -1.51418, +1.54219, +2.57957, 0.0,
        -1.59057, +1.67393, +2.33844, 0.0, -1.67070, +1.81285, +2.11752, 0.0, -1.75483, +1.95874, +1.91220, 0.0, -1.84334, +2.11293, +1.72443, 0.0,
        -1.93521, +2.27405, +1.55044, 0.0, -2.03042, +2.44286, +1.39069, 0.0, -2.13002, +2.62100, +1.24237, 0.0, -2.23687, +2.81319, +1.10525, 0.0,
        -2.35236, +3.02163, +0.97760, 0.0, -2.47428, +3.24476, +0.85780, 0.0, -2.59703, +3.47704, +0.74210, 0.0, -2.71594, +3.71384, +0.62737, 0.0,
        -2.82897, +3.95378, +0.51297, 0.0, -2.93632, +4.19762, +0.39993, 0.0, -3.03724, +4.44667, +0.28956, 0.0, -3.13108, +4.69930, +0.18189, 0.0,
        -3.21371, +4.95123, +0.07878, 0.0, -3.28397, +5.19852, -0.01863, 0.0, -3.33736, +5.43706, -0.10798, 0.0, -3.37511, +5.66511, -0.19039, 0.0,
        -3.39057, +5.87377, -0.26368, 0.0, -3.38528, +6.06146, -0.32886, 0.0, -3.35591, +6.22465, -0.38509, 0.0, -3.30812, +6.37058, -0.43551, 0.0,
        -3.24179, +6.50082, -0.48132, 0.0, -3.15961, +6.61749, -0.52364, 0.0, -3.06176, +6.71875, -0.56240, 0.0, -2.95103, +6.80507, -0.59813, 0.0,
        -2.82820, +6.87607, -0.63112, 0.0, -2.69357, +6.93282, -0.66147, 0.0, -2.54728, +6.97631, -0.68910, 0.0, -2.38914, +7.00683, -0.71390, 0.0,
        -2.22005, +7.02525, -0.73614, 0.0, -2.03886, +7.03046, -0.75560, 0.0, -1.84668, +7.02377, -0.77259, 0.0, -1.64223, +7.00396, -0.78687, 0.0,
        -1.42756, +6.97316, -0.79889, 0.0, -1.20113, +6.92961, -0.80833, 0.0, -0.96551, +6.87626, -0.81577, 0.0, -0.71778, +6.81012, -0.82080, 0.0,
        -0.46110, +6.73561, -0.82419, 0.0, -0.19336, +6.65064, -0.82569, 0.0, +0.08365, +6.55671, -0.82561, 0.0, +0.37088, +6.45270, -0.82381, 0.0,
        +0.66727, +6.33938, -0.82051, 0.0, +0.97318, +6.21586, -0.81561, 0.0, +1.28739, +6.08248, -0.80924, 0.0, +1.60955, +5.93863, -0.80137, 0.0,
        +1.93880, +5.78480, -0.79209, 0.0, +2.27437, +5.62195, -0.78153, 0.0, +2.61591, +5.45037, -0.76973, 0.0, +2.96233, +5.27108, -0.75682, 0.0,
        +3.31285, +5.08373, -0.74275, 0.0, +3.66602, +4.88945, -0.72766, 0.0, +4.02090, +4.68771, -0.71146, 0.0, +4.37621, +4.48023, -0.69439, 0.0,
        +4.73064, +4.26687, -0.67639, 0.0, +5.08331, +4.04937, -0.65773, 0.0, +5.43209, +3.82766, -0.63835, 0.0, +5.77578, +3.60300, -0.61845, 0.0,
        +6.11136, +3.37554, -0.59802, 0.0, +6.43833, +3.14646, -0.57722, 0.0, +6.75425, +2.91678, -0.55610, 0.0, +7.05863, +2.68778, -0.53481, 0.0,
        +7.34897, +2.46063, -0.51343, 0.0, +7.62475, +2.23621, -0.49201, 0.0, +7.88502, +2.01551, -0.47056, 0.0, +8.12917, +1.79937, -0.44912, 0.0,
        +8.35493, +1.58891, -0.42780, 0.0, +8.55610, +1.38639, -0.40686, 0.0, +8.72994, +1.19299, -0.38646, 0.0, +8.87308, +1.01015, -0.36670, 0.0,
        +8.99180, +0.83597, -0.34746, 0.0, +9.08621, +0.67076, -0.32872, 0.0, +9.16062, +0.51316, -0.31041, 0.0, +9.20686, +0.36631, -0.29275, 0.0,
        +9.22610, +0.22973, -0.27574, 0.0, +9.21024, +0.10654, -0.25962, 0.0, +9.16717, -0.00588, -0.24419, 0.0, +9.09596, -0.10655, -0.22948, 0.0,
        +9.00259, -0.19742, -0.21535, 0.0, +8.88469, -0.27749, -0.20186, 0.0, +8.74432, -0.34784, -0.18898, 0.0, +8.58049, -0.40808, -0.17677, 0.0,
        +8.39510, -0.45899, -0.16519, 0.0, +8.18703, -0.50078, -0.15418, 0.0, +7.95487, -0.53377, -0.14371, 0.0, +7.70010, -0.55866, -0.13371, 0.0,
        +7.42649, -0.57586, -0.12424, 0.0, +7.14029, -0.58670, -0.11524, 0.0, +6.84421, -0.59128, -0.10677, 0.0, +6.54303, -0.59108, -0.09875, 0.0,
        +6.24334, -0.58674, -0.09130, 0.0, +5.95045, -0.57990, -0.08435, 0.0, +5.66682, -0.57050, -0.07797, 0.0, +5.38831, -0.55895, -0.07199, 0.0,
        +5.11322, -0.54477, -0.06645, 0.0, +4.84120, -0.52865, -0.06124, 0.0, +4.57352, -0.51058, -0.05640, 0.0, +4.30991, -0.49103, -0.05187, 0.0,
        +4.05110, -0.47010, -0.04764, 0.0, +3.79769, -0.44817, -0.04369, 0.0, +3.55123, -0.42545, -0.04004, 0.0, +3.31243, -0.40220, -0.03666, 0.0,
        +3.08214, -0.37871, -0.03354, 0.0, +2.86197, -0.35542, -0.03067, 0.0, +2.65285, -0.33270, -0.02800, 0.0, +2.45568, -0.31075, -0.02556, 0.0,
        +2.26865, -0.28947, -0.02330, 0.0, +2.09183, -0.26889, -0.02122, 0.0, +1.92374, -0.24898, -0.01930, 0.0, +1.76572, -0.22991, -0.01753, 0.0,
        +1.61595, -0.21155, -0.01589, 0.0, +1.47600, -0.19411, -0.01440, 0.0, +1.34405, -0.17747, -0.01302, 0.0, +1.22181, -0.16189, -0.01176, 0.0,
        +1.10773, -0.14727, -0.01060, 0.0, +1.00305, -0.13378, -0.00954, 0.0, +0.90716, -0.12137, -0.00858, 0.0, +0.82139, -0.11020, -0.00773, 0.0,
        +0.74466, -0.10017, -0.00697, 0.0, +0.67637, -0.09120, -0.00631, 0.0, +0.61518, -0.08315, -0.00571, 0.0, +0.56049, -0.07594, -0.00518, 0.0,
        +0.51097, -0.06939, -0.00470, 0.0, +0.46462, -0.06325, -0.00425, 0.0, +0.42008, -0.05731, -0.00383, 0.0, +0.37742, -0.05161, -0.00343, 0.0,
        +0.33796, -0.04630, -0.00305, 0.0, +0.30196, -0.04144, -0.00272, 0.0, +0.26980, -0.03708, -0.00242, 0.0, +0.24065, -0.03310, -0.00216, 0.0,
        +0.21505, -0.02960, -0.00193, 0.0, +0.19221, -0.02648, -0.00172, 0.0, +0.17238, -0.02376, -0.00154, 0.0, +0.15483, -0.02136, -0.00138, 0.0,
        +0.13963, -0.01927, -0.00124, 0.0, +0.12619, -0.01742, -0.00112, 0.0, +0.11421, -0.01577, -0.00102, 0.0, +0.10320, -0.01425, -0.00092, 0.0,
        +0.09311, -0.01286, -0.00083, 0.0, +0.08395, -0.01159, -0.00075, 0.0, +0.07572, -0.01046, -0.00067, 0.0, +0.06834, -0.00944, -0.00061, 0.0,
        +0.06165, -0.00851, -0.00055, 0.0, +0.05561, -0.00768, -0.00049, 0.0, +0.05009, -0.00692, -0.00045, 0.0, +0.04513, -0.00623, -0.00040, 0.0,
        +0.04059, -0.00560, -0.00036, 0.0, +0.03653, -0.00504, -0.00033, 0.0, +0.03281, -0.00453, -0.00029, 0.0, +0.02951, -0.00407, -0.00026, 0.0,
        +0.02652, -0.00366, -0.00024, 0.0, +0.02386, -0.00330, -0.00021, 0.0, +0.02146, -0.00296, -0.00019, 0.0, +0.01930, -0.00267, -0.00017, 0.0,
        +0.01734, -0.00239, -0.00015, 0.0, +0.01557, -0.00215, -0.00014, 0.0, +0.01396, -0.00193, -0.00012, 0.0, +0.01250, -0.00173, -0.00011, 0.0,
        +0.01118, -0.00154, -0.00010, 0.0, +0.01000, -0.00138, -0.00009, 0.0, +0.00893, -0.00123, -0.00008, 0.0, +0.00797, -0.00110, -0.00007, 0.0,
        +0.00712, -0.00098, -0.00006, 0.0, +0.00635, -0.00088, -0.00006, 0.0, +0.00567, -0.00078, -0.00005, 0.0, +0.00506, -0.00070, -0.00005, 0.0,
        +0.00453, -0.00062, -0.00004, 0.0, +0.00405, -0.00056, -0.00004, 0.0, +0.00363, -0.00050, -0.00003, 0.0, +0.00326, -0.00045, -0.00003, 0.0
    ]);

    class EmissionSpectrum {
        constructor() {
            this.emissionType = EmissionSpectrum.SPECTRUM_WHITE;
            this.emitterTemperature = 5000.0;
            this.emitterGas = 0;
            this.samples = new Float32Array(EmissionSpectrum.SPECTRUM_SAMPLES);
            this.cdf = new Float32Array(EmissionSpectrum.SPECTRUM_SAMPLES + 1);
            this.pdf = new Float32Array(EmissionSpectrum.SPECTRUM_SAMPLES);
            this.icdf = new Float32Array(EmissionSpectrum.ICDF_SAMPLES);
        }
        set(values) {
            Object.assign(this, values);
            this.compute();
        }
        compute() {
            switch (this.emissionType) {
                case EmissionSpectrum.SPECTRUM_WHITE:
                    this.computeWhite();
                    break;
                case EmissionSpectrum.SPECTRUM_INCANDESCENT:
                    this.computeIncandescent();
                    break;
                case EmissionSpectrum.SPECTRUM_GAS_DISCHARGE:
                    this.computeDischarge();
            }
            this.computeIcdf();
        }
        computeWhite() {
            const { SPECTRUM_SAMPLES } = EmissionSpectrum;
            for (let i = 0; i < SPECTRUM_SAMPLES; ++i) {
                this.samples[i] = 1.0;
            }
        }
        computeIncandescent() {
            const { SPECTRUM_SAMPLES, LAMBDA_MIN, LAMBDA_MAX } = EmissionSpectrum;
            const h = 6.626070040e-34;
            const c = 299792458.0;
            const kB = 1.3806488e-23;
            const T = this.emitterTemperature;
            for (let i = 0; i < SPECTRUM_SAMPLES; ++i) {
                const l = (LAMBDA_MIN + (LAMBDA_MAX - LAMBDA_MIN) * (i + 0.5) / SPECTRUM_SAMPLES) * 1e-9;
                const power = 1e-12 * (2.0 * h * c * c) / (l * l * l * l * l * (Math.exp(h * c / (l * kB * T)) - 1.0));
                this.samples[i] = power;
            }
        }
        computeDischarge() {
            const { SPECTRUM_SAMPLES, LAMBDA_MIN, LAMBDA_MAX } = EmissionSpectrum;
            const wavelengths = gasDischargeLines[this.emitterGas].wavelengths;
            const strengths = gasDischargeLines[this.emitterGas].strengths;
            for (var i = 0; i < SPECTRUM_SAMPLES; ++i)
                this.samples[i] = 0.0;
            for (var i = 0; i < wavelengths.length; ++i) {
                var idx = Math.floor((wavelengths[i] - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN) * SPECTRUM_SAMPLES);
                if (idx < 0 || idx >= SPECTRUM_SAMPLES)
                    continue;
                this.samples[idx] += strengths[i];
            }
        }
        computeIcdf() {
            const { SPECTRUM_SAMPLES, ICDF_SAMPLES } = EmissionSpectrum;
            const { pdf, cdf, icdf, samples: emissionSpectrum } = this;
            let sum = 0.0;
            for (var i = 0; i < SPECTRUM_SAMPLES; ++i) {
                sum += emissionSpectrum[i];
            }
            /* Mix in 10% of a uniform sample distribution to stay on the safe side.
               Especially gas emission spectra with lots of emission lines
               tend to have small peaks that fall through the cracks otherwise */
            var safetyPadding = 0.1;
            var normalization = SPECTRUM_SAMPLES / sum;
            /* Precompute cdf and pdf (unnormalized for now) */
            cdf[0] = 0.0;
            for (var i = 0; i < SPECTRUM_SAMPLES; ++i) {
                emissionSpectrum[i] *= normalization;
                /* Also take into account the observer response when distributing samples.
                   Otherwise tends to prioritize peaks just barely outside the visible spectrum */
                var observerResponse = (1.0 / 3.0) * (Math.abs(wavelengthToRgbTable[i * 4]) +
                    Math.abs(wavelengthToRgbTable[i * 4 + 1]) +
                    Math.abs(wavelengthToRgbTable[i * 4 + 2]));
                pdf[i] = observerResponse * (emissionSpectrum[i] + safetyPadding) / (1.0 + safetyPadding);
                this.cdf[i + 1] = pdf[i] + this.cdf[i];
            }
            /* All done! Time to normalize */
            var cdfSum = cdf[SPECTRUM_SAMPLES];
            for (var i = 0; i < SPECTRUM_SAMPLES; ++i) {
                pdf[i] *= SPECTRUM_SAMPLES / cdfSum;
                cdf[i + 1] /= cdfSum;
            }
            /* Make sure we don't fall into any floating point pits */
            cdf[SPECTRUM_SAMPLES] = 1.0;
            /* Precompute an inverted mapping of the cdf. This is biased!
               Unfortunately we can't really afford to do runtime bisection
               on the GPU, so this will have to do. For our purposes a small
               amount of bias is tolerable anyway. */
            var cdfIdx = 0;
            for (var i = 0; i < ICDF_SAMPLES; ++i) {
                var target = Math.min((i + 1) / ICDF_SAMPLES, 1.0);
                while (this.cdf[cdfIdx] < target)
                    cdfIdx++;
                icdf[i] = (cdfIdx - 1.0) / SPECTRUM_SAMPLES;
            }
        }
    }
    EmissionSpectrum.LAMBDA_MIN = 360.0;
    EmissionSpectrum.LAMBDA_MAX = 750.0;
    EmissionSpectrum.SPECTRUM_SAMPLES = 256;
    EmissionSpectrum.ICDF_SAMPLES = 1024;
    EmissionSpectrum.SPECTRUM_WHITE = 0;
    EmissionSpectrum.SPECTRUM_INCANDESCENT = 1;
    EmissionSpectrum.SPECTRUM_GAS_DISCHARGE = 2;

    class SpectrumRenderer {
        constructor(canvas, spectrum) {
            this.canvas = canvas;
            this.spectrum = spectrum;
            this.smooth = true;
            this.context = this.canvas.getContext('2d');
            this.spectrumFill = new Image();
            this.spectrumFill.src = 'Spectrum.png';
            this.spectrumFill.addEventListener('load', this.loadPattern.bind(this));
            if (this.spectrumFill.complete)
                this.loadPattern();
        }
        loadPattern() {
            this.pattern = this.context.createPattern(this.spectrumFill, 'repeat-y');
            this.draw();
        }
        setColor(r, g, b) {
            this.context.strokeStyle = 'rgb(' + r + ',' + g + ',' + b + ')';
        }
        drawLine(p) {
            this.context.moveTo(p[0], p[1]);
            for (var i = 2; i < p.length; i += 2)
                this.context.lineTo(p[i], p[i + 1]);
        }
        setSmooth(smooth) {
            this.smooth = smooth;
        }
        draw() {
            var ctx = this.context;
            var w = this.canvas.width;
            var h = this.canvas.height;
            var marginX = 10;
            var marginY = 20;
            ctx.clearRect(0, 0, w, h);
            var graphW = w - 2 * marginX;
            var graphH = h - 2 * marginY;
            var graphX = 0 * 0.5 + marginX;
            var graphY = 0 * 0.5 + h - marginY;
            var axisX0 = 360;
            var axisX1 = 750;
            var axisY0 = 0.0;
            var axisY1 = 1.0;
            var xTicks = 50.0;
            var yTicks = 0.2;
            var tickSize = 10;
            var mapX = function (x) { return graphX + Math.floor(graphW * (x - axisX0) / (axisX1 - axisX0)); };
            var mapY = function (y) { return graphY - Math.floor(graphH * (y - axisY0) / (axisY1 - axisY0)); };
            ctx.beginPath();
            this.setColor(128, 128, 128);
            ctx.lineWidth = 1;
            ctx.setLineDash([1, 2]);
            for (var gx = axisX0 - 10 + xTicks; gx <= axisX1; gx += xTicks)
                this.drawLine([mapX(gx), graphY, mapX(gx), graphY - graphH]);
            for (var gy = axisY0 + yTicks; gy <= axisY1; gy += yTicks)
                this.drawLine([graphX, mapY(gy), graphX + graphW, mapY(gy)]);
            ctx.stroke();
            ctx.setLineDash([]);
            const spectrum = this.spectrum.samples;
            var max = 0.0;
            for (var i = 0; i < spectrum.length; ++i)
                max = Math.max(spectrum[i], max);
            max *= 1.1;
            var grapher = this;
            var drawGraph = function () {
                const { LAMBDA_MIN, LAMBDA_MAX } = EmissionSpectrum;
                var spectrum = grapher.spectrum.samples;
                var path = new Path2D();
                path.moveTo(0, h);
                for (var gx = axisX0; gx <= axisX1; gx += grapher.smooth ? 15 : 1) {
                    var x = mapX(gx);
                    var sx = spectrum.length * (gx - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN);
                    var y = mapY(spectrum[Math.max(Math.min(Math.floor(sx), spectrum.length - 1), 0)] / max);
                    if (gx == axisX0)
                        path.moveTo(x, y);
                    else
                        path.lineTo(x, y);
                }
                return path;
            };
            var filled = drawGraph();
            filled.lineTo(graphX + graphW, graphY);
            filled.lineTo(graphX, graphY);
            ctx.fillStyle = this.pattern;
            ctx.fill(filled);
            ctx.fillStyle = "black";
            var outline = drawGraph();
            this.setColor(0, 0, 0);
            ctx.lineWidth = 2;
            ctx.stroke(outline);
            ctx.beginPath();
            this.setColor(128, 128, 128);
            ctx.lineWidth = 2;
            this.drawLine([
                graphX + graphW, graphY - tickSize,
                graphX + graphW, graphY,
                graphX, graphY,
                graphX, graphY - graphH,
                graphX + tickSize, graphY - graphH
            ]);
            ctx.stroke();
            ctx.beginPath();
            ctx.lineWidth = 2;
            for (var gx = axisX0 - 10 + xTicks; gx < axisX1; gx += xTicks)
                this.drawLine([mapX(gx), graphY, mapX(gx), graphY - tickSize]);
            for (var gy = axisY0 + yTicks; gy < axisY1; gy += yTicks)
                this.drawLine([graphX, mapY(gy), graphX + tickSize, mapY(gy)]);
            ctx.stroke();
            ctx.font = "15px serif";
            ctx.textAlign = "center";
            for (var gx = axisX0 - 10 + xTicks; gx < axisX1; gx += xTicks)
                ctx.fillText(gx.toString(), mapX(gx), graphY + 15);
            ctx.fillText("λ", graphX + graphW, graphY + 16);
        }
    }

    class ProgressBar {
        constructor(hasLabel) {
            this.progressFraction = 0;
            this.progressPercentage = 0;
            const progressBackground = document.createElement("div");
            progressBackground.className = "progress";
            this.progressBar = document.createElement("div");
            this.progressBar.className = "progress-bar";
            progressBackground.appendChild(this.progressBar);
            this.setProgress(0.0);
            this.el = document.createElement("div");
            this.el.appendChild(progressBackground);
            if (hasLabel) {
                this.label = document.createElement("p");
                this.label.className = "progress-label";
                this.el.appendChild(this.label);
            }
        }
        getProgress() {
            return this.progressFraction;
        }
        setProgress(progressFraction) {
            this.progressFraction = progressFraction;
            this.progressPercentage = Math.min(Math.max(Math.floor(progressFraction * 100.0), 0), 100);
            this.progressBar.style.width = this.progressPercentage.toString() + "%";
        }
        setProgressWithoutTransition(progressFraction) {
            this.progressBar.classList.add("notransition");
            this.setProgress(progressFraction);
            this.progressBar.offsetHeight; /* Flush CSS changes */
            this.progressBar.classList.remove("notransition");
        }
        setLabel(text) {
            if (this.label)
                this.label.textContent = text;
        }
        getProgressPercentage() {
            return this.progressPercentage;
        }
    }

    class Slider {
        constructor(minValue, maxValue, hasLabel, callback) {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.callback = callback;
            this.value = 0;
            this.sliderBackground = document.createElement("div");
            this.sliderBackground.className = "slider";
            this.sliderBar = document.createElement("div");
            this.sliderBar.className = "slider-bar";
            this.sliderBackground.appendChild(this.sliderBar);
            this.sliderHandle = document.createElement("a");
            this.sliderHandle.className = "slider-handle";
            this.sliderBackground.appendChild(this.sliderHandle);
            var mouseMoveListener = this.mouseMove.bind(this);
            function mouseUpListener() {
                document.removeEventListener("mousemove", mouseMoveListener);
                document.removeEventListener("mouseup", mouseUpListener);
            }
            this.sliderHandle.addEventListener("mousedown", function (event) {
                event.preventDefault();
                document.addEventListener("mousemove", mouseMoveListener);
                document.addEventListener("mouseup", mouseUpListener);
            });
            this.el = document.createElement("div");
            this.el.appendChild(this.sliderBackground);
            if (hasLabel) {
                this.label = document.createElement("p");
                this.label.className = "slider-label";
                this.el.appendChild(this.label);
            }
            this.setPosition(0.45);
        }
        mouseMove(event) {
            var rect = this.sliderBackground.getBoundingClientRect();
            this.setPosition((event.clientX - rect.left) / (rect.right - rect.left));
        }
        setLabel(text) {
            if (this.label) {
                this.label.textContent = text;
            }
        }
        setValue(value) {
            value = Math.min(this.maxValue, Math.max(this.minValue, value));
            if (value != this.value) {
                this.value = value;
                var percentage = Math.max(Math.min(Math.floor(100.0 * (value - this.minValue) / (this.maxValue - this.minValue)), 100.0), 0.0);
                this.sliderHandle.style.left = this.sliderBar.style.width = percentage.toString() + "%";
                if (this.callback)
                    this.callback(value);
            }
        }
        setPosition(position) {
            this.setValue(Math.floor(this.minValue + position * (this.maxValue - this.minValue)));
        }
        show(show) {
            var display = show ? "block" : "none";
            this.sliderBackground.style.display = display;
            if (this.label)
                this.label.style.display = display;
        }
    }

    class ButtonGrid {
        constructor(cols, labels, selectionCallback) {
            this.cols = cols;
            this.selectionCallback = selectionCallback;
            this.selectedButton = 0;
            this.selectionCallback = selectionCallback;
            this.el = document.createElement("div");
            this.el.className = "button-grid";
            this.columns = Array.from({ length: cols }, () => {
                const column = document.createElement("div");
                column.className = "button-grid-column";
                return column;
            });
            this.el.append(...this.columns);
            this.cells = labels.map((label, i) => {
                var column = i % this.cols;
                var cell = document.createElement("div");
                cell.className = "button stretch-button button-grid-button";
                cell.appendChild(document.createTextNode(label));
                if (i == 0)
                    cell.classList.add("button-grid-tl");
                if (i == this.cols - 1)
                    cell.classList.add("button-grid-tr");
                if (i + this.cols >= labels.length) {
                    if (column == 0)
                        cell.classList.add("button-grid-bl");
                    if (column == this.cols - 1 || i == labels.length - 1)
                        cell.classList.add("button-grid-br");
                }
                cell.addEventListener("click", () => this.select(i));
                this.columns[column].appendChild(cell);
                return cell;
            });
            this.select(0);
        }
        select(idx) {
            if (idx < 0 || idx >= this.cells.length)
                return;
            this.cells[this.selectedButton].classList.remove("active");
            this.cells[idx].classList.add("active");
            if (this.selectedButton != idx && this.selectionCallback)
                this.selectionCallback(idx);
            this.selectedButton = idx;
        }
        show(show) {
            this.el.style.display = show ? "flex" : "none";
        }
    }

    class ButtonGroup extends ButtonGrid {
        constructor(vertical, labels, selectionCallback) {
            super(vertical ? 1 : labels.length, labels, selectionCallback);
        }
    }

    class MouseListener {
        constructor(target, callback) {
            this.target = target;
            this.callback = callback;
            this.mouseStart = [0, 0];
            this.mouseUpHandler = () => {
                document.removeEventListener('mouseup', this.mouseUpHandler);
                document.removeEventListener('mousemove', this.mouseMoveHandler);
            };
            this.mouseMoveHandler = (evt) => {
                this.callback(this.mouseStart, this.mapMouseEvent(evt));
            };
            this.mouseDown = (evt) => {
                evt.preventDefault();
                this.mouseStart = this.mapMouseEvent(evt);
                this.callback(this.mouseStart, this.mouseStart);
                document.addEventListener('mouseup', this.mouseUpHandler);
                document.addEventListener('mousemove', this.mouseMoveHandler);
            };
            target.addEventListener('mousedown', this.mouseDown);
        }
        mapMouseEvent(evt) {
            var rect = this.target.getBoundingClientRect();
            return [evt.clientX - rect.left, evt.clientY - rect.top];
        }
    }

    function replace(targetId, el) {
        const target = document.getElementById(targetId);
        target.parentNode.replaceChild(el, target);
    }

    /* @license twgl.js 4.21.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
    Available via the MIT license.
    see: http://github.com/greggman/twgl.js for details */

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /* DataType */
    const BYTE                           = 0x1400;
    const UNSIGNED_BYTE                  = 0x1401;
    const SHORT                          = 0x1402;
    const UNSIGNED_SHORT                 = 0x1403;
    const INT                            = 0x1404;
    const UNSIGNED_INT                   = 0x1405;
    const FLOAT                          = 0x1406;
    const UNSIGNED_SHORT_4_4_4_4       = 0x8033;
    const UNSIGNED_SHORT_5_5_5_1       = 0x8034;
    const UNSIGNED_SHORT_5_6_5         = 0x8363;
    const HALF_FLOAT                   = 0x140B;
    const UNSIGNED_INT_2_10_10_10_REV  = 0x8368;
    const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
    const UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;
    const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
    const UNSIGNED_INT_24_8            = 0x84FA;

    const glTypeToTypedArray = {};
    {
      const tt = glTypeToTypedArray;
      tt[BYTE]                           = Int8Array;
      tt[UNSIGNED_BYTE]                  = Uint8Array;
      tt[SHORT]                          = Int16Array;
      tt[UNSIGNED_SHORT]                 = Uint16Array;
      tt[INT]                            = Int32Array;
      tt[UNSIGNED_INT]                   = Uint32Array;
      tt[FLOAT]                          = Float32Array;
      tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;
      tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;
      tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;
      tt[HALF_FLOAT]                     = Uint16Array;
      tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;
      tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;
      tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;
      tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;
      tt[UNSIGNED_INT_24_8]              = Uint32Array;
    }

    /**
     * Get the GL type for a typedArray
     * @param {ArrayBufferView} typedArray a typedArray
     * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
     *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
     * @memberOf module:twgl/typedArray
     */
    function getGLTypeForTypedArray(typedArray) {
      if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line
      if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line
      if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
      if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line
      if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
      if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line
      throw new Error('unsupported typed array type');
    }

    /**
     * Get the GL type for a typedArray type
     * @param {ArrayBufferView} typedArrayType a typedArray constructor
     * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will
     *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned
     * @memberOf module:twgl/typedArray
     */
    function getGLTypeForTypedArrayType(typedArrayType) {
      if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line
      if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
      if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line
      if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
      if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line
      if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
      if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line
      throw new Error('unsupported typed array type');
    }

    /**
     * Get the typed array constructor for a given GL type
     * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
     * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
     * @memberOf module:twgl/typedArray
     */
    function getTypedArrayTypeForGLType(type) {
      const CTOR = glTypeToTypedArray[type];
      if (!CTOR) {
        throw new Error('unknown gl type');
      }
      return CTOR;
    }

    const isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'
      ? function isArrayBufferOrSharedArrayBuffer(a) {
        return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);
      }
      : function isArrayBuffer(a) {
        return a && a.buffer && a.buffer instanceof ArrayBuffer;
      };

    function error(...args) {
      console.error(...args);
    }

    function isBuffer(gl, t) {
      return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;
    }

    function isShader(gl, t) {
      return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;
    }

    function isTexture(gl, t) {
      return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;
    }

    function isSampler(gl, t) {
      return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    const STATIC_DRAW                  = 0x88e4;
    const ARRAY_BUFFER                 = 0x8892;
    const ELEMENT_ARRAY_BUFFER         = 0x8893;
    const BUFFER_SIZE                  = 0x8764;

    const BYTE$1                         = 0x1400;
    const UNSIGNED_BYTE$1                = 0x1401;
    const SHORT$1                        = 0x1402;
    const UNSIGNED_SHORT$1               = 0x1403;
    const INT$1                          = 0x1404;
    const UNSIGNED_INT$1                 = 0x1405;
    const FLOAT$1                        = 0x1406;
    const defaults = {
      attribPrefix: "",
    };

    function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
      gl.bindBuffer(type, buffer);
      gl.bufferData(type, array, drawType || STATIC_DRAW);
    }

    /**
     * Given typed array creates a WebGLBuffer and copies the typed array
     * into it.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
     * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
     * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
     * @return {WebGLBuffer} the created WebGLBuffer
     * @memberOf module:twgl/attributes
     */
    function createBufferFromTypedArray(gl, typedArray, type, drawType) {
      if (isBuffer(gl, typedArray)) {
        return typedArray;
      }
      type = type || ARRAY_BUFFER;
      const buffer = gl.createBuffer();
      setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
      return buffer;
    }

    function isIndices(name) {
      return name === "indices";
    }

    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    function getNormalizationForTypedArray(typedArray) {
      if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line
      if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line
      return false;
    }

    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    function getNormalizationForTypedArrayType(typedArrayType) {
      if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line
      if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line
      return false;
    }

    function getArray(array) {
      return array.length ? array : array.data;
    }

    const texcoordRE = /coord|texture/i;
    const colorRE = /color|colour/i;

    function guessNumComponentsFromName(name, length) {
      let numComponents;
      if (texcoordRE.test(name)) {
        numComponents = 2;
      } else if (colorRE.test(name)) {
        numComponents = 4;
      } else {
        numComponents = 3;  // position, normals, indices ...
      }

      if (length % numComponents > 0) {
        throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);
      }

      return numComponents;
    }

    function getNumComponents(array, arrayName) {
      return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
    }

    function makeTypedArray(array, name) {
      if (isArrayBuffer(array)) {
        return array;
      }

      if (isArrayBuffer(array.data)) {
        return array.data;
      }

      if (Array.isArray(array)) {
        array = {
          data: array,
        };
      }

      let Type = array.type;
      if (!Type) {
        if (isIndices(name)) {
          Type = Uint16Array;
        } else {
          Type = Float32Array;
        }
      }
      return new Type(array.data);
    }

    /**
     * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
     * for the attribute.
     *
     * @typedef {Object} AttribInfo
     * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
     *    disabled and set to this constant value and all other values will be ignored.
     * @property {number} [numComponents] the number of components for this attribute.
     * @property {number} [size] synonym for `numComponents`.
     * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
     * @property {boolean} [normalize] whether or not to normalize the data. Default = false
     * @property {number} [offset] offset into buffer in bytes. Default = 0
     * @property {number} [stride] the stride in bytes per element. Default = 0
     * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
     *    where as anything else = do call it with this value
     * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
     * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
     * @memberOf module:twgl
     */

    /**
     * Use this type of array spec when TWGL can't guess the type or number of components of an array
     * @typedef {Object} FullArraySpec
     * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be
     *    disabled and set to this constant value and all other values will be ignored.
     * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.
     * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
     *    If `coord` is in the name assumes `numComponents = 2`.
     *    If `color` is in the name assumes `numComponents = 4`.
     *    otherwise assumes `numComponents = 3`
     * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
     * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
     * @property {number} [size] synonym for `numComponents`.
     * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
     * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
     * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
     * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor
     *    where as anything else = do call it with this value
     * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
     * @property {string} [name] synonym for `attrib`.
     * @property {string} [attribName] synonym for `attrib`.
     * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer
     *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`
     *    to provide this. Example:
     *
     *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {
     *           position: [1, 2, 3, ... ],
     *         });
     *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {
     *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1
     *         });
     *
     * @memberOf module:twgl
     */

    /**
     * An individual array in {@link module:twgl.Arrays}
     *
     * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`
     * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
     * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.
     *
     * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec
     * @memberOf module:twgl
     */

    /**
     * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
     * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
     *
     *     Bare JavaScript Arrays
     *
     *         var arrays = {
     *            position: [-1, 1, 0],
     *            normal: [0, 1, 0],
     *            ...
     *         }
     *
     *     Bare TypedArrays
     *
     *         var arrays = {
     *            position: new Float32Array([-1, 1, 0]),
     *            color: new Uint8Array([255, 128, 64, 255]),
     *            ...
     *         }
     *
     * *   Will guess at `numComponents` if not specified based on name.
     *
     *     If `coord` is in the name assumes `numComponents = 2`
     *
     *     If `color` is in the name assumes `numComponents = 4`
     *
     *     otherwise assumes `numComponents = 3`
     *
     * Objects with various fields. See {@link module:twgl.FullArraySpec}.
     *
     *     var arrays = {
     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
     *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
     *     };
     *
     * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
     * @memberOf module:twgl
     */


    /**
     * Creates a set of attribute data and WebGLBuffers from set of arrays
     *
     * Given
     *
     *      var arrays = {
     *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
     *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
     *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
     *      };
     *
     * returns something like
     *
     *      var attribs = {
     *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
     *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
     *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
     *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
     *      };
     *
     * notes:
     *
     * *   Arrays can take various forms
     *
     *     Bare JavaScript Arrays
     *
     *         var arrays = {
     *            position: [-1, 1, 0],
     *            normal: [0, 1, 0],
     *            ...
     *         }
     *
     *     Bare TypedArrays
     *
     *         var arrays = {
     *            position: new Float32Array([-1, 1, 0]),
     *            color: new Uint8Array([255, 128, 64, 255]),
     *            ...
     *         }
     *
     * *   Will guess at `numComponents` if not specified based on name.
     *
     *     If `coord` is in the name assumes `numComponents = 2`
     *
     *     If `color` is in the name assumes `numComponents = 4`
     *
     *     otherwise assumes `numComponents = 3`
     *
     * @param {WebGLRenderingContext} gl The webgl rendering context.
     * @param {module:twgl.Arrays} arrays The arrays
     * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from
     *   This lets you share buffers. Any arrays you supply will override
     *   the buffers from srcBufferInfo.
     * @return {Object.<string, module:twgl.AttribInfo>} the attribs
     * @memberOf module:twgl/attributes
     */
    function createAttribsFromArrays(gl, arrays) {
      const attribs = {};
      Object.keys(arrays).forEach(function(arrayName) {
        if (!isIndices(arrayName)) {
          const array = arrays[arrayName];
          const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);
          if (array.value) {
            if (!Array.isArray(array.value) && !isArrayBuffer(array.value)) {
              throw new Error('array.value is not array or typedarray');
            }
            attribs[attribName] = {
              value: array.value,
            };
          } else {
            let buffer;
            let type;
            let normalization;
            let numComponents;
            if (array.buffer && array.buffer instanceof WebGLBuffer) {
              buffer = array.buffer;
              numComponents = array.numComponents || array.size;
              type = array.type;
              normalization = array.normalize;
            } else if (typeof array === "number" || typeof array.data === "number") {
              const numValues = array.data || array;
              const arrayType = array.type || Float32Array;
              const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;
              type = getGLTypeForTypedArrayType(arrayType);
              normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);
              numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);
              buffer = gl.createBuffer();
              gl.bindBuffer(ARRAY_BUFFER, buffer);
              gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);
            } else {
              const typedArray = makeTypedArray(array, arrayName);
              buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);
              type = getGLTypeForTypedArray(typedArray);
              normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);
              numComponents = getNumComponents(array, arrayName);
            }
            attribs[attribName] = {
              buffer:        buffer,
              numComponents: numComponents,
              type:          type,
              normalize:     normalization,
              stride:        array.stride || 0,
              offset:        array.offset || 0,
              divisor:       array.divisor === undefined ? undefined : array.divisor,
              drawType:      array.drawType,
            };
          }
        }
      });
      gl.bindBuffer(ARRAY_BUFFER, null);
      return attribs;
    }

    function getBytesPerValueForGLType(gl, type) {
      if (type === BYTE$1)           return 1;  // eslint-disable-line
      if (type === UNSIGNED_BYTE$1)  return 1;  // eslint-disable-line
      if (type === SHORT$1)          return 2;  // eslint-disable-line
      if (type === UNSIGNED_SHORT$1) return 2;  // eslint-disable-line
      if (type === INT$1)            return 4;  // eslint-disable-line
      if (type === UNSIGNED_INT$1)   return 4;  // eslint-disable-line
      if (type === FLOAT$1)          return 4;  // eslint-disable-line
      return 0;
    }

    // Tries to get the number of elements from a set of arrays.
    const positionKeys = ['position', 'positions', 'a_position'];

    function getNumElementsFromAttributes(gl, attribs) {
      let key;
      let ii;
      for (ii = 0; ii < positionKeys.length; ++ii) {
        key = positionKeys[ii];
        if (key in attribs) {
          break;
        }
        key = defaults.attribPrefix + key;
        if (key in attribs) {
          break;
        }
      }
      if (ii === positionKeys.length) {
        key = Object.keys(attribs)[0];
      }
      const attrib = attribs[key];
      gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);
      const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);
      gl.bindBuffer(ARRAY_BUFFER, null);

      const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);
      const totalElements = numBytes / bytesPerValue;
      const numComponents = attrib.numComponents || attrib.size;
      // TODO: check stride
      const numElements = totalElements / numComponents;
      if (numElements % 1 !== 0) {
        throw new Error(`numComponents ${numComponents} not correct for length ${length}`);
      }
      return numElements;
    }

    /**
     * @typedef {Object} BufferInfo
     * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
     * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
     * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
     * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`
     * @memberOf module:twgl
     */

    /**
     * Creates a BufferInfo from an object of arrays.
     *
     * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
     * {@link module:twgl:drawBufferInfo}.
     *
     * Given an object like
     *
     *     var arrays = {
     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
     *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
     *     };
     *
     *  Creates an BufferInfo like this
     *
     *     bufferInfo = {
     *       numElements: 4,        // or whatever the number of elements is
     *       indices: WebGLBuffer,  // this property will not exist if there are no indices
     *       attribs: {
     *         position: { buffer: WebGLBuffer, numComponents: 3, },
     *         normal:   { buffer: WebGLBuffer, numComponents: 3, },
     *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },
     *       },
     *     };
     *
     *  The properties of arrays can be JavaScript arrays in which case the number of components
     *  will be guessed.
     *
     *     var arrays = {
     *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
     *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
     *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
     *        indices:  [0, 1, 2, 1, 2, 3],
     *     };
     *
     *  They can also be TypedArrays
     *
     *     var arrays = {
     *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
     *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
     *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
     *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
     *     };
     *
     *  Or AugmentedTypedArrays
     *
     *     var positions = createAugmentedTypedArray(3, 4);
     *     var texcoords = createAugmentedTypedArray(2, 4);
     *     var normals   = createAugmentedTypedArray(3, 4);
     *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
     *
     *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
     *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
     *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
     *     indices.push([0, 1, 2, 1, 2, 3]);
     *
     *     var arrays = {
     *        position: positions,
     *        texcoord: texcoords,
     *        normal:   normals,
     *        indices:  indices,
     *     };
     *
     * For the last example it is equivalent to
     *
     *     var bufferInfo = {
     *       attribs: {
     *         position: { numComponents: 3, buffer: gl.createBuffer(), },
     *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },
     *         normal: { numComponents: 3, buffer: gl.createBuffer(), },
     *       },
     *       indices: gl.createBuffer(),
     *       numElements: 6,
     *     };
     *
     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);
     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);
     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
     *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);
     *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
     *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
     *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {module:twgl.Arrays} arrays Your data
     * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing
     *        buffer info to start from. WebGLBuffers etc specified
     *        in the srcBufferInfo will be used in a new BufferInfo
     *        with any arrays specified overriding the ones in
     *        srcBufferInfo.
     * @return {module:twgl.BufferInfo} A BufferInfo
     * @memberOf module:twgl/attributes
     */
    function createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {
      const newAttribs = createAttribsFromArrays(gl, arrays);
      const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});
      bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);
      const indices = arrays.indices;
      if (indices) {
        const newIndices = makeTypedArray(indices, "indices");
        bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);
        bufferInfo.numElements = newIndices.length;
        bufferInfo.elementType = getGLTypeForTypedArray(newIndices);
      } else if (!bufferInfo.numElements) {
        bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);
      }

      return bufferInfo;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /**
     * Gets the gl version as a number
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @return {number} version of gl
     * @private
     */
    //function getVersionAsNumber(gl) {
    //  return parseFloat(gl.getParameter(gl.VERSION).substr(6));
    //}

    /**
     * Check if context is WebGL 2.0
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @return {bool} true if it's WebGL 2.0
     * @memberOf module:twgl
     */
    function isWebGL2(gl) {
      // This is the correct check but it's slow
      //  return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
      // This might also be the correct check but I'm assuming it's slow-ish
      // return gl instanceof WebGL2RenderingContext;
      return !!gl.texStorage2D;
    }

    /**
     * Gets a string for WebGL enum
     *
     * Note: Several enums are the same. Without more
     * context (which function) it's impossible to always
     * give the correct enum. As it is, for matching values
     * it gives all enums. Checking the WebGL2RenderingContext
     * that means
     *
     *      0     = ZERO | POINT | NONE | NO_ERROR
     *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT
     *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB
     *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING
     *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING
     *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING
     *
     * It's also not useful for bits really unless you pass in individual bits.
     * In other words
     *
     *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
     *     twgl.glEnumToString(gl, bits);  // not going to work
     *
     * Note that some enums only exist on extensions. If you
     * want them to show up you need to pass the extension at least
     * once. For example
     *
     *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');
     *     if (ext) {
     *        twgl.glEnumToString(ext, 0);  // just prime the function
     *
     *        ..later..
     *
     *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
     *        console.log(twgl.glEnumToString(gl, internalFormat));
     *
     * Notice I didn't have to pass the extension the second time. This means
     * you can have place that generically gets an enum for texture formats for example.
     * and as long as you primed the function with the extensions
     *
     * If you're using `twgl.addExtensionsToContext` to enable your extensions
     * then twgl will automatically get the extension's enums.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object
     * @param {number} value the value of the enum you want to look up.
     * @return {string} enum string or hex value
     * @memberOf module:twgl
     * @function glEnumToString
     */
    const glEnumToString = (function() {
      const haveEnumsForType = {};
      const enums = {};

      function addEnums(gl) {
        const type = gl.constructor.name;
        if (!haveEnumsForType[type]) {
          for (const key in gl) {
            if (typeof gl[key] === 'number') {
              const existing = enums[gl[key]];
              enums[gl[key]] = existing ? `${existing} | ${key}` : key;
            }
          }
          haveEnumsForType[type] = true;
        }
      }

      return function glEnumToString(gl, value) {
        addEnums(gl);
        return enums[value] || (typeof value === 'number' ? `0x${value.toString(16)}` : value);
      };
    }());

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */
    const defaults$1 = {
      textureColor: new Uint8Array([128, 192, 255, 255]),
      textureOptions: {},
      crossOrigin: undefined,
    };
    const isArrayBuffer$1 = isArrayBuffer;

    // Should we make this on demand?
    const getShared2DContext = function() {
      let s_ctx;
      return function getShared2DContext() {
        s_ctx = s_ctx ||
            ((typeof document !== 'undefined' && document.createElement)
              ? document.createElement("canvas").getContext("2d")
              : null);
        return s_ctx;
      };
    }();

    // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but
    //       not only does Firefox NOT support it but Firefox freezes immediately
    //       if you try to create one instead of just returning null and continuing.
    //  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext("2d"));  // OffscreenCanvas may not support 2d

    // NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2
    // we can use the various unpack settings. Otherwise we could try using
    // the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap
    // is async and the current TWGL code expects a non-Async result though that
    // might not be a problem. ImageBitmap though is not available in Edge or Safari
    // as of 2018-01-02

    /* PixelFormat */
    const ALPHA                          = 0x1906;
    const RGB                            = 0x1907;
    const RGBA                           = 0x1908;
    const LUMINANCE                      = 0x1909;
    const LUMINANCE_ALPHA                = 0x190A;
    const DEPTH_COMPONENT                = 0x1902;
    const DEPTH_STENCIL                  = 0x84F9;

    /* TextureWrapMode */
    // const REPEAT                         = 0x2901;
    // const MIRRORED_REPEAT                = 0x8370;
    const CLAMP_TO_EDGE                  = 0x812f;

    /* TextureMagFilter */
    const NEAREST                        = 0x2600;
    const LINEAR                         = 0x2601;

    /* TextureMinFilter */
    // const NEAREST_MIPMAP_NEAREST         = 0x2700;
    // const LINEAR_MIPMAP_NEAREST          = 0x2701;
    // const NEAREST_MIPMAP_LINEAR          = 0x2702;
    // const LINEAR_MIPMAP_LINEAR           = 0x2703;

    /* Texture Target */
    const TEXTURE_2D                     = 0x0de1;
    const TEXTURE_CUBE_MAP               = 0x8513;
    const TEXTURE_3D                     = 0x806f;
    const TEXTURE_2D_ARRAY               = 0x8c1a;

    /* Cubemap Targets */
    const TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;
    const TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;
    const TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;
    const TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;
    const TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;
    const TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;

    /* Texture Parameters */
    const TEXTURE_MIN_FILTER             = 0x2801;
    const TEXTURE_MAG_FILTER             = 0x2800;
    const TEXTURE_WRAP_S                 = 0x2802;
    const TEXTURE_WRAP_T                 = 0x2803;
    const TEXTURE_WRAP_R                 = 0x8072;
    const TEXTURE_MIN_LOD                = 0x813a;
    const TEXTURE_MAX_LOD                = 0x813b;
    const TEXTURE_BASE_LEVEL             = 0x813c;
    const TEXTURE_MAX_LEVEL              = 0x813d;


    /* Pixel store */
    const UNPACK_ALIGNMENT                   = 0x0cf5;
    const UNPACK_ROW_LENGTH                  = 0x0cf2;
    const UNPACK_IMAGE_HEIGHT                = 0x806e;
    const UNPACK_SKIP_PIXELS                 = 0x0cf4;
    const UNPACK_SKIP_ROWS                   = 0x0cf3;
    const UNPACK_SKIP_IMAGES                 = 0x806d;
    const UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
    const UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;
    const UNPACK_FLIP_Y_WEBGL                = 0x9240;

    const R8                           = 0x8229;
    const R8_SNORM                     = 0x8F94;
    const R16F                         = 0x822D;
    const R32F                         = 0x822E;
    const R8UI                         = 0x8232;
    const R8I                          = 0x8231;
    const RG16UI                       = 0x823A;
    const RG16I                        = 0x8239;
    const RG32UI                       = 0x823C;
    const RG32I                        = 0x823B;
    const RG8                          = 0x822B;
    const RG8_SNORM                    = 0x8F95;
    const RG16F                        = 0x822F;
    const RG32F                        = 0x8230;
    const RG8UI                        = 0x8238;
    const RG8I                         = 0x8237;
    const R16UI                        = 0x8234;
    const R16I                         = 0x8233;
    const R32UI                        = 0x8236;
    const R32I                         = 0x8235;
    const RGB8                         = 0x8051;
    const SRGB8                        = 0x8C41;
    const RGB565                       = 0x8D62;
    const RGB8_SNORM                   = 0x8F96;
    const R11F_G11F_B10F               = 0x8C3A;
    const RGB9_E5                      = 0x8C3D;
    const RGB16F                       = 0x881B;
    const RGB32F                       = 0x8815;
    const RGB8UI                       = 0x8D7D;
    const RGB8I                        = 0x8D8F;
    const RGB16UI                      = 0x8D77;
    const RGB16I                       = 0x8D89;
    const RGB32UI                      = 0x8D71;
    const RGB32I                       = 0x8D83;
    const RGBA8                        = 0x8058;
    const SRGB8_ALPHA8                 = 0x8C43;
    const RGBA8_SNORM                  = 0x8F97;
    const RGB5_A1                      = 0x8057;
    const RGBA4                        = 0x8056;
    const RGB10_A2                     = 0x8059;
    const RGBA16F                      = 0x881A;
    const RGBA32F                      = 0x8814;
    const RGBA8UI                      = 0x8D7C;
    const RGBA8I                       = 0x8D8E;
    const RGB10_A2UI                   = 0x906F;
    const RGBA16UI                     = 0x8D76;
    const RGBA16I                      = 0x8D88;
    const RGBA32I                      = 0x8D82;
    const RGBA32UI                     = 0x8D70;

    const DEPTH_COMPONENT16            = 0x81A5;
    const DEPTH_COMPONENT24            = 0x81A6;
    const DEPTH_COMPONENT32F           = 0x8CAC;
    const DEPTH32F_STENCIL8            = 0x8CAD;
    const DEPTH24_STENCIL8             = 0x88F0;

    /* DataType */
    const BYTE$2                         = 0x1400;
    const UNSIGNED_BYTE$2                = 0x1401;
    const SHORT$2                        = 0x1402;
    const UNSIGNED_SHORT$2               = 0x1403;
    const INT$2                          = 0x1404;
    const UNSIGNED_INT$2                 = 0x1405;
    const FLOAT$2                        = 0x1406;
    const UNSIGNED_SHORT_4_4_4_4$1       = 0x8033;
    const UNSIGNED_SHORT_5_5_5_1$1       = 0x8034;
    const UNSIGNED_SHORT_5_6_5$1         = 0x8363;
    const HALF_FLOAT$1                   = 0x140B;
    const HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(
    const UNSIGNED_INT_2_10_10_10_REV$1  = 0x8368;
    const UNSIGNED_INT_10F_11F_11F_REV$1 = 0x8C3B;
    const UNSIGNED_INT_5_9_9_9_REV$1     = 0x8C3E;
    const FLOAT_32_UNSIGNED_INT_24_8_REV$1 = 0x8DAD;
    const UNSIGNED_INT_24_8$1            = 0x84FA;

    const RG                           = 0x8227;
    const RG_INTEGER                   = 0x8228;
    const RED                          = 0x1903;
    const RED_INTEGER                  = 0x8D94;
    const RGB_INTEGER                  = 0x8D98;
    const RGBA_INTEGER                 = 0x8D99;

    /**
     * @typedef {Object} TextureFormatDetails
     * @property {number} textureFormat format to pass texImage2D and similar functions.
     * @property {boolean} colorRenderable true if you can render to this format of texture.
     * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.
     * @property {number[]} type Array of possible types you can pass to texImage2D and similar function
     * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element
     * @private
     */

    let s_textureInternalFormatInfo;
    function getTextureInternalFormatInfo(internalFormat) {
      if (!s_textureInternalFormatInfo) {
        // NOTE: these properties need unique names so we can let Uglify mangle the name.
        const t = {};
        // unsized formats
        t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
        t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
        t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2], };
        t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_5_6_5$1], };
        t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE$2, HALF_FLOAT$1, HALF_FLOAT_OES, FLOAT$2, UNSIGNED_SHORT_4_4_4_4$1, UNSIGNED_SHORT_5_5_5_1$1], };
        t[DEPTH_COMPONENT]    = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],              type: [UNSIGNED_INT$2, UNSIGNED_SHORT$2], };

        // sized formats
        t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
        t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE$2], };
        t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT$2, HALF_FLOAT$1], };
        t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
        t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE$2], };
        t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE$2], };
        t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT$2], };
        t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT$2], };
        t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
        t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT$2], };
        t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
        t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE$2], };
        t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT$2, HALF_FLOAT$1], };
        t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT$2], };
        t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE$2], };
        t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE$2], };
        t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT$2], };
        t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT$2], };
        t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT$2], };
        t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT$2], };
        t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
        t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
        t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_6_5$1], };
        t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE$2], };
        t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_10F_11F_11F_REV$1], };
        t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT$2, HALF_FLOAT$1, UNSIGNED_INT_5_9_9_9_REV$1], };
        t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT$2, HALF_FLOAT$1], };
        t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT$2], };
        t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE$2], };
        t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE$2], };
        t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT$2], };
        t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT$2], };
        t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT$2], };
        t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT$2], };
        t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
        t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
        t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE$2], };
        t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_5_5_5_1$1, UNSIGNED_INT_2_10_10_10_REV$1], };
        t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE$2, UNSIGNED_SHORT_4_4_4_4$1], };
        t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
        t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT$2, HALF_FLOAT$1], };
        t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT$2], };
        t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE$2], };
        t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE$2], };
        t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV$1], };
        t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT$2], };
        t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT$2], };
        t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT$2], };
        t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT$2], };
        // Sized Internal
        t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT$2, UNSIGNED_INT$2], };
        t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT$2], };
        t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT$2], };
        t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8$1], };
        t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV$1], };

        Object.keys(t).forEach(function(internalFormat) {
          const info = t[internalFormat];
          info.bytesPerElementMap = {};
          info.bytesPerElement.forEach(function(bytesPerElement, ndx) {
            const type = info.type[ndx];
            info.bytesPerElementMap[type] = bytesPerElement;
          });
        });
        s_textureInternalFormatInfo = t;
      }
      return s_textureInternalFormatInfo[internalFormat];
    }

    /**
     * Gets the number of bytes per element for a given internalFormat / type
     * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
     * @param {number} type The type parameter for texImage2D etc..
     * @return {number} the number of bytes per element for the given internalFormat, type combo
     * @memberOf module:twgl/textures
     */
    function getBytesPerElementForInternalFormat(internalFormat, type) {
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      const bytesPerElement = info.bytesPerElementMap[type];
      if (bytesPerElement === undefined) {
        throw "unknown internal format";
      }
      return bytesPerElement;
    }

    /**
     * Info related to a specific texture internalFormat as returned
     * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.
     *
     * @typedef {Object} TextureFormatInfo
     * @property {number} format Format to pass to texImage2D and related functions
     * @property {number} type Type to pass to texImage2D and related functions
     * @memberOf module:twgl/textures
     */

    /**
     * Gets the format and type for a given internalFormat
     *
     * @param {number} internalFormat The internal format
     * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,
     * @memberOf module:twgl/textures
     */
    function getFormatAndTypeForInternalFormat(internalFormat) {
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      return {
        format: info.textureFormat,
        type: info.type[0],
      };
    }

    /**
     * Returns true if value is power of 2
     * @param {number} value number to check.
     * @return true if value is power of 2
     * @private
     */
    function isPowerOf2(value) {
      return (value & (value - 1)) === 0;
    }

    /**
     * Gets whether or not we can generate mips for the given
     * internal format.
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {number} width The width parameter from texImage2D etc..
     * @param {number} height The height parameter from texImage2D etc..
     * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
     * @return {boolean} true if we can generate mips
     * @memberOf module:twgl/textures
     */
    function canGenerateMipmap(gl, width, height, internalFormat) {
      if (!isWebGL2(gl)) {
        return isPowerOf2(width) && isPowerOf2(height);
      }
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      return info.colorRenderable && info.textureFilterable;
    }

    /**
     * Gets whether or not we can generate mips for the given format
     * @param {number} internalFormat The internalFormat parameter from texImage2D etc..
     * @return {boolean} true if we can generate mips
     * @memberOf module:twgl/textures
     */
    function canFilter(internalFormat) {
      const info = getTextureInternalFormatInfo(internalFormat);
      if (!info) {
        throw "unknown internal format";
      }
      return info.textureFilterable;
    }

    /**
     * Gets the texture type for a given array type.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @return {number} the gl texture type
     * @private
     */
    function getTextureTypeForArrayType(gl, src, defaultType) {
      if (isArrayBuffer$1(src)) {
        return getGLTypeForTypedArray(src);
      }
      return defaultType || UNSIGNED_BYTE$2;
    }

    function guessDimensions(gl, target, width, height, numElements) {
      if (numElements % 1 !== 0) {
        throw "can't guess dimensions";
      }
      if (!width && !height) {
        const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));
        if (size % 1 === 0) {
          width = size;
          height = size;
        } else {
          width = numElements;
          height = 1;
        }
      } else if (!height) {
        height = numElements / width;
        if (height % 1) {
          throw "can't guess dimensions";
        }
      } else if (!width) {
        width = numElements / height;
        if (width % 1) {
          throw "can't guess dimensions";
        }
      }
      return {
        width: width,
        height: height,
      };
    }

    /**
     * A function to generate the source for a texture.
     * @callback TextureFunc
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {module:twgl.TextureOptions} options the texture options
     * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.
     * @memberOf module:twgl
     */

    /**
     * Texture options passed to most texture functions. Each function will use whatever options
     * are appropriate for its needs. This lets you pass the same options to all functions.
     *
     * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,
     * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.
     *
     * @typedef {Object} TextureOptions
     * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
     * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.
     * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
     * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
     * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .
     * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
     *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
     * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
     * @property {number} [minMag] both the min and mag filter settings.
     * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`
     * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
     * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`
     *     is ArrayBufferView defaults to type that matches ArrayBufferView type.
     * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube
     * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
     * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
     * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
     * @property {number} [minLod] TEXTURE_MIN_LOD setting
     * @property {number} [maxLod] TEXTURE_MAX_LOD setting
     * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting
     * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting
     * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
     * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.
     *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`
     *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink
     * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
     *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
     *     the current setting for specific textures.
     * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
     *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
     *     the current setting for specific textures.
     * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
     *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
     *     the current setting for specific textures.
     * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and
     *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above
     *    then then `auto` is assumed to be `false` unless explicity set to `true`.
     * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
     *
     *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
     *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
     *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
     *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
     *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
     *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
     *
     * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture
     *
     *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
     *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.
     *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
     *    The pieces will be uploaded in `cubeFaceOrder`
     *
     *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.
     *
     *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture
     *    and will be scaled to the specified width and height OR to the size of the first image that loads.
     *
     *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
     *    `HTMLCanvasElement`, `HTMLVideoElement`.
     *
     *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is
     *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`
     *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
     *    by 6. Then
     *
     *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
     *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
     *
     *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
     *
     * If `number[]` will be converted to `type`.
     *
     * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
     * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
     * an array etc...
     *
     * If `src` is undefined then an empty texture will be created of size `width` by `height`.
     *
     * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
     *    default: undefined. Also see {@link module:twgl.setDefaults}.
     *
     * @memberOf module:twgl
     */

    /**
     * Sets any packing state that will be set based on the options.
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @private
     */
    function setPackState(gl, options) {
      if (options.colorspaceConversion !== undefined) {
        gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);
      }
      if (options.premultiplyAlpha !== undefined) {
        gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);
      }
      if (options.flipY !== undefined) {
        gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);
      }
    }

    /**
     * Set skip state to defaults
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @private
     */
    function setSkipStateToDefault(gl) {
      gl.pixelStorei(UNPACK_ALIGNMENT, 4);
      if (isWebGL2(gl)) {
        gl.pixelStorei(UNPACK_ROW_LENGTH, 0);
        gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
        gl.pixelStorei(UNPACK_SKIP_PIXELS, 0);
        gl.pixelStorei(UNPACK_SKIP_ROWS, 0);
        gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
      }
    }

    /**
     * Sets the parameters of a texture or sampler
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {number|WebGLSampler} target texture target or sampler
     * @param {function()} parameteriFn texParameteri or samplerParameteri fn
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @private
     */
    function setTextureSamplerParameters(gl, target, parameteriFn, options) {
      if (options.minMag) {
        parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);
        parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);
      }
      if (options.min) {
        parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);
      }
      if (options.mag) {
        parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);
      }
      if (options.wrap) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);
        parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);
        if (target === TEXTURE_3D || isSampler(gl, target)) {
          parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);
        }
      }
      if (options.wrapR) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);
      }
      if (options.wrapS) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);
      }
      if (options.wrapT) {
        parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);
      }
      if (options.minLod) {
        parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);
      }
      if (options.maxLod) {
        parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);
      }
      if (options.baseLevel) {
        parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);
      }
      if (options.maxLevel) {
        parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);
      }
    }

    /**
     * Sets the texture parameters of a texture.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     */
    function setTextureParameters(gl, tex, options) {
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      setTextureSamplerParameters(gl, target, gl.texParameteri, options);
    }

    /**
     * Makes a 1x1 pixel
     * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
     * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values
     * @return {Uint8Array} Unit8Array with color.
     * @private
     */
    function make1Pixel(color) {
      color = color || defaults$1.textureColor;
      if (isArrayBuffer$1(color)) {
        return color;
      }
      return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
    }

    /**
     * Sets filtering or generates mips for texture based on width or height
     * If width or height is not passed in uses `options.width` and//or `options.height`
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @param {number} [width] width of texture
     * @param {number} [height] height of texture
     * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..
     * @memberOf module:twgl/textures
     */
    function setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {
      options = options || defaults$1.textureOptions;
      internalFormat = internalFormat || RGBA;
      const target = options.target || TEXTURE_2D;
      width = width || options.width;
      height = height || options.height;
      gl.bindTexture(target, tex);
      if (canGenerateMipmap(gl, width, height, internalFormat)) {
        gl.generateMipmap(target);
      } else {
        const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;
        gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);
        gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);
        gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
        gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
      }
    }

    function shouldAutomaticallySetTextureFilteringForSize(options) {
      return options.auto === true || (options.auto === undefined && options.level === undefined);
    }

    /**
     * Gets an array of cubemap face enums
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @return {number[]} cubemap face enums
     * @private
     */
    function getCubeFaceOrder(gl, options) {
      options = options || {};
      return options.cubeFaceOrder || [
          TEXTURE_CUBE_MAP_POSITIVE_X,
          TEXTURE_CUBE_MAP_NEGATIVE_X,
          TEXTURE_CUBE_MAP_POSITIVE_Y,
          TEXTURE_CUBE_MAP_NEGATIVE_Y,
          TEXTURE_CUBE_MAP_POSITIVE_Z,
          TEXTURE_CUBE_MAP_NEGATIVE_Z,
        ];
    }

    /**
     * @typedef {Object} FaceInfo
     * @property {number} face gl enum for texImage2D
     * @property {number} ndx face index (0 - 5) into source data
     * @ignore
     */

    /**
     * Gets an array of FaceInfos
     * There's a bug in some NVidia drivers that will crash the driver if
     * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
     * the user's desired order from his faces to WebGL and make sure we
     * do the faces in WebGL order
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but
     *    it's needed internally to sort the array of `ndx` properties by `face`.
     * @private
     */
    function getCubeFacesWithNdx(gl, options) {
      const faces = getCubeFaceOrder(gl, options);
      // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(
      const facesWithNdx = faces.map(function(face, ndx) {
        return { face: face, ndx: ndx };
      });
      facesWithNdx.sort(function(a, b) {
        return a.face - b.face;
      });
      return facesWithNdx;
    }

    /**
     * Set a texture from the contents of an element. Will also set
     * texture filtering or generate mips based on the dimensions of the element
     * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
     * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {HTMLElement} element a canvas, img, or video element.
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     * @kind function
     */
    function setTextureFromElement(gl, tex, element, options) {
      options = options || defaults$1.textureOptions;
      const target = options.target || TEXTURE_2D;
      const level = options.level || 0;
      let width = element.width;
      let height = element.height;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || formatType.type;
      setPackState(gl, options);
      gl.bindTexture(target, tex);
      if (target === TEXTURE_CUBE_MAP) {
        // guess the parts
        const imgWidth  = element.width;
        const imgHeight = element.height;
        let size;
        let slices;
        if (imgWidth / 6 === imgHeight) {
          // It's 6x1
          size = imgHeight;
          slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
        } else if (imgHeight / 6 === imgWidth) {
          // It's 1x6
          size = imgWidth;
          slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
        } else if (imgWidth / 3 === imgHeight / 2) {
          // It's 3x2
          size = imgWidth / 3;
          slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
        } else if (imgWidth / 2 === imgHeight / 3) {
          // It's 2x3
          size = imgWidth / 2;
          slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
        } else {
          throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
        }
        const ctx = getShared2DContext();
        if (ctx) {
          ctx.canvas.width = size;
          ctx.canvas.height = size;
          width = size;
          height = size;
          getCubeFacesWithNdx(gl, options).forEach(function(f) {
            const xOffset = slices[f.ndx * 2 + 0] * size;
            const yOffset = slices[f.ndx * 2 + 1] * size;
            ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
            gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);
          });
          // Free up the canvas memory
          ctx.canvas.width = 1;
          ctx.canvas.height = 1;
        } else if (typeof createImageBitmap !== 'undefined') {
          // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's
          // note lossy? (alpha is not premultiplied? although I'm not sure what
          width = size;
          height = size;
          getCubeFacesWithNdx(gl, options).forEach(function(f) {
            const xOffset = slices[f.ndx * 2 + 0] * size;
            const yOffset = slices[f.ndx * 2 + 1] * size;
            // We can't easily use a default texture color here as it would have to match
            // the type across all faces where as with a 2D one there's only one face
            // so we're replacing everything all at once. It also has to be the correct size.
            // On the other hand we need all faces to be the same size so as one face loads
            // the rest match else the texture will be un-renderable.
            gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);
            createImageBitmap(element, xOffset, yOffset, size, size, {
              premultiplyAlpha: 'none',
              colorSpaceConversion: 'none',
            })
            .then(function(imageBitmap) {
              setPackState(gl, options);
              gl.bindTexture(target, tex);
              gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);
              if (shouldAutomaticallySetTextureFilteringForSize(options)) {
                setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
              }
            });
          });
        }
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        const smallest = Math.min(element.width, element.height);
        const largest = Math.max(element.width, element.height);
        const depth = largest / smallest;
        if (depth % 1 !== 0) {
          throw "can not compute 3D dimensions of element";
        }
        const xMult = element.width  === largest ? 1 : 0;
        const yMult = element.height === largest ? 1 : 0;
        gl.pixelStorei(UNPACK_ALIGNMENT, 1);
        gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);
        gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);
        gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);
        gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);
        for (let d = 0; d < depth; ++d) {
          const srcX = d * smallest * xMult;
          const srcY = d * smallest * yMult;
          gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);
          gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);
          gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);
        }
        setSkipStateToDefault(gl);
      } else {
        gl.texImage2D(target, level, internalFormat, format, type, element);
      }
      if (shouldAutomaticallySetTextureFilteringForSize(options)) {
        setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
      }
      setTextureParameters(gl, tex, options);
    }

    function noop() {
    }

    /**
     * Checks whether the url's origin is the same so that we can set the `crossOrigin`
     * @param {string} url url to image
     * @returns {boolean} true if the window's origin is the same as image's url
     * @private
     */
    function urlIsSameOrigin(url) {
      if (typeof document !== 'undefined') {
        // for IE really
        const a = document.createElement('a');
        a.href = url;
        return a.hostname === location.hostname &&
               a.port     === location.port &&
               a.protocol === location.protocol;
      } else {
        const localOrigin = (new URL(location.href)).origin;
        const urlOrigin = (new URL(url, location.href)).origin;
        return urlOrigin === localOrigin;
      }
    }

    function setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {
      return crossOrigin === undefined && !urlIsSameOrigin(url)
         ? 'anonymous'
         : crossOrigin;
    }

    /**
     * Loads an image
     * @param {string} url url to image
     * @param {string} crossOrigin
     * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
     *     if there was an error
     * @return {HTMLImageElement} the image being loaded.
     * @private
     */
    function loadImage(url, crossOrigin, callback) {
      callback = callback || noop;
      let img;
      crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults$1.crossOrigin;
      crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);
      if (typeof Image !== 'undefined') {
        img = new Image();
        if (crossOrigin !== undefined) {
          img.crossOrigin = crossOrigin;
        }

        const clearEventHandlers = function clearEventHandlers() {
          img.removeEventListener('error', onError);  // eslint-disable-line
          img.removeEventListener('load', onLoad);  // eslint-disable-line
          img = null;
        };

        const onError = function onError() {
          const msg = "couldn't load image: " + url;
          error(msg);
          callback(msg, img);
          clearEventHandlers();
        };

        const onLoad = function onLoad() {
          callback(null, img);
          clearEventHandlers();
        };

        img.addEventListener('error', onError);
        img.addEventListener('load', onLoad);
        img.src = url;
        return img;
      } else if (typeof ImageBitmap !== 'undefined') {
        let err;
        let bm;
        const cb = function cb() {
          callback(err, bm);
        };

        const options = {};
        if (crossOrigin) {
          options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin
        }
        fetch(url, options).then(function(response) {
          if (!response.ok) {
            throw response;
          }
          return response.blob();
        }).then(function(blob) {
          return createImageBitmap(blob, {
            premultiplyAlpha: 'none',
            colorSpaceConversion: 'none',
          });
        }).then(function(bitmap) {
          // not sure if this works. We don't want
          // to catch the user's error. So, call
          // the callback in a timeout so we're
          // not in this scope inside the promise.
          bm = bitmap;
          setTimeout(cb);
        }).catch(function(e) {
          err = e;
          setTimeout(cb);
        });
        img = null;
      }
      return img;
    }

    /**
     * check if object is a TexImageSource
     *
     * @param {Object} obj Object to test
     * @return {boolean} true if object is a TexImageSource
     * @private
     */
    function isTexImageSource(obj) {
      return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||
             (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||
             (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);
    }

    /**
     * if obj is an TexImageSource then just
     * uses it otherwise if obj is a string
     * then load it first.
     *
     * @param {string|TexImageSource} obj
     * @param {string} crossOrigin
     * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
     *     if there was an error
     * @private
     */
    function loadAndUseImage(obj, crossOrigin, callback) {
      if (isTexImageSource(obj)) {
        setTimeout(function() {
          callback(null, obj);
        });
        return obj;
      }

      return loadImage(obj, crossOrigin, callback);
    }

    /**
     * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
     * the default texture color is used which can be set by calling `setDefaultTextureColor`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     */
    function setTextureTo1PixelColor(gl, tex, options) {
      options = options || defaults$1.textureOptions;
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      if (options.color === false) {
        return;
      }
      // Assume it's a URL
      // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.
      const color = make1Pixel(options.color);
      if (target === TEXTURE_CUBE_MAP) {
        for (let ii = 0; ii < 6; ++ii) {
          gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
        }
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
      } else {
        gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE$2, color);
      }
    }

    /**
     * The src image(s) used to create a texture.
     *
     * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
     * you can pass in urls for images to load into the textures. If it's a single url
     * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
     * this will be a corresponding array of images for the cubemap.
     *
     * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
     * @memberOf module:twgl
     */

    /**
     * A callback for when an image finished downloading and been uploaded into a texture
     * @callback TextureReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {WebGLTexture} texture the texture.
     * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture
     * @memberOf module:twgl
     */

    /**
     * A callback for when all images have finished downloading and been uploaded into their respective textures
     * @callback TexturesReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
     * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
     * @memberOf module:twgl
     */

    /**
     * A callback for when an image finished downloading and been uploaded into a texture
     * @callback CubemapReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {WebGLTexture} tex the texture.
     * @param {HTMLImageElement[]} imgs the images for each face.
     * @memberOf module:twgl
     */

    /**
     * A callback for when an image finished downloading and been uploaded into a texture
     * @callback ThreeDReadyCallback
     * @param {*} err If truthy there was an error.
     * @param {WebGLTexture} tex the texture.
     * @param {HTMLImageElement[]} imgs the images for each slice.
     * @memberOf module:twgl
     */

    /**
     * Loads a texture from an image from a Url as specified in `options.src`
     * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
     * immediately useable. It will be updated with the contents of the image once the image has finished
     * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
     *    be non null if there was an error.
     * @return {HTMLImageElement} the image being downloaded.
     * @memberOf module:twgl/textures
     */
    function loadTextureFromUrl(gl, tex, options, callback) {
      callback = callback || noop;
      options = options || defaults$1.textureOptions;
      setTextureTo1PixelColor(gl, tex, options);
      // Because it's async we need to copy the options.
      options = Object.assign({}, options);
      const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {
        if (err) {
          callback(err, tex, img);
        } else {
          setTextureFromElement(gl, tex, img, options);
          callback(null, tex, img);
        }
      });
      return img;
    }

    /**
     * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
     * so that it is usable immediately unless `option.color === false`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
     *    be non null if there was an error.
     * @memberOf module:twgl/textures
     */
    function loadCubemapFromUrls(gl, tex, options, callback) {
      callback = callback || noop;
      const urls = options.src;
      if (urls.length !== 6) {
        throw "there must be 6 urls for a cubemap";
      }
      const level = options.level || 0;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || UNSIGNED_BYTE$2;
      const target = options.target || TEXTURE_2D;
      if (target !== TEXTURE_CUBE_MAP) {
        throw "target must be TEXTURE_CUBE_MAP";
      }
      setTextureTo1PixelColor(gl, tex, options);
      // Because it's async we need to copy the options.
      options = Object.assign({}, options);
      let numToLoad = 6;
      const errors = [];
      const faces = getCubeFaceOrder(gl, options);
      let imgs;  // eslint-disable-line

      function uploadImg(faceTarget) {
        return function(err, img) {
          --numToLoad;
          if (err) {
            errors.push(err);
          } else {
            if (img.width !== img.height) {
              errors.push("cubemap face img is not a square: " + img.src);
            } else {
              setPackState(gl, options);
              gl.bindTexture(target, tex);

              // So assuming this is the first image we now have one face that's img sized
              // and 5 faces that are 1x1 pixel so size the other faces
              if (numToLoad === 5) {
                // use the default order
                getCubeFaceOrder().forEach(function(otherTarget) {
                  // Should we re-use the same face or a color?
                  gl.texImage2D(otherTarget, level, internalFormat, format, type, img);
                });
              } else {
                gl.texImage2D(faceTarget, level, internalFormat, format, type, img);
              }

              if (shouldAutomaticallySetTextureFilteringForSize(options)) {
                gl.generateMipmap(target);
              }
            }
          }

          if (numToLoad === 0) {
            callback(errors.length ? errors : undefined, tex, imgs);
          }
        };
      }

      imgs = urls.map(function(url, ndx) {
        return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));
      });
    }

    /**
     * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.
     * Will set the texture to a 1x1 pixel color
     * so that it is usable immediately unless `option.color === false`.
     *
     * If the width and height is not specified the width and height of the first
     * image loaded will be used. Note that since images are loaded async
     * which image downloads first is unknown.
     *
     * If an image is not the same size as the width and height it will be scaled
     * to that width and height.
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will
     *    be non null if there was an error.
     * @memberOf module:twgl/textures
     */
    function loadSlicesFromUrls(gl, tex, options, callback) {
      callback = callback || noop;
      const urls = options.src;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || UNSIGNED_BYTE$2;
      const target = options.target || TEXTURE_2D_ARRAY;
      if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {
        throw "target must be TEXTURE_3D or TEXTURE_2D_ARRAY";
      }
      setTextureTo1PixelColor(gl, tex, options);
      // Because it's async we need to copy the options.
      options = Object.assign({}, options);
      let numToLoad = urls.length;
      const errors = [];
      let imgs;  // eslint-disable-line
      const level = options.level || 0;
      let width = options.width;
      let height = options.height;
      const depth = urls.length;
      let firstImage = true;

      function uploadImg(slice) {
        return function(err, img) {
          --numToLoad;
          if (err) {
            errors.push(err);
          } else {
            setPackState(gl, options);
            gl.bindTexture(target, tex);

            if (firstImage) {
              firstImage = false;
              width = options.width || img.width;
              height = options.height || img.height;
              gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);

              // put it in every slice otherwise some slices will be 0,0,0,0
              for (let s = 0; s < depth; ++s) {
                gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);
              }
            } else {
              let src = img;
              let ctx;
              if (img.width !== width || img.height !== height) {
                // Size the image to fix
                ctx = getShared2DContext();
                src = ctx.canvas;
                ctx.canvas.width = width;
                ctx.canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
              }

              gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);

              // free the canvas memory
              if (ctx && src === ctx.canvas) {
                ctx.canvas.width = 0;
                ctx.canvas.height = 0;
              }
            }

            if (shouldAutomaticallySetTextureFilteringForSize(options)) {
              gl.generateMipmap(target);
            }
          }

          if (numToLoad === 0) {
            callback(errors.length ? errors : undefined, tex, imgs);
          }
        };
      }

      imgs = urls.map(function(url, ndx) {
        return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));
      });
    }

    /**
     * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
     * guess the size. See {@link module:twgl.TextureOptions}.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     *   This is often the same options you passed in when you created the texture.
     * @memberOf module:twgl/textures
     */
    function setTextureFromArray(gl, tex, src, options) {
      options = options || defaults$1.textureOptions;
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      let width = options.width;
      let height = options.height;
      let depth = options.depth;
      const level = options.level || 0;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);
      if (!isArrayBuffer$1(src)) {
        const Type = getTypedArrayTypeForGLType(type);
        src = new Type(src);
      } else if (src instanceof Uint8ClampedArray) {
        src = new Uint8Array(src.buffer);
      }

      const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);
      const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?
      if (numElements % 1) {
        throw "length wrong size for format: " + glEnumToString(gl, format);
      }
      let dimensions;
      if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        if (!width && !height && !depth) {
          const size = Math.cbrt(numElements);
          if (size % 1 !== 0) {
            throw "can't guess cube size of array of numElements: " + numElements;
          }
          width = size;
          height = size;
          depth = size;
        } else if (width && (!height || !depth)) {
          dimensions = guessDimensions(gl, target, height, depth, numElements / width);
          height = dimensions.width;
          depth = dimensions.height;
        } else if (height && (!width || !depth)) {
          dimensions = guessDimensions(gl, target, width, depth, numElements / height);
          width = dimensions.width;
          depth = dimensions.height;
        } else {
          dimensions = guessDimensions(gl, target, width, height, numElements / depth);
          width = dimensions.width;
          height = dimensions.height;
        }
      } else {
        dimensions = guessDimensions(gl, target, width, height, numElements);
        width = dimensions.width;
        height = dimensions.height;
      }
      setSkipStateToDefault(gl);
      gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);
      setPackState(gl, options);
      if (target === TEXTURE_CUBE_MAP) {
        const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;
        const faceSize = numElements / 6 * elementsPerElement;

        getCubeFacesWithNdx(gl, options).forEach(f => {
          const offset = faceSize * f.ndx;
          const data = src.subarray(offset, offset + faceSize);
          gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);
        });
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);
      } else {
        gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);
      }
      return {
        width: width,
        height: height,
        depth: depth,
        type: type,
      };
    }

    /**
     * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
     * You must set `options.width` and `options.height`.
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {WebGLTexture} tex the WebGLTexture to set parameters for
     * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
     * @memberOf module:twgl/textures
     */
    function setEmptyTexture(gl, tex, options) {
      const target = options.target || TEXTURE_2D;
      gl.bindTexture(target, tex);
      const level = options.level || 0;
      const internalFormat = options.internalFormat || options.format || RGBA;
      const formatType = getFormatAndTypeForInternalFormat(internalFormat);
      const format = options.format || formatType.format;
      const type = options.type || formatType.type;
      setPackState(gl, options);
      if (target === TEXTURE_CUBE_MAP) {
        for (let ii = 0; ii < 6; ++ii) {
          gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);
        }
      } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);
      } else {
        gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);
      }
    }

    /**
     * Creates a texture based on the options passed in.
     *
     * Note: may reset UNPACK_ALIGNMENT, UNPACK_ROW_LENGTH, UNPACK_IMAGE_HEIGHT, UNPACK_SKIP_IMAGES
     * UNPACK_SKIP_PIXELS, and UNPACK_SKIP_ROWS
     *
     * @param {WebGLRenderingContext} gl the WebGLRenderingContext
     * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
     * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
     * @return {WebGLTexture} the created texture.
     * @memberOf module:twgl/textures
     */
    function createTexture(gl, options, callback) {
      callback = callback || noop;
      options = options || defaults$1.textureOptions;
      const tex = gl.createTexture();
      const target = options.target || TEXTURE_2D;
      let width  = options.width  || 1;
      let height = options.height || 1;
      const internalFormat = options.internalFormat || RGBA;
      gl.bindTexture(target, tex);
      if (target === TEXTURE_CUBE_MAP) {
        // this should have been the default for cubemaps :(
        gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
        gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
      }
      let src = options.src;
      if (src) {
        if (typeof src === "function") {
          src = src(gl, options);
        }
        if (typeof (src) === "string") {
          loadTextureFromUrl(gl, tex, options, callback);
        } else if (isArrayBuffer$1(src) ||
                   (Array.isArray(src) && (
                        typeof src[0] === 'number' ||
                        Array.isArray(src[0]) ||
                        isArrayBuffer$1(src[0]))
                   )
                  ) {
          const dimensions = setTextureFromArray(gl, tex, src, options);
          width  = dimensions.width;
          height = dimensions.height;
        } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {
          if (target === TEXTURE_CUBE_MAP) {
            loadCubemapFromUrls(gl, tex, options, callback);
          } else {
            loadSlicesFromUrls(gl, tex, options, callback);
          }
        } else { // if (isTexImageSource(src))
          setTextureFromElement(gl, tex, src, options);
          width  = src.width;
          height = src.height;
        }
      } else {
        setEmptyTexture(gl, tex, options);
      }
      if (shouldAutomaticallySetTextureFilteringForSize(options)) {
        setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);
      }
      setTextureParameters(gl, tex, options);
      return tex;
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    /**
     * Low level shader program related functions
     *
     * You should generally not need to use these functions. They are provided
     * for those cases where you're doing something out of the ordinary
     * and you need lower level access.
     *
     * For backward compatibility they are available at both `twgl.programs` and `twgl`
     * itself
     *
     * See {@link module:twgl} for core functions
     *
     * @module twgl/programs
     */

    const error$1 = error;
    function getElementById(id) {
      return (typeof document !== 'undefined' && document.getElementById)
          ? document.getElementById(id)
          : null;
    }

    const TEXTURE0                       = 0x84c0;

    const ARRAY_BUFFER$1                   = 0x8892;
    const ELEMENT_ARRAY_BUFFER$1           = 0x8893;

    const COMPILE_STATUS                 = 0x8b81;
    const LINK_STATUS                    = 0x8b82;
    const FRAGMENT_SHADER                = 0x8b30;
    const VERTEX_SHADER                  = 0x8b31;
    const SEPARATE_ATTRIBS               = 0x8c8d;

    const ACTIVE_UNIFORMS                = 0x8b86;
    const ACTIVE_ATTRIBUTES              = 0x8b89;
    const TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;
    const ACTIVE_UNIFORM_BLOCKS          = 0x8a36;
    const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;
    const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;
    const UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;
    const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;

    const FLOAT$3                         = 0x1406;
    const FLOAT_VEC2                    = 0x8B50;
    const FLOAT_VEC3                    = 0x8B51;
    const FLOAT_VEC4                    = 0x8B52;
    const INT$3                           = 0x1404;
    const INT_VEC2                      = 0x8B53;
    const INT_VEC3                      = 0x8B54;
    const INT_VEC4                      = 0x8B55;
    const BOOL                          = 0x8B56;
    const BOOL_VEC2                     = 0x8B57;
    const BOOL_VEC3                     = 0x8B58;
    const BOOL_VEC4                     = 0x8B59;
    const FLOAT_MAT2                    = 0x8B5A;
    const FLOAT_MAT3                    = 0x8B5B;
    const FLOAT_MAT4                    = 0x8B5C;
    const SAMPLER_2D                    = 0x8B5E;
    const SAMPLER_CUBE                  = 0x8B60;
    const SAMPLER_3D                    = 0x8B5F;
    const SAMPLER_2D_SHADOW             = 0x8B62;
    const FLOAT_MAT2x3                  = 0x8B65;
    const FLOAT_MAT2x4                  = 0x8B66;
    const FLOAT_MAT3x2                  = 0x8B67;
    const FLOAT_MAT3x4                  = 0x8B68;
    const FLOAT_MAT4x2                  = 0x8B69;
    const FLOAT_MAT4x3                  = 0x8B6A;
    const SAMPLER_2D_ARRAY              = 0x8DC1;
    const SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;
    const SAMPLER_CUBE_SHADOW           = 0x8DC5;
    const UNSIGNED_INT$3                  = 0x1405;
    const UNSIGNED_INT_VEC2             = 0x8DC6;
    const UNSIGNED_INT_VEC3             = 0x8DC7;
    const UNSIGNED_INT_VEC4             = 0x8DC8;
    const INT_SAMPLER_2D                = 0x8DCA;
    const INT_SAMPLER_3D                = 0x8DCB;
    const INT_SAMPLER_CUBE              = 0x8DCC;
    const INT_SAMPLER_2D_ARRAY          = 0x8DCF;
    const UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;
    const UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;
    const UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;
    const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

    const TEXTURE_2D$1                    = 0x0DE1;
    const TEXTURE_CUBE_MAP$1              = 0x8513;
    const TEXTURE_3D$1                    = 0x806F;
    const TEXTURE_2D_ARRAY$1              = 0x8C1A;

    const typeMap = {};

    /**
     * Returns the corresponding bind point for a given sampler type
     */
    function getBindPointForSamplerType(gl, type) {
      return typeMap[type].bindPoint;
    }

    // This kind of sucks! If you could compose functions as in `var fn = gl[name];`
    // this code could be a lot smaller but that is sadly really slow (T_T)

    function floatSetter(gl, location) {
      return function(v) {
        gl.uniform1f(location, v);
      };
    }

    function floatArraySetter(gl, location) {
      return function(v) {
        gl.uniform1fv(location, v);
      };
    }

    function floatVec2Setter(gl, location) {
      return function(v) {
        gl.uniform2fv(location, v);
      };
    }

    function floatVec3Setter(gl, location) {
      return function(v) {
        gl.uniform3fv(location, v);
      };
    }

    function floatVec4Setter(gl, location) {
      return function(v) {
        gl.uniform4fv(location, v);
      };
    }

    function intSetter(gl, location) {
      return function(v) {
        gl.uniform1i(location, v);
      };
    }

    function intArraySetter(gl, location) {
      return function(v) {
        gl.uniform1iv(location, v);
      };
    }

    function intVec2Setter(gl, location) {
      return function(v) {
        gl.uniform2iv(location, v);
      };
    }

    function intVec3Setter(gl, location) {
      return function(v) {
        gl.uniform3iv(location, v);
      };
    }

    function intVec4Setter(gl, location) {
      return function(v) {
        gl.uniform4iv(location, v);
      };
    }

    function uintSetter(gl, location) {
      return function(v) {
        gl.uniform1ui(location, v);
      };
    }

    function uintArraySetter(gl, location) {
      return function(v) {
        gl.uniform1uiv(location, v);
      };
    }

    function uintVec2Setter(gl, location) {
      return function(v) {
        gl.uniform2uiv(location, v);
      };
    }

    function uintVec3Setter(gl, location) {
      return function(v) {
        gl.uniform3uiv(location, v);
      };
    }

    function uintVec4Setter(gl, location) {
      return function(v) {
        gl.uniform4uiv(location, v);
      };
    }

    function floatMat2Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix2fv(location, false, v);
      };
    }

    function floatMat3Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix3fv(location, false, v);
      };
    }

    function floatMat4Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix4fv(location, false, v);
      };
    }

    function floatMat23Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix2x3fv(location, false, v);
      };
    }

    function floatMat32Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix3x2fv(location, false, v);
      };
    }

    function floatMat24Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix2x4fv(location, false, v);
      };
    }

    function floatMat42Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix4x2fv(location, false, v);
      };
    }

    function floatMat34Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix3x4fv(location, false, v);
      };
    }

    function floatMat43Setter(gl, location) {
      return function(v) {
        gl.uniformMatrix4x3fv(location, false, v);
      };
    }

    function samplerSetter(gl, type, unit, location) {
      const bindPoint = getBindPointForSamplerType(gl, type);
      return isWebGL2(gl) ? function(textureOrPair) {
        let texture;
        let sampler;
        if (isTexture(gl, textureOrPair)) {
          texture = textureOrPair;
          sampler = null;
        } else {
          texture = textureOrPair.texture;
          sampler = textureOrPair.sampler;
        }
        gl.uniform1i(location, unit);
        gl.activeTexture(TEXTURE0 + unit);
        gl.bindTexture(bindPoint, texture);
        gl.bindSampler(unit, sampler);
      } : function(texture) {
        gl.uniform1i(location, unit);
        gl.activeTexture(TEXTURE0 + unit);
        gl.bindTexture(bindPoint, texture);
      };
    }

    function samplerArraySetter(gl, type, unit, location, size) {
      const bindPoint = getBindPointForSamplerType(gl, type);
      const units = new Int32Array(size);
      for (let ii = 0; ii < size; ++ii) {
        units[ii] = unit + ii;
      }

      return isWebGL2(gl) ? function(textures) {
        gl.uniform1iv(location, units);
        textures.forEach(function(textureOrPair, index) {
          gl.activeTexture(TEXTURE0 + units[index]);
          let texture;
          let sampler;
          if (isTexture(gl, textureOrPair)) {
            texture = textureOrPair;
            sampler = null;
          } else {
            texture = textureOrPair.texture;
            sampler = textureOrPair.sampler;
          }
          gl.bindSampler(unit, sampler);
          gl.bindTexture(bindPoint, texture);
        });
      } : function(textures) {
        gl.uniform1iv(location, units);
        textures.forEach(function(texture, index) {
          gl.activeTexture(TEXTURE0 + units[index]);
          gl.bindTexture(bindPoint, texture);
        });
      };
    }

    typeMap[FLOAT$3]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };
    typeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  cols: 2, };
    typeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  cols: 3, };
    typeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  cols: 4, };
    typeMap[INT$3]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };
    typeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    cols: 2, };
    typeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    cols: 3, };
    typeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    cols: 4, };
    typeMap[UNSIGNED_INT$3]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };
    typeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   cols: 2, };
    typeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   cols: 3, };
    typeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   cols: 4, };
    typeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };
    typeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    cols: 2, };
    typeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    cols: 3, };
    typeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    cols: 4, };
    typeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 32, setter: floatMat2Setter,  rows: 2, cols: 2, };
    typeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 48, setter: floatMat3Setter,  rows: 3, cols: 3, };
    typeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  rows: 4, cols: 4, };
    typeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 32, setter: floatMat23Setter, rows: 2, cols: 3, };
    typeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, rows: 2, cols: 4, };
    typeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 48, setter: floatMat32Setter, rows: 3, cols: 2, };
    typeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, rows: 3, cols: 4, };
    typeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 64, setter: floatMat42Setter, rows: 4, cols: 2, };
    typeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 64, setter: floatMat43Setter, rows: 4, cols: 3, };
    typeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
    typeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
    typeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
    typeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
    typeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };
    typeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D$1,       };
    typeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D$1,       };
    typeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP$1, };
    typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY$1, };

    function floatAttribSetter(gl, index) {
      return function(b) {
        if (b.value) {
          gl.disableVertexAttribArray(index);
          switch (b.value.length) {
            case 4:
              gl.vertexAttrib4fv(index, b.value);
              break;
            case 3:
              gl.vertexAttrib3fv(index, b.value);
              break;
            case 2:
              gl.vertexAttrib2fv(index, b.value);
              break;
            case 1:
              gl.vertexAttrib1fv(index, b.value);
              break;
            default:
              throw new Error('the length of a float constant value must be between 1 and 4!');
          }
        } else {
          gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
          gl.enableVertexAttribArray(index);
          gl.vertexAttribPointer(
              index, b.numComponents || b.size, b.type || FLOAT$3, b.normalize || false, b.stride || 0, b.offset || 0);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index, b.divisor);
          }
        }
      };
    }

    function intAttribSetter(gl, index) {
      return function(b) {
        if (b.value) {
          gl.disableVertexAttribArray(index);
          if (b.value.length === 4) {
            gl.vertexAttrib4iv(index, b.value);
          } else {
            throw new Error('The length of an integer constant value must be 4!');
          }
        } else {
          gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
          gl.enableVertexAttribArray(index);
          gl.vertexAttribIPointer(
              index, b.numComponents || b.size, b.type || INT$3, b.stride || 0, b.offset || 0);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index, b.divisor);
          }
        }
      };
    }

    function uintAttribSetter(gl, index) {
      return function(b) {
        if (b.value) {
          gl.disableVertexAttribArray(index);
          if (b.value.length === 4) {
            gl.vertexAttrib4uiv(index, b.value);
          } else {
            throw new Error('The length of an unsigned integer constant value must be 4!');
          }
        } else {
          gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
          gl.enableVertexAttribArray(index);
          gl.vertexAttribIPointer(
              index, b.numComponents || b.size, b.type || UNSIGNED_INT$3, b.stride || 0, b.offset || 0);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index, b.divisor);
          }
        }
      };
    }

    function matAttribSetter(gl, index, typeInfo) {
      const defaultSize = typeInfo.size;
      const count = typeInfo.count;

      return function(b) {
        gl.bindBuffer(ARRAY_BUFFER$1, b.buffer);
        const numComponents = b.size || b.numComponents || defaultSize;
        const size = numComponents / count;
        const type = b.type || FLOAT$3;
        const typeInfo = typeMap[type];
        const stride = typeInfo.size * numComponents;
        const normalize = b.normalize || false;
        const offset = b.offset || 0;
        const rowOffset = stride / count;
        for (let i = 0; i < count; ++i) {
          gl.enableVertexAttribArray(index + i);
          gl.vertexAttribPointer(
              index + i, size, type, normalize, stride, offset + rowOffset * i);
          if (b.divisor !== undefined) {
            gl.vertexAttribDivisor(index + i, b.divisor);
          }
        }
      };
    }



    const attrTypeMap = {};
    attrTypeMap[FLOAT$3]             = { size:  4, setter: floatAttribSetter, };
    attrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };
    attrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };
    attrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };
    attrTypeMap[INT$3]               = { size:  4, setter: intAttribSetter,   };
    attrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };
    attrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };
    attrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };
    attrTypeMap[UNSIGNED_INT$3]      = { size:  4, setter: uintAttribSetter,  };
    attrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };
    attrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };
    attrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };
    attrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };
    attrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };
    attrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };
    attrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };
    attrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };
    attrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };
    attrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };

    const errorRE = /ERROR:\s*\d+:(\d+)/gi;
    function addLineNumbersWithError(src, log = '', lineOffset = 0) {
      // Note: Error message formats are not defined by any spec so this may or may not work.
      const matches = [...log.matchAll(errorRE)];
      const lineNoToErrorMap = new Map(matches.map((m, ndx) => {
        const lineNo = parseInt(m[1]);
        const next = matches[ndx + 1];
        const end = next ? next.index : log.length;
        const msg = log.substring(m.index, end);
        return [lineNo - 1, msg];
      }));
      return src.split('\n').map((line, lineNo) => {
        const err = lineNoToErrorMap.get(lineNo);
        return `${lineNo + 1 + lineOffset}: ${line}${err ? `\n\n^^^ ${err}` : ''}`;
      }).join('\n');
    }

    /**
     * Error Callback
     * @callback ErrorCallback
     * @param {string} msg error message.
     * @param {number} [lineOffset] amount to add to line number
     * @memberOf module:twgl
     */

    const spaceRE = /^[ \t]*\n/;

    /**
     * Loads a shader.
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {string} shaderSource The shader source.
     * @param {number} shaderType The type of shader.
     * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
     * @return {WebGLShader} The created shader.
     * @private
     */
    function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
      const errFn = opt_errorCallback || error$1;
      // Create the shader object
      const shader = gl.createShader(shaderType);

      // Remove the first end of line because WebGL 2.0 requires
      // #version 300 es
      // as the first line. No whitespace allowed before that line
      // so
      //
      // <script>
      // #version 300 es
      // </script>
      //
      // Has one line before it which is invalid according to GLSL ES 3.00
      //
      let lineOffset = 0;
      if (spaceRE.test(shaderSource)) {
        lineOffset = 1;
        shaderSource = shaderSource.replace(spaceRE, '');
      }

      // Load the shader source
      gl.shaderSource(shader, shaderSource);

      // Compile the shader
      gl.compileShader(shader);

      // Check the compile status
      const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);
      if (!compiled) {
        // Something went wrong during compilation; get the error
        const lastError = gl.getShaderInfoLog(shader);
        errFn(`${addLineNumbersWithError(shaderSource, lastError, lineOffset)}\nError compiling ${glEnumToString(gl, shaderType)}: ${lastError}`);
        gl.deleteShader(shader);
        return null;
      }

      return shader;
    }

    /**
     * @typedef {Object} ProgramOptions
     * @property {function(string)} [errorCallback] callback for errors
     * @property {Object.<string,number>} [attribLocations] a attribute name to location map
     * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed
     *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise
     *   you can pass an array of names.
     * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.
     * @memberOf module:twgl
     */

    /**
     * Gets the program options based on all these optional arguments
     * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in
     * @private
     */
    function getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {
      let transformFeedbackVaryings;
      let transformFeedbackMode;
      if (typeof opt_locations === 'function') {
        opt_errorCallback = opt_locations;
        opt_locations = undefined;
      }
      if (typeof opt_attribs === 'function') {
        opt_errorCallback = opt_attribs;
        opt_attribs = undefined;
      } else if (opt_attribs && !Array.isArray(opt_attribs)) {
        // If we have an errorCallback we can just return this object
        // Otherwise we need to construct one with default errorCallback
        if (opt_attribs.errorCallback) {
          return opt_attribs;
        }
        const opt = opt_attribs;
        opt_errorCallback = opt.errorCallback;
        opt_attribs = opt.attribLocations;
        transformFeedbackVaryings = opt.transformFeedbackVaryings;
        transformFeedbackMode = opt.transformFeedbackMode;
      }

      const options = {
        errorCallback: opt_errorCallback || error$1,
        transformFeedbackVaryings: transformFeedbackVaryings,
        transformFeedbackMode: transformFeedbackMode,
      };

      if (opt_attribs) {
        let attribLocations = {};
        if (Array.isArray(opt_attribs)) {
          opt_attribs.forEach(function(attrib,  ndx) {
            attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;
          });
        } else {
          attribLocations = opt_attribs;
        }
        options.attribLocations = attribLocations;
      }

      return options;
    }

    const defaultShaderType = [
      "VERTEX_SHADER",
      "FRAGMENT_SHADER",
    ];

    function getShaderTypeFromScriptType(gl, scriptType) {
      if (scriptType.indexOf("frag") >= 0) {
        return FRAGMENT_SHADER;
      } else if (scriptType.indexOf("vert") >= 0) {
        return VERTEX_SHADER;
      }
      return undefined;
    }

    function deleteShaders(gl, shaders) {
      shaders.forEach(function(shader) {
        gl.deleteShader(shader);
      });
    }

    /**
     * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the
     * program and calls useProgram.
     *
     * NOTE: There are 4 signatures for this function
     *
     *     twgl.createProgram(gl, [vs, fs], options);
     *     twgl.createProgram(gl, [vs, fs], opt_errFunc);
     *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);
     *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source
     * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {WebGLProgram?} the created program or null if error.
     * @memberOf module:twgl/programs
     */
    function createProgram(
        gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
      const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
      const realShaders = [];
      const newShaders = [];
      for (let ndx = 0; ndx < shaders.length; ++ndx) {
        let shader = shaders[ndx];
        if (typeof (shader) === 'string') {
          const elem = getElementById(shader);
          const src = elem ? elem.text : shader;
          let type = gl[defaultShaderType[ndx]];
          if (elem && elem.type) {
            type = getShaderTypeFromScriptType(gl, elem.type) || type;
          }
          shader = loadShader(gl, src, type, progOptions.errorCallback);
          newShaders.push(shader);
        }
        if (isShader(gl, shader)) {
          realShaders.push(shader);
        }
      }

      if (realShaders.length !== shaders.length) {
        progOptions.errorCallback("not enough shaders for program");
        deleteShaders(gl, newShaders);
        return null;
      }

      const program = gl.createProgram();
      realShaders.forEach(function(shader) {
        gl.attachShader(program, shader);
      });
      if (progOptions.attribLocations) {
        Object.keys(progOptions.attribLocations).forEach(function(attrib) {
          gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);
        });
      }
      let varyings = progOptions.transformFeedbackVaryings;
      if (varyings) {
        if (varyings.attribs) {
          varyings = varyings.attribs;
        }
        if (!Array.isArray(varyings)) {
          varyings = Object.keys(varyings);
        }
        gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);
      }
      gl.linkProgram(program);

      // Check the link status
      const linked = gl.getProgramParameter(program, LINK_STATUS);
      if (!linked) {
        // something went wrong with the link
        const lastError = gl.getProgramInfoLog(program);
        progOptions.errorCallback(`${
      realShaders.map(shader => {
        const src = addLineNumbersWithError(gl.getShaderSource(shader), '', 0);
        const type = gl.getShaderParameter(shader, gl.SHADER_TYPE);
        return `${glEnumToString(gl, type)}\n${src}}`;
      }).join('\n')
    }\nError in program linking: ${lastError}`);

        gl.deleteProgram(program);
        deleteShaders(gl, newShaders);
        return null;
      }
      return program;
    }

    /**
     * Creates a program from 2 sources.
     *
     * NOTE: There are 4 signatures for this function
     *
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);
     *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext
     *        to use.
     * @param {string[]} shaderSources Array of sources for the
     *        shaders. The first is assumed to be the vertex shader,
     *        the second the fragment shader.
     * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {WebGLProgram?} the created program or null if error.
     * @memberOf module:twgl/programs
     */
    function createProgramFromSources(
        gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
      const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
      const shaders = [];
      for (let ii = 0; ii < shaderSources.length; ++ii) {
        const shader = loadShader(
            gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);
        if (!shader) {
          return null;
        }
        shaders.push(shader);
      }
      return createProgram(gl, shaders, progOptions);
    }

    /**
     * Returns true if attribute/uniform is a reserved/built in
     *
     * It makes no sense to me why GL returns these because it's
     * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`
     * with names that start with `gl_` (and `webgl_` in WebGL)
     *
     * I can only assume they are there because they might count
     * when computing the number of uniforms/attributes used when you want to
     * know if you are near the limit. That doesn't really make sense
     * to me but the fact that these get returned are in the spec.
     *
     * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or
     *    `gl.getActiveAttrib`.
     * @return {bool} true if it's reserved
     * @private
     */
    function isBuiltIn(info) {
      const name = info.name;
      return name.startsWith("gl_") || name.startsWith("webgl_");
    }

    const tokenRE = /(\.|\[|]|\w+)/g;
    const isDigit = s => s >= '0' && s <= '9';
    function addSetterToUniformTree(fullPath, setter, node, uniformSetters) {
      const tokens = fullPath.split(tokenRE).filter(s => s !== '');
      let tokenNdx = 0;
      let path = '';

      for (;;) {
        const token = tokens[tokenNdx++];  // has to be name or number
        path += token;
        const isArrayIndex = isDigit(token[0]);
        const accessor = isArrayIndex
            ? parseInt(token)
            : token;
        if (isArrayIndex) {
          path += tokens[tokenNdx++];  // skip ']'
        }
        const isLastToken = tokenNdx === tokens.length;
        if (isLastToken) {
          node[accessor] = setter;
          break;
        } else {
          const token = tokens[tokenNdx++];  // has to be . or [
          const isArray = token === '[';
          const child = node[accessor] || (isArray ? [] : {});
          node[accessor] = child;
          node = child;
          uniformSetters[path] = uniformSetters[path] || function(node) {
            return function(value) {
              setUniformTree(node, value);
            };
          }(child);
          path += token;
        }
      }
    }

    /**
     * Creates setter functions for all uniforms of a shader
     * program.
     *
     * @see {@link module:twgl.setUniforms}
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLProgram} program the program to create setters for.
     * @returns {Object.<string, function>} an object with a setter by name for each uniform
     * @memberOf module:twgl/programs
     */
    function createUniformSetters(gl, program) {
      let textureUnit = 0;

      /**
       * Creates a setter for a uniform of the given program with it's
       * location embedded in the setter.
       * @param {WebGLProgram} program
       * @param {WebGLUniformInfo} uniformInfo
       * @returns {function} the created setter.
       */
      function createUniformSetter(program, uniformInfo, location) {
        const isArray = uniformInfo.name.endsWith("[0]");
        const type = uniformInfo.type;
        const typeInfo = typeMap[type];
        if (!typeInfo) {
          throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.
        }
        let setter;
        if (typeInfo.bindPoint) {
          // it's a sampler
          const unit = textureUnit;
          textureUnit += uniformInfo.size;
          if (isArray) {
            setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
          } else {
            setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);
          }
        } else {
          if (typeInfo.arraySetter && isArray) {
            setter = typeInfo.arraySetter(gl, location);
          } else {
            setter = typeInfo.setter(gl, location);
          }
        }
        setter.location = location;
        return setter;
      }

      const uniformSetters = {};
      const uniformTree = {};
      const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);

      for (let ii = 0; ii < numUniforms; ++ii) {
        const uniformInfo = gl.getActiveUniform(program, ii);
        if (isBuiltIn(uniformInfo)) {
          continue;
        }
        let name = uniformInfo.name;
        // remove the array suffix.
        if (name.endsWith("[0]")) {
          name = name.substr(0, name.length - 3);
        }
        const location = gl.getUniformLocation(program, uniformInfo.name);
        // the uniform will have no location if it's in a uniform block
        if (location) {
          const setter = createUniformSetter(program, uniformInfo, location);
          uniformSetters[name] = setter;
          addSetterToUniformTree(name, setter, uniformTree, uniformSetters);
        }
      }

      return uniformSetters;
    }

    /**
     * @typedef {Object} TransformFeedbackInfo
     * @property {number} index index of transform feedback
     * @property {number} type GL type
     * @property {number} size 1 - 4
     * @memberOf module:twgl
     */

    /**
     * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLProgram} program an existing WebGLProgram.
     * @return {Object<string, module:twgl.TransformFeedbackInfo>}
     * @memberOf module:twgl
     */
    function createTransformFeedbackInfo(gl, program) {
      const info = {};
      const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);
      for (let ii = 0; ii < numVaryings; ++ii) {
        const varying = gl.getTransformFeedbackVarying(program, ii);
        info[varying.name] = {
          index: ii,
          type: varying.type,
          size: varying.size,
        };
      }
      return info;
    }

    /**
     * @typedef {Object} UniformData
     * @property {string} name The name of the uniform
     * @property {number} type The WebGL type enum for this uniform
     * @property {number} size The number of elements for this uniform
     * @property {number} blockNdx The block index this uniform appears in
     * @property {number} offset The byte offset in the block for this uniform's value
     * @memberOf module:twgl
     */

    /**
     * The specification for one UniformBlockObject
     *
     * @typedef {Object} BlockSpec
     * @property {number} index The index of the block.
     * @property {number} size The size in bytes needed for the block
     * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
     *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
     * @property {bool} usedByVertexShader Self explanatory
     * @property {bool} usedByFragmentShader Self explanatory
     * @property {bool} used Self explanatory
     * @memberOf module:twgl
     */

    /**
     * A `UniformBlockSpec` represents the data needed to create and bind
     * UniformBlockObjects for a given program
     *
     * @typedef {Object} UniformBlockSpec
     * @property {Object.<string, module:twgl.BlockSpec>} blockSpecs The BlockSpec for each block by block name
     * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
     * @memberOf module:twgl
     */

    /**
     * Creates a UniformBlockSpec for the given program.
     *
     * A UniformBlockSpec represents the data needed to create and bind
     * UniformBlockObjects
     *
     * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
     * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
     * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
     * @memberOf module:twgl/programs
     */
    function createUniformBlockSpecFromProgram(gl, program) {
      const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);
      const uniformData = [];
      const uniformIndices = [];

      for (let ii = 0; ii < numUniforms; ++ii) {
        uniformIndices.push(ii);
        uniformData.push({});
        const uniformInfo = gl.getActiveUniform(program, ii);
        uniformData[ii].name = uniformInfo.name;
      }

      [
        [ "UNIFORM_TYPE", "type" ],
        [ "UNIFORM_SIZE", "size" ],  // num elements
        [ "UNIFORM_BLOCK_INDEX", "blockNdx" ],
        [ "UNIFORM_OFFSET", "offset", ],
      ].forEach(function(pair) {
        const pname = pair[0];
        const key = pair[1];
        gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {
          uniformData[ndx][key] = value;
        });
      });

      const blockSpecs = {};

      const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);
      for (let ii = 0; ii < numUniformBlocks; ++ii) {
        const name = gl.getActiveUniformBlockName(program, ii);
        const blockSpec = {
          index: gl.getUniformBlockIndex(program, name),
          usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
          usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
          size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),
          uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
        };
        blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;
        blockSpecs[name] = blockSpec;
      }

      return {
        blockSpecs: blockSpecs,
        uniformData: uniformData,
      };
    }

    function setUniformTree(tree, values) {
      for (const name in values) {
        const prop = tree[name];
        if (typeof prop === 'function') {
          prop(values[name]);
        } else {
          setUniformTree(tree[name], values[name]);
        }
      }
    }

    /**
     * Set uniforms and binds related textures.
     *
     * example:
     *
     *     const programInfo = createProgramInfo(
     *         gl, ["some-vs", "some-fs"]);
     *
     *     const tex1 = gl.createTexture();
     *     const tex2 = gl.createTexture();
     *
     *     ... assume we setup the textures with data ...
     *
     *     const uniforms = {
     *       u_someSampler: tex1,
     *       u_someOtherSampler: tex2,
     *       u_someColor: [1,0,0,1],
     *       u_somePosition: [0,1,1],
     *       u_someMatrix: [
     *         1,0,0,0,
     *         0,1,0,0,
     *         0,0,1,0,
     *         0,0,0,0,
     *       ],
     *     };
     *
     *     gl.useProgram(program);
     *
     * This will automatically bind the textures AND set the
     * uniforms.
     *
     *     twgl.setUniforms(programInfo, uniforms);
     *
     * For the example above it is equivalent to
     *
     *     var texUnit = 0;
     *     gl.activeTexture(gl.TEXTURE0 + texUnit);
     *     gl.bindTexture(gl.TEXTURE_2D, tex1);
     *     gl.uniform1i(u_someSamplerLocation, texUnit++);
     *     gl.activeTexture(gl.TEXTURE0 + texUnit);
     *     gl.bindTexture(gl.TEXTURE_2D, tex2);
     *     gl.uniform1i(u_someSamplerLocation, texUnit++);
     *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
     *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
     *     gl.uniformMatrix4fv(u_someMatrix, false, [
     *         1,0,0,0,
     *         0,1,0,0,
     *         0,0,1,0,
     *         0,0,0,0,
     *       ]);
     *
     * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
     *
     *     const uniforms = {
     *       u_someSampler: tex1,
     *       u_someOtherSampler: tex2,
     *     };
     *
     *     const moreUniforms {
     *       u_someColor: [1,0,0,1],
     *       u_somePosition: [0,1,1],
     *       u_someMatrix: [
     *         1,0,0,0,
     *         0,1,0,0,
     *         0,0,1,0,
     *         0,0,0,0,
     *       ],
     *     };
     *
     *     twgl.setUniforms(programInfo, uniforms);
     *     twgl.setUniforms(programInfo, moreUniforms);
     *
     * You can also add WebGLSamplers to uniform samplers as in
     *
     *     const uniforms = {
     *       u_someSampler: {
     *         texture: someWebGLTexture,
     *         sampler: someWebGLSampler,
     *       },
     *     };
     *
     * In which case both the sampler and texture will be bound to the
     * same unit.
     *
     * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
     *        `createUniformSetters`.
     * @param {Object.<string, ?>} values an object with values for the
     *        uniforms.
     *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
     *
     *     const sharedUniforms = {
     *       u_fogNear: 10,
     *       u_projection: ...
     *       ...
     *     };
     *
     *     const localUniforms = {
     *       u_world: ...
     *       u_diffuseColor: ...
     *     };
     *
     *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
     *
     *     // is the same as
     *
     *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
     *
     *     // is the same as
     *
     *     twgl.setUniforms(programInfo, sharedUniforms);
     *     twgl.setUniforms(programInfo, localUniforms};
     *
     *   You can also fill out structure and array values either via
     *   shortcut. Example
     *
     *     // -- in shader --
     *     struct Light {
     *       float intensity;
     *       vec4 color;
     *     };
     *     uniform Light lights[2];
     *
     *     // in JavaScript
     *
     *     twgl.setUniforms(programInfo, {
     *       lights: [
     *         { intensity: 5.0, color: [1, 0, 0, 1] },
     *         { intensity: 2.0, color: [0, 0, 1, 1] },
     *       ],
     *     });
     *
     *   or the more traditional way
     *
     *     twgl.setUniforms(programInfo, {
     *       "lights[0].intensity": 5.0,
     *       "lights[0].color": [1, 0, 0, 1],
     *       "lights[1].intensity": 2.0,
     *       "lights[1].color": [0, 0, 1, 1],
     *     });
     *
     *   You can also specify partial paths
     *
     *     twgl.setUniforms(programInfo, {
     *       'lights[1]: { intensity: 5.0, color: [1, 0, 0, 1] },
     *     });
     *
     *   But you can not specify leaf array indices
     *
     * @memberOf module:twgl/programs
     */
    function setUniforms(setters, ...args) {  // eslint-disable-line
      const actualSetters = setters.uniformSetters || setters;
      const numArgs = args.length;
      for (let aNdx = 0; aNdx < numArgs; ++aNdx) {
        const values = args[aNdx];
        if (Array.isArray(values)) {
          const numValues = values.length;
          for (let ii = 0; ii < numValues; ++ii) {
            setUniforms(actualSetters, values[ii]);
          }
        } else {
          for (const name in values) {
            const setter = actualSetters[name];
            if (setter) {
              setter(values[name]);
            }
          }
        }
      }
    }

    /**
     * Creates setter functions for all attributes of a shader
     * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
     *
     * @see {@link module:twgl.setAttributes} for example
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
     * @param {WebGLProgram} program the program to create setters for.
     * @return {Object.<string, function>} an object with a setter for each attribute by name.
     * @memberOf module:twgl/programs
     */
    function createAttributeSetters(gl, program) {
      const attribSetters = {
      };

      const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);
      for (let ii = 0; ii < numAttribs; ++ii) {
        const attribInfo = gl.getActiveAttrib(program, ii);
        if (isBuiltIn(attribInfo)) {
          continue;
        }
        const index = gl.getAttribLocation(program, attribInfo.name);
        const typeInfo = attrTypeMap[attribInfo.type];
        const setter = typeInfo.setter(gl, index, typeInfo);
        setter.location = index;
        attribSetters[attribInfo.name] = setter;
      }

      return attribSetters;
    }

    /**
     * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
     *
     * Example:
     *
     *     const program = createProgramFromScripts(
     *         gl, ["some-vs", "some-fs");
     *
     *     const attribSetters = createAttributeSetters(program);
     *
     *     const positionBuffer = gl.createBuffer();
     *     const texcoordBuffer = gl.createBuffer();
     *
     *     const attribs = {
     *       a_position: {buffer: positionBuffer, numComponents: 3},
     *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
     *     };
     *
     *     gl.useProgram(program);
     *
     * This will automatically bind the buffers AND set the
     * attributes.
     *
     *     setAttributes(attribSetters, attribs);
     *
     * Properties of attribs. For each attrib you can add
     * properties:
     *
     * *   type: the type of data in the buffer. Default = gl.FLOAT
     * *   normalize: whether or not to normalize the data. Default = false
     * *   stride: the stride. Default = 0
     * *   offset: offset into the buffer. Default = 0
     * *   divisor: the divisor for instances. Default = undefined
     *
     * For example if you had 3 value float positions, 2 value
     * float texcoord and 4 value uint8 colors you'd setup your
     * attribs like this
     *
     *     const attribs = {
     *       a_position: {buffer: positionBuffer, numComponents: 3},
     *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
     *       a_color: {
     *         buffer: colorBuffer,
     *         numComponents: 4,
     *         type: gl.UNSIGNED_BYTE,
     *         normalize: true,
     *       },
     *     };
     *
     * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
     * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
     * @memberOf module:twgl/programs
     * @deprecated use {@link module:twgl.setBuffersAndAttributes}
     */
    function setAttributes(setters, buffers) {
      for (const name in buffers) {
        const setter = setters[name];
        if (setter) {
          setter(buffers[name]);
        }
      }
    }

    /**
     * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
     *
     * Example:
     *
     *     const programInfo = createProgramInfo(
     *         gl, ["some-vs", "some-fs");
     *
     *     const arrays = {
     *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
     *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
     *     };
     *
     *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);
     *
     *     gl.useProgram(programInfo.program);
     *
     * This will automatically bind the buffers AND set the
     * attributes.
     *
     *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
     *
     * For the example above it is equivalent to
     *
     *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
     *     gl.enableVertexAttribArray(a_positionLocation);
     *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
     *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
     *     gl.enableVertexAttribArray(a_texcoordLocation);
     *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
     * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
     * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
     *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
     * @memberOf module:twgl/programs
     */
    function setBuffersAndAttributes(gl, programInfo, buffers) {
      if (buffers.vertexArrayObject) {
        gl.bindVertexArray(buffers.vertexArrayObject);
      } else {
        setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);
        if (buffers.indices) {
          gl.bindBuffer(ELEMENT_ARRAY_BUFFER$1, buffers.indices);
        }
      }
    }

    /**
     * @typedef {Object} ProgramInfo
     * @property {WebGLProgram} program A shader program
     * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
     * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
     * @property {module:twgl.UniformBlockSpec} [uniformBlockSpec] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..
     * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks
     * @memberOf module:twgl
     */

    /**
     * Creates a ProgramInfo from an existing program.
     *
     * A ProgramInfo contains
     *
     *     programInfo = {
     *        program: WebGLProgram,
     *        uniformSetters: object of setters as returned from createUniformSetters,
     *        attribSetters: object of setters as returned from createAttribSetters,
     *     }
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext
     *        to use.
     * @param {WebGLProgram} program an existing WebGLProgram.
     * @return {module:twgl.ProgramInfo} The created ProgramInfo.
     * @memberOf module:twgl/programs
     */
    function createProgramInfoFromProgram(gl, program) {
      const uniformSetters = createUniformSetters(gl, program);
      const attribSetters = createAttributeSetters(gl, program);
      const programInfo = {
        program,
        uniformSetters,
        attribSetters,
      };

      if (isWebGL2(gl)) {
        programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
        programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);
      }

      return programInfo;
    }

    /**
     * Creates a ProgramInfo from 2 sources.
     *
     * A ProgramInfo contains
     *
     *     programInfo = {
     *        program: WebGLProgram,
     *        uniformSetters: object of setters as returned from createUniformSetters,
     *        attribSetters: object of setters as returned from createAttribSetters,
     *     }
     *
     * NOTE: There are 4 signatures for this function
     *
     *     twgl.createProgramInfo(gl, [vs, fs], options);
     *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);
     *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);
     *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);
     *
     * @param {WebGLRenderingContext} gl The WebGLRenderingContext
     *        to use.
     * @param {string[]} shaderSources Array of sources for the
     *        shaders or ids. The first is assumed to be the vertex shader,
     *        the second the fragment shader.
     * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in
     * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.
     * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
     *        on error. If you want something else pass an callback. It's passed an error message.
     * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile
     * @memberOf module:twgl/programs
     */
    function createProgramInfo(
        gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
      const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);
      let good = true;
      shaderSources = shaderSources.map(function(source) {
        // Lets assume if there is no \n it's an id
        if (source.indexOf("\n") < 0) {
          const script = getElementById(source);
          if (!script) {
            progOptions.errorCallback("no element with id: " + source);
            good = false;
          } else {
            source = script.text;
          }
        }
        return source;
      });
      if (!good) {
        return null;
      }
      const program = createProgramFromSources(gl, shaderSources, progOptions);
      if (!program) {
        return null;
      }
      return createProgramInfoFromProgram(gl, program);
    }

    /*
     * Copyright 2019 Gregg Tavares
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
     * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     * DEALINGS IN THE SOFTWARE.
     */

    const TRIANGLES                      = 0x0004;
    const UNSIGNED_SHORT$3                 = 0x1403;

    /**
     * Drawing related functions
     *
     * For backward compatibility they are available at both `twgl.draw` and `twgl`
     * itself
     *
     * See {@link module:twgl} for core functions
     *
     * @module twgl/draw
     */

    /**
     * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
     *
     * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
     * but calling this means if you switch from indexed data to non-indexed
     * data you don't have to remember to update your draw call.
     *
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
     *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
     * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`
     * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
     * @param {number} [offset] An optional offset. Defaults to 0.
     * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called
     * @memberOf module:twgl/draw
     */
    function drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {
      type = type === undefined ? TRIANGLES : type;
      const indices = bufferInfo.indices;
      const elementType = bufferInfo.elementType;
      const numElements = count === undefined ? bufferInfo.numElements : count;
      offset = offset === undefined ? 0 : offset;
      if (elementType || indices) {
        if (instanceCount !== undefined) {
          gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset, instanceCount);
        } else {
          gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT$3 : bufferInfo.elementType, offset);
        }
      } else {
        if (instanceCount !== undefined) {
          gl.drawArraysInstanced(type, offset, numElements, instanceCount);
        } else {
          gl.drawArrays(type, offset, numElements);
        }
      }
    }

    /**
     * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.
     *
     * You need either a `BufferInfo` or a `VertexArrayInfo`.
     *
     * @typedef {Object} DrawObject
     * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`
     * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...
     * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
     * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}
     * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
     * @property {Object<string, ?>} uniforms The values for the uniforms.
     *   You can pass multiple objects by putting them in an array. For example
     *
     *     var sharedUniforms = {
     *       u_fogNear: 10,
     *       u_projection: ...
     *       ...
     *     };
     *
     *     var localUniforms = {
     *       u_world: ...
     *       u_diffuseColor: ...
     *     };
     *
     *     var drawObj = {
     *       ...
     *       uniforms: [sharedUniforms, localUniforms],
     *     };
     *
     * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.
     * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.
     * @property {number} [instanceCount] the number of instances. Defaults to undefined.
     * @memberOf module:twgl
     */

    /**
     * Draws a list of objects
     * @param {WebGLRenderingContext} gl A WebGLRenderingContext
     * @param {DrawObject[]} objectsToDraw an array of objects to draw.
     * @memberOf module:twgl/draw
     */
    function drawObjectList(gl, objectsToDraw) {
      let lastUsedProgramInfo = null;
      let lastUsedBufferInfo = null;

      objectsToDraw.forEach(function(object) {
        if (object.active === false) {
          return;
        }

        const programInfo = object.programInfo;
        const bufferInfo = object.vertexArrayInfo || object.bufferInfo;
        let bindBuffers = false;
        const type = object.type === undefined ? TRIANGLES : object.type;

        if (programInfo !== lastUsedProgramInfo) {
          lastUsedProgramInfo = programInfo;
          gl.useProgram(programInfo.program);

          // We have to rebind buffers when changing programs because we
          // only bind buffers the program uses. So if 2 programs use the same
          // bufferInfo but the 1st one uses only positions the when the
          // we switch to the 2nd one some of the attributes will not be on.
          bindBuffers = true;
        }

        // Setup all the needed attributes.
        if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {
          if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {
            gl.bindVertexArray(null);
          }
          lastUsedBufferInfo = bufferInfo;
          setBuffersAndAttributes(gl, programInfo, bufferInfo);
        }

        // Set the uniforms.
        setUniforms(programInfo, object.uniforms);

        // Draw
        drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);
      });

      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {
        gl.bindVertexArray(null);
      }
    }

    var bsdf = "float sellmeierIor(vec3 b, vec3 c, float lambda) {\r\n    float lSq = (lambda*1e-3)*(lambda*1e-3);\r\n    return 1.0 + dot((b*lSq)/(lSq - c), vec3(1.0));\r\n}\r\n\r\nfloat tanh(float x) {\r\n    if (abs(x) > 10.0) /* Prevent nasty overflow problems */\r\n        return sign(x);\r\n    float e = exp(-2.0*x);\r\n    return (1.0 - e)/(1.0 + e);\r\n}\r\nfloat atanh(float x) {\r\n    return 0.5*log((1.0 + x)/(1.0 - x));\r\n}\r\n\r\nfloat dielectricReflectance(float eta, float cosThetaI, out float cosThetaT) {\r\n    float sinThetaTSq = eta*eta*(1.0 - cosThetaI*cosThetaI);\r\n    if (sinThetaTSq > 1.0) {\r\n        cosThetaT = 0.0;\r\n        return 1.0;\r\n    }\r\n    cosThetaT = sqrt(1.0 - sinThetaTSq);\r\n\r\n    float Rs = (eta*cosThetaI - cosThetaT)/(eta*cosThetaI + cosThetaT);\r\n    float Rp = (eta*cosThetaT - cosThetaI)/(eta*cosThetaT + cosThetaI);\r\n\r\n    return (Rs*Rs + Rp*Rp)*0.5;\r\n}\r\n\r\nvec2 sampleDiffuse(inout vec4 state, vec2 wi) {\r\n    float x = rand(state)*2.0 - 1.0;\r\n    float y = sqrt(1.0 - x*x);\r\n    return vec2(x, y*sign(wi.y));\r\n}\r\nvec2 sampleMirror(vec2 wi) {\r\n    return vec2(-wi.x, wi.y);\r\n}\r\nvec2 sampleDielectric(inout vec4 state, vec2 wi, float ior) {\r\n    float cosThetaT;\r\n    float eta = wi.y < 0.0 ? ior : 1.0/ior;\r\n    float Fr = dielectricReflectance(eta, abs(wi.y), cosThetaT);\r\n    if (rand(state) < Fr)\r\n        return vec2(-wi.x, wi.y);\r\n    else\r\n        return vec2(-wi.x*eta, -cosThetaT*sign(wi.y));\r\n}\r\n\r\nfloat sampleVisibleNormal(float sigma, float xi, float theta0, float theta1) {\r\n    float sigmaSq = sigma*sigma;\r\n    float invSigmaSq = 1.0/sigmaSq;\r\n    \r\n    float cdf0 = tanh(theta0*0.5*invSigmaSq);\r\n    float cdf1 = tanh(theta1*0.5*invSigmaSq);\r\n\r\n    return 2.0*sigmaSq*atanh(cdf0 + (cdf1 - cdf0)*xi);\r\n}\r\nvec2 sampleRoughMirror(inout vec4 state, vec2 wi, inout vec3 throughput, float sigma) {\r\n    float theta = asin(clamp(wi.x, -1.0, 1.0));\r\n    float theta0 = max(theta - PI_HALF, -PI_HALF);\r\n    float theta1 = min(theta + PI_HALF,  PI_HALF);\r\n\r\n    float thetaM = sampleVisibleNormal(sigma, rand(state), theta0, theta1);\r\n    vec2 m = vec2(sin(thetaM), cos(thetaM));\r\n    vec2 wo = m*(dot(wi, m)*2.0) - wi;\r\n    if (wo.y < 0.0)\r\n        throughput = vec3(0.0);\r\n    return wo;\r\n}\r\nvec2 sampleRoughDielectric(inout vec4 state, vec2 wi, float sigma, float ior)\r\n{\r\n    float theta = asin(min(abs(wi.x), 1.0));\r\n    float theta0 = max(theta - PI_HALF, -PI_HALF);\r\n    float theta1 = min(theta + PI_HALF,  PI_HALF);\r\n\r\n    float thetaM = sampleVisibleNormal(sigma, rand(state), theta0, theta1);\r\n    vec2 m = vec2(sin(thetaM), cos(thetaM));\r\n\r\n    float wiDotM = dot(wi, m);\r\n    \r\n    float cosThetaT;\r\n    float etaM = wiDotM < 0.0 ? ior : 1.0/ior;\r\n    float F = dielectricReflectance(etaM, abs(wiDotM), cosThetaT);\r\n    if (wiDotM < 0.0)\r\n        cosThetaT = -cosThetaT;\r\n\r\n    if (rand(state) < F)\r\n        return 2.0*wiDotM*m - wi;\r\n    else\r\n        return (etaM*wiDotM - cosThetaT)*m - etaM*wi;\r\n}\r\n";

    var compose_frag = "#include \"preamble\"\r\n\r\nuniform sampler2D Frame;\r\nuniform float Exposure;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(pow(texture2D(Frame, vTexCoord).rgb*Exposure, vec3(1.0/2.2)), 1.0);\r\n}\r\n";

    var compose_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\nattribute vec2 TexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main(void) {\r\n    gl_Position = vec4(Position, 1.0);\r\n    vTexCoord = TexCoord;\r\n}\r\n";

    var csg_intersect = "struct Segment {\r\n    float tNear, tFar;\r\n    vec2  nNear, nFar;\r\n};\r\n\r\nSegment segmentIntersection(Segment a, Segment b) {\r\n    return Segment(\r\n        max(a.tNear, b.tNear),\r\n        min(a.tFar,  b.tFar),\r\n        (a.tNear > b.tNear) ? a.nNear : b.nNear,\r\n        (a.tFar  < b.tFar)  ? a.nFar  : b.nFar\r\n    );\r\n}\r\nSegment segmentSubtraction(Segment a, Segment b, float tMin) {\r\n    if (a.tNear >= a.tFar || b.tNear >= b.tFar || a.tFar <= b.tNear || a.tNear >= b.tFar)\r\n        return a;\r\n    \r\n    Segment s1 = Segment(a.tNear, b.tNear, a.nNear, -b.nNear);\r\n    Segment s2 = Segment(b.tFar,  a.tFar, -b.nFar,   a.nFar);\r\n    bool valid1 = s1.tNear <= s1.tFar;\r\n    bool valid2 = s2.tNear <= s2.tFar;\r\n    \r\n    if (valid1 && valid2) {\r\n        if (s1.tFar >= tMin) return s1; else return s2;\r\n    } else {\r\n        if (valid1) return s1; else return s2;\r\n    }\r\n}\r\nvoid segmentCollapse(Segment segment, float matId, inout Intersection isect) {\r\n    segment.tNear = max(segment.tNear, isect.tMin);\r\n    segment.tFar  = min(segment.tFar,  isect.tMax);\r\n    \r\n    if (segment.tNear <= segment.tFar) {\r\n        if (segment.tNear > isect.tMin) {\r\n            isect.tMax = segment.tNear;\r\n            isect.n = segment.nNear;\r\n            isect.mat = matId;\r\n        } else if (segment.tFar < isect.tMax) {\r\n            isect.tMax = segment.tFar;\r\n            isect.n = segment.nFar;\r\n            isect.mat = matId;\r\n        }\r\n    }\r\n}\r\n\r\nSegment horzSpanIntersect(Ray ray, float y, float radius) {\r\n    float dc = (y - ray.pos.y)*ray.invDir.y;\r\n    float dt = ray.dirSign.y*radius*ray.invDir.y;\r\n    return Segment(dc - dt, dc + dt, vec2(0.0, -ray.dirSign.y), vec2(0.0, ray.dirSign.y));\r\n}\r\nSegment vertSpanIntersect(Ray ray, float x, float radius) {\r\n    float dc = (x - ray.pos.x)*ray.invDir.x;\r\n    float dt = ray.dirSign.x*radius*ray.invDir.x;\r\n    return Segment(dc - dt, dc + dt, vec2(-ray.dirSign.x, 0.0), vec2(ray.dirSign.x, 0.0));\r\n}\r\nSegment boxSegmentIntersect(Ray ray, vec2 center, vec2 radius) {\r\n    return segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, radius.y),\r\n        vertSpanIntersect(ray, center.x, radius.x)\r\n    );\r\n}\r\nSegment sphereSegmentIntersect(Ray ray, vec2 center, float radius) {\r\n    Segment result;\r\n    \r\n    vec2 p = ray.pos - center;\r\n    float B = dot(p, ray.dir);\r\n    float C = dot(p, p) - radius*radius;\r\n    float detSq = B*B - C;\r\n    if (detSq >= 0.0) {\r\n        float det = sqrt(detSq);\r\n        result.tNear = -B - det;\r\n        result.tFar  = -B + det;\r\n        result.nNear = (p + ray.dir*result.tNear)*(1.0/radius);\r\n        result.nFar  = (p + ray.dir*result.tFar)*(1.0/radius);\r\n    } else {\r\n        result.tNear =  1e30;\r\n        result.tFar  = -1e30;\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\nvoid biconvexLensIntersect(Ray ray, vec2 center, float h, float d, float r1, float r2, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentIntersection(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        sphereSegmentIntersect(ray, center + vec2(r1 - d, 0.0), r1)),\r\n        sphereSegmentIntersect(ray, center - vec2(r2 - d, 0.0), r2)\r\n    ), matId, isect);\r\n}\r\nvoid biconcaveLensIntersect(Ray ray, vec2 center, float h, float d, float r1, float r2, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentSubtraction(segmentSubtraction(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        vertSpanIntersect(ray, center.x + 0.5*(r2 - r1), 0.5*(abs(r1) + abs(r2)) + d)),\r\n        sphereSegmentIntersect(ray, center + vec2(r2 + d, 0.0), r2), isect.tMin),\r\n        sphereSegmentIntersect(ray, center - vec2(r1 + d, 0.0), r1), isect.tMin\r\n    ), matId, isect);\r\n}\r\nvoid meniscusLensIntersect(Ray ray, vec2 center, float h, float d, float r1, float r2, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentSubtraction(segmentIntersection(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        vertSpanIntersect(ray, center.x + 0.5*r2, 0.5*abs(r2) + d)),\r\n        sphereSegmentIntersect(ray, center + vec2(r1 - sign(r1)*d, 0.0), abs(r1))),\r\n        sphereSegmentIntersect(ray, center + vec2(r2 + sign(r2)*d, 0.0), abs(r2)), isect.tMin\r\n    ), matId, isect);\r\n}\r\nvoid planoConvexLensIntersect(Ray ray, vec2 center, float h, float d, float r, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentIntersection(\r\n        boxSegmentIntersect(ray, center, vec2(d, h)),\r\n        sphereSegmentIntersect(ray, center + vec2(r - d, 0.0), abs(r))\r\n    ), matId, isect);\r\n}\r\nvoid planoConcaveLensIntersect(Ray ray, vec2 center, float h, float d, float r, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentSubtraction(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        vertSpanIntersect(ray, center.x - 0.5*r, 0.5*abs(r) + d)),\r\n        sphereSegmentIntersect(ray, center - vec2(r + d, 0.0), abs(r)), isect.tMin\r\n    ), matId, isect);\r\n}\r\n";

    var init_frag = "#extension GL_EXT_draw_buffers : require\r\n#include \"preamble\"\r\n\r\n#include \"rand\"\r\n\r\nuniform sampler2D RngData;\r\nuniform sampler2D Spectrum;\r\nuniform sampler2D Emission;\r\nuniform sampler2D ICDF;\r\nuniform sampler2D PDF;\r\nuniform vec2 EmitterPos;\r\nuniform vec2 EmitterDir;\r\nuniform float EmitterPower;\r\nuniform float SpatialSpread;\r\nuniform vec2 AngularSpread;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    vec4 state = texture2D(RngData, vTexCoord);\r\n\r\n    float theta = AngularSpread.x + (rand(state) - 0.5)*AngularSpread.y;\r\n    vec2 dir = vec2(cos(theta), sin(theta));\r\n    vec2 pos = EmitterPos + (rand(state) - 0.5)*SpatialSpread*vec2(-EmitterDir.y, EmitterDir.x);\r\n    \r\n    float randL = rand(state);\r\n    float spectrumOffset = texture2D(ICDF, vec2(randL, 0.5)).r + rand(state)*(1.0/256.0);\r\n    float lambda = 360.0 + (750.0 - 360.0)*spectrumOffset;\r\n    vec3 rgb = EmitterPower\r\n                    *texture2D(Emission, vec2(spectrumOffset, 0.5)).r\r\n                    *texture2D(Spectrum, vec2(spectrumOffset, 0.5)).rgb\r\n                    /texture2D(PDF,      vec2(spectrumOffset, 0.5)).r;\r\n    \r\n    gl_FragData[0] = vec4(pos, dir);\r\n    gl_FragData[1] = state;\r\n    gl_FragData[2] = vec4(rgb, lambda);\r\n}\r\n";

    var init_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\nattribute vec2 TexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(Position, 1.0);\r\n    vTexCoord = TexCoord;\r\n}\r\n";

    var intersect = "void bboxIntersect(Ray ray, vec2 center, vec2 radius, float matId, inout Intersection isect) {\r\n    vec2 pos = ray.pos - center;\r\n    float tx1 = (-radius.x - pos.x)*ray.invDir.x;\r\n    float tx2 = ( radius.x - pos.x)*ray.invDir.x;\r\n    float ty1 = (-radius.y - pos.y)*ray.invDir.y;\r\n    float ty2 = ( radius.y - pos.y)*ray.invDir.y;\r\n    \r\n    float minX = min(tx1, tx2), maxX = max(tx1, tx2);\r\n    float minY = min(ty1, ty2), maxY = max(ty1, ty2);\r\n \r\n    float tmin = max(isect.tMin, max(minX, minY));\r\n    float tmax = min(isect.tMax, min(maxX, maxY));\r\n \r\n    if (tmax >= tmin) {\r\n        isect.tMax = (tmin == isect.tMin) ? tmax : tmin;\r\n        isect.n = isect.tMax == tx1 ? vec2(-1.0, 0.0) : isect.tMax == tx2 ? vec2(1.0, 0.0) :\r\n                  isect.tMax == ty1 ? vec2( 0.0, 1.0) :                     vec2(0.0, 1.0);\r\n        isect.mat = matId;\r\n    }\r\n}\r\nvoid sphereIntersect(Ray ray, vec2 center, float radius, float matId, inout Intersection isect) {\r\n    vec2 p = ray.pos - center;\r\n    float B = dot(p, ray.dir);\r\n    float C = dot(p, p) - radius*radius;\r\n    float detSq = B*B - C;\r\n    if (detSq >= 0.0) {\r\n        float det = sqrt(detSq);\r\n        float t = -B - det;\r\n        if (t <= isect.tMin || t >= isect.tMax)\r\n            t = -B + det;\r\n        if (t > isect.tMin && t < isect.tMax) {\r\n            isect.tMax = t;\r\n            isect.n = normalize(p + ray.dir*t);\r\n            isect.mat = matId;\r\n        }\r\n    }\r\n}\r\nvoid lineIntersect(Ray ray, vec2 a, vec2 b, float matId, inout Intersection isect) {\r\n    vec2 sT = b - a;\r\n    vec2 sN = vec2(-sT.y, sT.x);\r\n    float t = dot(sN, a - ray.pos)/dot(sN, ray.dir);\r\n    float u = dot(sT, ray.pos + ray.dir*t - a);\r\n    if (t < isect.tMin || t >= isect.tMax || u < 0.0 || u > dot(sT, sT))\r\n        return;\r\n    \r\n    isect.tMax = t;\r\n    isect.n = normalize(sN);\r\n    isect.mat = matId;\r\n}\r\nvoid prismIntersect(Ray ray, vec2 center, float radius, float matId, inout Intersection isect) {\r\n    lineIntersect(ray, center + vec2(   0.0,  1.0)*radius, center + vec2( 0.866, -0.5)*radius, matId, isect);\r\n    lineIntersect(ray, center + vec2( 0.866, -0.5)*radius, center + vec2(-0.866, -0.5)*radius, matId, isect);\r\n    lineIntersect(ray, center + vec2(-0.866, -0.5)*radius, center + vec2(   0.0,  1.0)*radius, matId, isect);\r\n}\r\n";

    var pass_frag = "#include \"preamble\"\r\n\r\nuniform sampler2D Frame;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(texture2D(Frame, vTexCoord).rgb, 1.0);\r\n}\r\n";

    var preamble = "#define PI      3.1415926536\r\n#define PI_HALF 1.5707963268\r\n\r\nprecision highp float;\r\n";

    var rand = "float rand(inout vec4 state) {\r\n    const vec4 q = vec4(   1225.0,    1585.0,    2457.0,    2098.0);\r\n    const vec4 r = vec4(   1112.0,     367.0,      92.0,     265.0);\r\n    const vec4 a = vec4(   3423.0,    2646.0,    1707.0,    1999.0);\r\n    const vec4 m = vec4(4194287.0, 4194277.0, 4194191.0, 4194167.0);\r\n\r\n    vec4 beta = floor(state/q);\r\n    vec4 p = a*(state - beta*q) - beta*r;\r\n    beta = (1.0 - sign(p))*0.5*m;\r\n    state = p + beta;\r\n    return fract(dot(state/m, vec4(1.0, -1.0, 1.0, -1.0)));\r\n}\r\n";

    var ray_frag = "#include \"preamble\"\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(vColor, 1.0);\r\n}\r\n";

    var ray_vert = "#include \"preamble\"\r\n\r\nuniform sampler2D PosDataA;\r\nuniform sampler2D PosDataB;\r\nuniform sampler2D RgbData;\r\nuniform float Aspect;\r\n\r\nattribute vec3 TexCoord;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    vec2 posA = texture2D(PosDataA, TexCoord.xy).xy;\r\n    vec2 posB = texture2D(PosDataB, TexCoord.xy).xy;\r\n    vec2 pos = mix(posA, posB, TexCoord.z);\r\n    vec2 dir = posB - posA;\r\n    float biasCorrection = clamp(length(dir)/max(abs(dir.x), abs(dir.y)), 1.0, 1.414214);\r\n    \r\n    gl_Position = vec4(pos.x/Aspect, pos.y, 0.0, 1.0);\r\n    vColor = texture2D(RgbData, TexCoord.xy).rgb*biasCorrection;\r\n}\r\n";

    var scene1 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n#include \"csg_intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    biconvexLensIntersect   (ray, vec2(-0.4, 0.0), 0.375, 0.15,   0.75, 0.75, 1.0, isect);\r\n    biconcaveLensIntersect  (ray, vec2( 0.4, 0.0), 0.375, 0.0375, 0.75, 0.75, 1.0, isect);\r\n    planoConvexLensIntersect(ray, vec2(-1.2, 0.0), 0.375, 0.075,  0.75,       1.0, isect);\r\n    meniscusLensIntersect   (ray, vec2( 0.8, 0.0), 0.375, 0.15,   0.45, 0.75, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.4;\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene2 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    sphereIntersect(ray, vec2(-1.424, -0.8), 0.356, 1.0, isect);\r\n    sphereIntersect(ray, vec2(-0.72,  -0.8), 0.356, 2.0, isect);\r\n    sphereIntersect(ray, vec2( 0.0,   -0.8), 0.356, 3.0, isect);\r\n    sphereIntersect(ray, vec2( 0.72,  -0.8), 0.356, 4.0, isect);\r\n    sphereIntersect(ray, vec2( 1.424, -0.8), 0.356, 5.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n           if (isect.mat == 1.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.02);\r\n    } else if (isect.mat == 2.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.05);\r\n    } else if (isect.mat == 3.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.1);\r\n    } else if (isect.mat == 4.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.2);\r\n    } else if (isect.mat == 5.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.5);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene3 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.2,  0.8), 1.0, isect);\r\n    sphereIntersect(ray, vec2(-0.7, -0.45), 0.35, 3.0, isect);\r\n    sphereIntersect(ray, vec2( 0.7, -0.45), 0.35, 2.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 2.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.4;\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else if (isect.mat == 3.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else if (isect.mat == 1.0) {\r\n             if (isect.n.x == -1.0) throughput *= vec3(0.14,  0.45,  0.091);\r\n        else if (isect.n.x ==  1.0) throughput *= vec3(0.63,  0.065, 0.05);\r\n        else                        throughput *= vec3(0.725, 0.71,  0.68);\r\n        return sampleDiffuse(state, wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene4 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    prismIntersect(ray, vec2(0.0, 0.0), 0.6, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 17.4688), lambda)/1.8;\r\n        return sampleRoughDielectric(state, wiLocal, 0.1, ior);\r\n    } else {\r\n        throughput *= vec3(0.05);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene5 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n#include \"csg_intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    planoConcaveLensIntersect(ray, vec2(0.8, 0.0), 0.6, 0.3, 0.6, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene6 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    sphereIntersect(ray, vec2(-0.95,   0.25),    0.4, 1.0, isect);\r\n    sphereIntersect(ray, vec2(-0.15,  -0.25),    0.2, 1.0, isect);\r\n    sphereIntersect(ray, vec2(1.11667, 0.18333), 0.2, 1.0, isect);\r\n    lineIntersect(ray, vec2(0.168689, -0.885424), vec2(1.13131,  -0.614576), 2.0, isect);\r\n    lineIntersect(ray, vec2(1.71686,   0.310275), vec2(0.983139,  0.989725), 2.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sqrt(sellmeierIor(vec3(1.0396, 0.2318, 1.0105), vec3(0.0060, 0.0200, 103.56), lambda));\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else if (isect.mat == 2.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene7 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n#include \"csg_intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    sphereIntersect(ray, vec2(0.0, 0.0), 0.4, 1.0, isect);\r\n    biconvexLensIntersect(ray, vec2(-0.4, -0.65), 0.3, 0.12, 0.5, 0.5, 1.0, isect);\r\n    meniscusLensIntersect(ray, vec2(-0.8, -0.65), 0.3, 0.08, -0.5, -0.5, 1.0, isect);\r\n    planoConcaveLensIntersect(ray, vec2(1.3, 0.0), 0.3, 0.0, 0.3, 2.0, isect);\r\n    prismIntersect(ray, vec2(0.8, -0.7), 0.2, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.6; // SF10\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else if (isect.mat == 2.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.25);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var trace_frag = "#extension GL_EXT_draw_buffers : require\r\n#include \"preamble\"\r\n#include \"rand\"\r\n\r\nuniform sampler2D PosData;\r\nuniform sampler2D RngData;\r\nuniform sampler2D RgbData;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nstruct Ray {\r\n    vec2 pos;\r\n    vec2 dir;\r\n    vec2 invDir;\r\n    vec2 dirSign;\r\n};\r\nstruct Intersection {\r\n    float tMin;\r\n    float tMax;\r\n    vec2 n;\r\n    float mat;\r\n};\r\n\r\nvoid intersect(Ray ray, inout Intersection isect);\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput);\r\n\r\nRay unpackRay(vec4 posDir) {\r\n    vec2 pos = posDir.xy;\r\n    vec2 dir = posDir.zw;\r\n    dir.x = abs(dir.x) < 1e-5 ? 1e-5 : dir.x; /* The nuclear option to fix NaN issues on some platforms */\r\n    dir.y = abs(dir.y) < 1e-5 ? 1e-5 : dir.y;\r\n    return Ray(pos, normalize(dir), 1.0/dir, sign(dir));\r\n}\r\n\r\nvoid main() {\r\n    vec4 posDir    = texture2D(PosData, vTexCoord);\r\n    vec4 state     = texture2D(RngData, vTexCoord);\r\n    vec4 rgbLambda = texture2D(RgbData, vTexCoord);\r\n    \r\n    Ray ray = unpackRay(posDir);\r\n    Intersection isect;\r\n    isect.tMin = 1e-4;\r\n    isect.tMax = 1e30;\r\n    intersect(ray, isect);\r\n    \r\n    vec2 t = vec2(-isect.n.y, isect.n.x);\r\n    vec2 wiLocal = -vec2(dot(t, ray.dir), dot(isect.n, ray.dir));\r\n    vec2 woLocal = sample(state, isect, rgbLambda.w, wiLocal, rgbLambda.rgb);\r\n    \r\n    if (isect.tMax == 1e30) {\r\n        rgbLambda.rgb = vec3(0.0);\r\n    } else {\r\n        posDir.xy = ray.pos + ray.dir*isect.tMax;\r\n        posDir.zw = woLocal.y*isect.n + woLocal.x*t;\r\n    }\r\n    \r\n    gl_FragData[0] = posDir;\r\n    gl_FragData[1] = state;\r\n    gl_FragData[2] = rgbLambda;\r\n}\r\n";

    var trace_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\nattribute vec2 TexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(Position, 1.0);\r\n    vTexCoord = TexCoord;\r\n}\r\n";

    var _shaders = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bsdf: bsdf,
        compose_frag: compose_frag,
        compose_vert: compose_vert,
        csg_intersect: csg_intersect,
        init_frag: init_frag,
        init_vert: init_vert,
        intersect: intersect,
        pass_frag: pass_frag,
        preamble: preamble,
        rand: rand,
        ray_frag: ray_frag,
        ray_vert: ray_vert,
        scene1: scene1,
        scene2: scene2,
        scene3: scene3,
        scene4: scene4,
        scene5: scene5,
        scene6: scene6,
        scene7: scene7,
        trace_frag: trace_frag,
        trace_vert: trace_vert
    });

    const shaders = _shaders;
    function resolveShader(name) {
        if (!(name in shaders))
            throw new Error("Unable to find shader source for '" + name + "'");
        /* Rudimentary include handling for convenience.
           Not the most robust, but it will do for our purposes */
        return shaders[name].replaceAll(/#include "(.+)"/g, (_, g1) => resolveShader(g1));
    }

    function getFormatForChannelCount(gl, channels) {
        return [gl.LUMINANCE, gl.RG, gl.RGB, gl.RGBA][channels - 1];
    }
    class RayState {
        constructor(gl, size) {
            this.gl = gl;
            this.size = size;
            const posData = new Float32Array(size * size * 4);
            const rngData = new Float32Array(size * size * 4);
            const rgbData = new Float32Array(size * size * 4);
            for (let i = 0; i < size * size; ++i) {
                const theta = Math.random() * Math.PI * 2.0;
                posData[i * 4 + 0] = 0.0;
                posData[i * 4 + 1] = 0.0;
                posData[i * 4 + 2] = Math.cos(theta);
                posData[i * 4 + 3] = Math.sin(theta);
                for (let t = 0; t < 4; ++t)
                    rngData[i * 4 + t] = Math.random() * 4194167.0;
                for (let t = 0; t < 4; ++t)
                    rgbData[i * 4 + t] = 0.0;
            }
            this.posTex = createTexture(gl, {
                width: size,
                height: size,
                format: getFormatForChannelCount(gl, 4),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
                src: posData,
            });
            this.rngTex = createTexture(gl, {
                width: size,
                height: size,
                format: getFormatForChannelCount(gl, 4),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
                src: rngData,
            });
            this.rgbTex = createTexture(gl, {
                width: size,
                height: size,
                format: getFormatForChannelCount(gl, 4),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
                src: rgbData,
            });
        }
        getUniforms() {
            return {
                PosData: this.posTex,
                RngData: this.rngTex,
                RgbData: this.rgbTex,
            };
        }
        attach(fbo) {
            const gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.posTex, 0);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 1, gl.TEXTURE_2D, this.rngTex, 0);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 2, gl.TEXTURE_2D, this.rgbTex, 0);
        }
        detach(fbo) {
            const gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 1, gl.TEXTURE_2D, null, 0);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 2, gl.TEXTURE_2D, null, 0);
        }
    }
    class Renderer {
        constructor(gl, multiBufExt, width, height, scenes) {
            this.gl = gl;
            this.multiBufExt = multiBufExt;
            this.width = width;
            this.height = height;
            this.maxSampleCount = 100000;
            this.spreadType = Renderer.SPREAD_POINT;
            this.currentScene = 0;
            this.needsReset = true;
            this.maxPathLength = 12;
            this.raySize = 512;
            this.rayCount = this.raySize * this.raySize;
            this.currentState = 0;
            this.activeBlock = 4;
            this.aspect = 1;
            this.emitterPos = [0, 0];
            this.emitterAngle = 0;
            this.emissionSpectrum = new EmissionSpectrum();
            this.wavesTraced = 0;
            this.raysTraced = 0;
            this.samplesTraced = 0;
            this.pathLength = 0;
            this.elapsedTimes = [];
            this.emitterPower = 0;
            this.spatialSpread = 0;
            this.angularSpread = [0, 0];
            this.quadVbo = createBufferInfoFromArrays(gl, {
                Position: [
                    1.0, 1.0, 0.0,
                    -1.0, 1.0, 0.0,
                    -1.0, -1.0, 0.0,
                    1.0, -1.0, 0.0
                ],
                TexCoord: [
                    1.0, 1.0,
                    0.0, 1.0,
                    0.0, 0.0,
                    1.0, 0.0
                ]
            });
            function createProgram(vertName, fragName) {
                return createProgramInfo(gl, [
                    resolveShader(vertName),
                    resolveShader(fragName),
                ], er => { throw new Error(er); });
            }
            this.compositeProgram = createProgram("compose_vert", "compose_frag");
            this.passProgram = createProgram("compose_vert", "pass_frag");
            this.initProgram = createProgram("init_vert", "init_frag");
            this.rayProgram = createProgram("ray_vert", "ray_frag");
            this.tracePrograms = scenes.map(s => createProgram("trace_vert", s));
            this.spectrum = createTexture(gl, {
                width: wavelengthToRgbTable.length / 4,
                height: 1,
                format: getFormatForChannelCount(gl, 4),
                type: gl.FLOAT,
                minMag: gl.LINEAR,
                wrap: gl.CLAMP_TO_EDGE,
                src: wavelengthToRgbTable,
            });
            this.emission = createTexture(gl, {
                width: EmissionSpectrum.SPECTRUM_SAMPLES,
                height: 1,
                format: getFormatForChannelCount(gl, 1),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
            });
            this.emissionIcdf = createTexture(gl, {
                width: EmissionSpectrum.ICDF_SAMPLES,
                height: 1,
                format: getFormatForChannelCount(gl, 1),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
            });
            this.emissionPdf = createTexture(gl, {
                width: EmissionSpectrum.SPECTRUM_SAMPLES,
                height: 1,
                format: getFormatForChannelCount(gl, 1),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
            });
            this.resetActiveBlock();
            this.currentState = 0;
            this.rayStates = [new RayState(gl, this.raySize), new RayState(gl, this.raySize)];
            const vboData = new Float32Array(this.rayCount * 2 * 3);
            for (let i = 0; i < this.rayCount; ++i) {
                const u = ((i % this.raySize) + 0.5) / this.raySize;
                const v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
                vboData[i * 6 + 0] = vboData[i * 6 + 3] = u;
                vboData[i * 6 + 1] = vboData[i * 6 + 4] = v;
                vboData[i * 6 + 2] = 0.0;
                vboData[i * 6 + 5] = 1.0;
            }
            this.rayVbo = createBufferInfoFromArrays(gl, {
                "TexCoord": { numComponents: 3, data: vboData },
            });
            this.fbo = gl.createFramebuffer();
            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.blendFunc(gl.ONE, gl.ONE);
            this.changeResolution(width, height);
            this.setEmitterPos([width / 2, height / 2], [width / 2, height / 2]);
            this.emissionSpectrum.set({});
        }
        resetActiveBlock() {
            this.activeBlock = 4;
        }
        setEmissionSpectrum(values) {
            this.emissionSpectrum.set(values);
            const gl = this.gl;
            setTextureFromArray(gl, this.emissionIcdf, this.emissionSpectrum.icdf, {
                width: EmissionSpectrum.ICDF_SAMPLES,
                height: 1,
                format: getFormatForChannelCount(gl, 1),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
            });
            setTextureFromArray(gl, this.emissionPdf, this.emissionSpectrum.pdf, {
                width: EmissionSpectrum.SPECTRUM_SAMPLES,
                height: 1,
                format: getFormatForChannelCount(gl, 1),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
            });
            setTextureFromArray(gl, this.emission, this.emissionSpectrum.samples, {
                width: EmissionSpectrum.SPECTRUM_SAMPLES,
                height: 1,
                format: getFormatForChannelCount(gl, 1),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE,
            });
            this.reset();
        }
        setMaxPathLength(length) {
            this.maxPathLength = length;
            this.reset();
        }
        setMaxSampleCount(count) {
            this.maxSampleCount = count;
        }
        changeResolution(width, height) {
            this.emitterPos[0] = (this.emitterPos[0] + 0.5) * width / this.width - 0.5;
            this.emitterPos[1] = (this.emitterPos[1] + 0.5) * height / this.height - 0.5;
            this.width = width;
            this.height = height;
            this.aspect = this.width / this.height;
            const gl = this.gl;
            this.screenBuffer = createTexture(gl, {
                width: this.width,
                height: this.height,
                format: getFormatForChannelCount(gl, 4),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE
            });
            this.waveBuffer = createTexture(gl, {
                width: this.width,
                height: this.height,
                format: getFormatForChannelCount(gl, 4),
                type: gl.FLOAT,
                minMag: gl.NEAREST,
                wrap: gl.CLAMP_TO_EDGE
            });
            this.resetActiveBlock();
            this.reset();
        }
        changeScene(idx) {
            this.resetActiveBlock();
            this.currentScene = idx;
            this.reset();
        }
        reset() {
            if (!this.needsReset)
                return;
            this.needsReset = false;
            this.wavesTraced = 0;
            this.raysTraced = 0;
            this.samplesTraced = 0;
            this.pathLength = 0;
            this.elapsedTimes = [];
            const gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
            this.multiBufExt.drawBuffersWEBGL([gl.COLOR_ATTACHMENT0]);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.screenBuffer, 0);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
        setSpreadType(type) {
            this.resetActiveBlock();
            this.spreadType = type;
            this.computeSpread();
            this.reset();
        }
        setNormalizedEmitterPos(posA, posB) {
            this.setEmitterPos([posA[0] * this.width, posA[1] * this.height], [posB[0] * this.width, posB[1] * this.height]);
        }
        setEmitterPos(posA, posB) {
            this.emitterPos = this.spreadType == Renderer.SPREAD_POINT ? posB : posA;
            this.emitterAngle = this.spreadType == Renderer.SPREAD_POINT ? 0.0 : Math.atan2(posB[1] - posA[1], posB[0] - posA[0]);
            this.computeSpread();
            this.reset();
        }
        computeSpread() {
            switch (this.spreadType) {
                case Renderer.SPREAD_POINT:
                    this.emitterPower = 0.1;
                    this.spatialSpread = 0.0;
                    this.angularSpread = [0.0, Math.PI * 2.0];
                    break;
                case Renderer.SPREAD_CONE:
                    this.emitterPower = 0.03;
                    this.spatialSpread = 0.0;
                    this.angularSpread = [this.emitterAngle, Math.PI * 0.3];
                    break;
                case Renderer.SPREAD_BEAM:
                    this.emitterPower = 0.03;
                    this.spatialSpread = 0.4;
                    this.angularSpread = [this.emitterAngle, 0.0];
                    break;
                case Renderer.SPREAD_LASER:
                    this.emitterPower = 0.05;
                    this.spatialSpread = 0.0;
                    this.angularSpread = [this.emitterAngle, 0.0];
                    break;
                case Renderer.SPREAD_AREA:
                    this.emitterPower = 0.1;
                    this.spatialSpread = 0.4;
                    this.angularSpread = [this.emitterAngle, Math.PI];
                    break;
            }
        }
        totalRaysTraced() {
            return this.raysTraced;
        }
        maxRayCount() {
            return this.maxPathLength * this.maxSampleCount;
        }
        totalSamplesTraced() {
            return this.samplesTraced;
        }
        progress() {
            return Math.min(this.totalRaysTraced() / this.maxRayCount(), 1.0);
        }
        finished() {
            return this.totalSamplesTraced() >= this.maxSampleCount;
        }
        composite() {
            drawObjectList(this.gl, [{
                    programInfo: this.compositeProgram,
                    bufferInfo: this.quadVbo,
                    uniforms: {
                        Frame: this.screenBuffer,
                        Exposure: this.width / (Math.max(this.samplesTraced, this.raySize * this.activeBlock)),
                    },
                    type: this.gl.TRIANGLE_FAN,
                }]);
        }
        render(timestamp) {
            this.needsReset = true;
            this.elapsedTimes.push(timestamp);
            let current = this.currentState;
            let next = 1 - current;
            const gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);
            gl.viewport(0, 0, this.raySize, this.raySize);
            gl.scissor(0, 0, this.raySize, this.activeBlock);
            gl.enable(gl.SCISSOR_TEST);
            this.multiBufExt.drawBuffersWEBGL([
                gl.COLOR_ATTACHMENT0,
                gl.COLOR_ATTACHMENT0 + 1,
                gl.COLOR_ATTACHMENT0 + 2,
            ]);
            this.rayStates[next].attach(this.fbo);
            if (this.pathLength == 0) {
                drawObjectList(gl, [{
                        programInfo: this.initProgram,
                        bufferInfo: this.quadVbo,
                        uniforms: {
                            RngData: this.rayStates[current].rngTex,
                            Spectrum: this.spectrum,
                            Emission: this.emission,
                            ICDF: this.emissionIcdf,
                            PDF: this.emissionPdf,
                            EmitterPos: [
                                ((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect,
                                1.0 - (this.emitterPos[1] / this.height) * 2.0
                            ],
                            EmitterDir: [
                                Math.cos(this.angularSpread[0]),
                                -Math.sin(this.angularSpread[0])
                            ],
                            EmitterPower: this.emitterPower,
                            SpatialSpread: this.spatialSpread,
                            AngularSpread: [-this.angularSpread[0], this.angularSpread[1]],
                        },
                        type: gl.TRIANGLE_FAN,
                    }]);
                current = 1 - current;
                next = 1 - next;
                this.rayStates[next].attach(this.fbo);
            }
            drawObjectList(gl, [{
                    programInfo: this.tracePrograms[this.currentScene],
                    bufferInfo: this.quadVbo,
                    uniforms: this.rayStates[current].getUniforms(),
                    type: this.gl.TRIANGLE_FAN,
                }]);
            this.rayStates[next].detach(this.fbo);
            gl.disable(gl.SCISSOR_TEST);
            gl.viewport(0, 0, this.width, this.height);
            this.multiBufExt.drawBuffersWEBGL([gl.COLOR_ATTACHMENT0]);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.waveBuffer, 0);
            if (this.pathLength == 0 || this.wavesTraced == 0)
                gl.clear(gl.COLOR_BUFFER_BIT);
            gl.enable(gl.BLEND);
            drawObjectList(gl, [{
                    programInfo: this.rayProgram,
                    bufferInfo: this.rayVbo,
                    uniforms: {
                        PosDataA: this.rayStates[current].posTex,
                        PosDataB: this.rayStates[next].posTex,
                        RgbData: this.rayStates[current].rgbTex,
                        Aspect: this.aspect,
                    },
                    type: gl.LINES,
                    count: this.raySize * this.activeBlock * 2,
                }]);
            this.raysTraced += this.raySize * this.activeBlock;
            this.pathLength += 1;
            if (this.pathLength == this.maxPathLength || this.wavesTraced == 0) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.screenBuffer, 0);
                drawObjectList(gl, [{
                        programInfo: this.passProgram,
                        bufferInfo: this.quadVbo,
                        uniforms: {
                            Frame: this.waveBuffer,
                        },
                        type: gl.TRIANGLE_FAN,
                    }]);
                if (this.pathLength == this.maxPathLength) {
                    this.samplesTraced += this.raySize * this.activeBlock;
                    this.wavesTraced += 1;
                    this.pathLength = 0;
                    if (this.elapsedTimes.length > 5) {
                        let avgTime = 0;
                        for (let i = 1; i < this.elapsedTimes.length; ++i)
                            avgTime += this.elapsedTimes[i] - this.elapsedTimes[i - 1];
                        avgTime /= this.elapsedTimes.length - 1;
                        /* Let's try to stay at reasonable frame times. Targeting 16ms is
                           a bit tricky because there's a lot of variability in how often
                           the browser executes this loop and 16ms might well not be
                           reachable, but 24ms seems to do ok */
                        if (avgTime > 24.0)
                            this.activeBlock = Math.max(4, this.activeBlock - 4);
                        else
                            this.activeBlock = Math.min(512, this.activeBlock + 4);
                        this.elapsedTimes = [this.elapsedTimes[this.elapsedTimes.length - 1]];
                    }
                }
            }
            gl.disable(gl.BLEND);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            this.composite();
            this.currentState = next;
        }
    }
    Renderer.SPREAD_POINT = 0;
    Renderer.SPREAD_CONE = 1;
    Renderer.SPREAD_BEAM = 2;
    Renderer.SPREAD_LASER = 3;
    Renderer.SPREAD_AREA = 4;

    function colorBufferFloatTest(gl, multiBufExt) {
        /* This one is slightly awkward. The WEBGL_color_buffer_float
           extension is apparently causing a lot of troubles for
           ANGLE, so barely anyone bothers to implement it. On the other
           hand, most platforms do actually implicitly support float render
           targets just fine, even though they pretend they don't.
           So to *actually* figure out whether we can do float attachments
           or not, we have to do a very hacky up-front blending test
           and see whether the results come out correct.
           Hurray WebGL! */
        const blend_test_vert = `precision highp float; 
    attribute vec3 Position; 
    void main() { gl_Position = vec4(Position, 1.0); }`;
        const blend_test_frag = `precision highp float; 
    void main() { gl_FragColor = vec4(vec3(7.0, 59.0, -7.0), 1.0); }`;
        const blend_test_pack_frag = `precision highp float; 
    uniform sampler2D Tex; 
    void main() { gl_FragColor = texture2D(Tex, vec2(0.5))*(1.0/255.0); }`;
        const shader = createProgramInfo(gl, [blend_test_vert, blend_test_frag], er => { throw new Error(er); });
        const packShader = createProgramInfo(gl, [blend_test_vert, blend_test_pack_frag], er => { throw new Error(er); });
        const target = createTexture(gl, {
            width: 1,
            height: 1,
            format: gl.RGBA,
            type: gl.FLOAT,
            minMag: gl.NEAREST,
            wrap: gl.REPEAT,
            src: [-6.0, 10.0, 30.0, 2.0],
        });
        const fbo = gl.createFramebuffer();
        const vbo = createBufferInfoFromArrays(gl, {
            Position: [
                1.0, 1.0, 0.0,
                -1.0, 1.0, 0.0,
                -1.0, -1.0, 0.0,
                1.0, -1.0, 0.0
            ],
        });
        gl.viewport(0, 0, 1, 1);
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        multiBufExt.drawBuffersWEBGL([gl.COLOR_ATTACHMENT0]);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, target, 0);
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE);
        gl.useProgram(shader.program);
        drawObjectList(gl, [{
                programInfo: shader,
                bufferInfo: vbo,
                uniforms: {},
                type: gl.TRIANGLE_FAN,
            }]);
        drawObjectList(gl, [{
                programInfo: shader,
                bufferInfo: vbo,
                uniforms: {},
                type: gl.TRIANGLE_FAN,
            }]);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.disable(gl.BLEND);
        /* Of course we can neither read back texture contents or read floating point
           FBO attachments in WebGL, so we have to do another pass, convert to uint8
           and check whether the results are ok.
           Hurray WebGL! */
        drawObjectList(gl, [{
                programInfo: packShader,
                bufferInfo: vbo,
                uniforms: {
                    Tex: target
                },
                type: gl.TRIANGLE_FAN,
            }]);
        const pixels = new Uint8Array([0, 0, 0, 0]);
        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        if (pixels[0] != 8 || pixels[1] != 128 || pixels[2] != 16 || pixels[3] != 4) {
            console.log("Floating point blending test failed. Result was " + pixels + " but should have been " + [8, 128, 16, 4]);
            throw new Error("Your platform does not support floating point attachments");
        }
    }

    class Tantalum {
        constructor() {
            this.canvas = document.getElementById("render-canvas");
            this.overlay = document.getElementById("render-overlay");
            this.content = document.getElementById("content");
            this.controls = document.getElementById("controls");
            this.spectrumCanvas = document.getElementById("spectrum-canvas");
            this.savedImages = 0;
            this.saveImageData = false;
            this.boundRenderLoop = this.renderLoop.bind(this);
            try {
                const { gl, multiBufExt } = this.setupGL();
                this.gl = gl;
                this.multiBufExt = multiBufExt;
            }
            catch (e) {
                /* GL errors at this stage are to be expected to some degree,
                   so display a nice error message and call it quits */
                e.message += ". This demo won't run in your browser.";
                throw e;
            }
            try {
                const ui = this.setupUI();
                this.renderer = ui.renderer;
                this.spectrumRenderer = ui.spectrumRenderer;
                this.progressBar = ui.progressBar;
            }
            catch (e) {
                /* Errors here are a bit more serious and shouldn't normally happen.
                   Let's just dump what we have and hope the user can make sense of it */
                e.message = "Ooops! Something unexpected happened. The error message is listed below:<br/>" +
                    "<pre>" + e.message + "</pre>";
                throw e;
            }
            /* Ok, all seems well. Time to show the controls */
            this.controls.style.visibility = "visible";
            window.requestAnimationFrame(this.boundRenderLoop);
        }
        setupGL() {
            let gl;
            try {
                gl = (this.canvas.getContext("webgl") || this.canvas.getContext("experimental-webgl"));
            }
            catch (e) {
                e.message = "Could not initialise WebGL: " + e.message;
                throw e;
            }
            if (!gl)
                throw new Error("Could not initialise WebGL");
            const floatExt = gl.getExtension("OES_texture_float");
            const floatLinExt = gl.getExtension("OES_texture_float_linear");
            const floatBufExt = gl.getExtension("WEBGL_color_buffer_float");
            const multiBufExt = gl.getExtension("WEBGL_draw_buffers");
            if (!floatExt || !floatLinExt)
                throw new Error("Your platform does not support float textures");
            if (!multiBufExt)
                throw new Error("Your platform does not support the draw buffers extension");
            if (!floatBufExt) {
                colorBufferFloatTest(gl, multiBufExt);
            }
            return { gl, multiBufExt };
        }
        setupUI() {
            function map(a, b) { return [a * 0.5 / 1.78 + 0.5, -b * 0.5 + 0.5]; }
            const config = {
                "resolutions": [[820, 461], [1024, 576], [1280, 720], [1600, 900], [1920, 1080], [4096, 2160]],
                "scenes": [
                    { 'shader': 'scene1', 'name': 'Lenses', 'posA': [0.5, 0.5], 'posB': [0.5, 0.5], 'spread': Renderer.SPREAD_POINT },
                    { 'shader': 'scene6', 'name': 'Spheres', 'posA': map(-1.59, 0.65), 'posB': map(0.65, -0.75), 'spread': Renderer.SPREAD_BEAM },
                    { 'shader': 'scene7', 'name': 'Playground', 'posA': [0.3, 0.52], 'posB': [0.3, 0.52], 'spread': Renderer.SPREAD_POINT },
                    { 'shader': 'scene4', 'name': 'Prism', 'posA': [0.1, 0.65], 'posB': [0.4, 0.4], 'spread': Renderer.SPREAD_LASER },
                    { 'shader': 'scene5', 'name': 'Cardioid', 'posA': [0.2, 0.5], 'posB': [0.2, 0.5], 'spread': Renderer.SPREAD_POINT },
                    { 'shader': 'scene3', 'name': 'Cornell Box', 'posA': [0.5, 0.101], 'posB': [0.5, 0.2], 'spread': Renderer.SPREAD_AREA },
                    { 'shader': 'scene2', 'name': 'Rough Mirror Spheres', 'posA': [0.25, 0.125], 'posB': [0.5, 0.66], 'spread': Renderer.SPREAD_LASER }
                ]
            };
            const renderer = new Renderer(this.gl, this.multiBufExt, this.canvas.width, this.canvas.height, config.scenes.map(s => s.shader));
            const spectrumRenderer = new SpectrumRenderer(this.spectrumCanvas, renderer.emissionSpectrum);
            /* Let's try and make member variables in JS a little less verbose... */
            const { content, canvas } = this;
            const progressBar = new ProgressBar(true);
            replace("render-progress", progressBar.el);
            const resolutionLabels = [];
            for (let i = 0; i < config.resolutions.length; ++i)
                resolutionLabels.push(config.resolutions[i][0] + "x" + config.resolutions[i][1]);
            replace("resolution-selector", new ButtonGroup(false, resolutionLabels, function (idx) {
                const [width, height] = config.resolutions[idx];
                content.style.width = width + "px";
                content.style.height = height + "px";
                canvas.width = width;
                canvas.height = height;
                renderer.changeResolution(width, height);
            }).el);
            const spreadSelector = new ButtonGroup(true, ["Point", "Cone", "Beam", "Laser", "Area"], renderer.setSpreadType.bind(renderer));
            replace("spread-selector", spreadSelector.el);
            function selectScene(idx) {
                renderer.changeScene(idx);
                spreadSelector.select(config.scenes[idx].spread);
                renderer.setNormalizedEmitterPos(config.scenes[idx].posA, config.scenes[idx].posB);
            }
            replace("scene-selector", new ButtonGroup(true, config.scenes.map(s => s.name), selectScene).el);
            const mouseListener = new MouseListener(canvas, renderer.setEmitterPos.bind(renderer));
            const temperatureSlider = new Slider(1000, 10000, true, function (temperature) {
                this.setLabel("Temperature: " + temperature + "K");
                renderer.setEmissionSpectrum({ emitterTemperature: temperature });
                spectrumRenderer.draw();
            });
            replace("emission-temperature", temperatureSlider.el);
            const bounceSlider = new Slider(1, 20, true, function (length) {
                this.setLabel((length - 1) + " light bounces");
                renderer.setMaxPathLength(length);
            });
            bounceSlider.setValue(12);
            replace("path-length", bounceSlider.el);
            const sampleSlider = new Slider(400, 700, true, function (exponent100) {
                const sampleCount = Math.floor(Math.pow(10, exponent100 * 0.01));
                this.setLabel(sampleCount + " light paths");
                renderer.setMaxSampleCount(sampleCount);
            });
            sampleSlider.setValue(600);
            replace("sample-count", sampleSlider.el);
            const gasGrid = new ButtonGrid(4, gasDischargeLines.map(l => l.name), function (gasId) {
                renderer.setEmissionSpectrum({ emitterGas: gasId });
                spectrumRenderer.draw();
            });
            replace("gas-selection", gasGrid.el);
            temperatureSlider.show(false);
            gasGrid.show(false);
            replace("emission-selector", new ButtonGroup(false, ["White", "Incandescent", "Gas Discharge"], function (type) {
                renderer.setEmissionSpectrum({ emissionType: type });
                spectrumRenderer.setSmooth(type != EmissionSpectrum.SPECTRUM_GAS_DISCHARGE);
                spectrumRenderer.draw();
                temperatureSlider.show(type == EmissionSpectrum.SPECTRUM_INCANDESCENT);
                gasGrid.show(type == EmissionSpectrum.SPECTRUM_GAS_DISCHARGE);
            }).el);
            document.getElementById('save-button')
                .addEventListener('click', () => this.saveImageData = true);
            selectScene(0);
            this.overlay.className = "render-help";
            this.overlay.offsetHeight; /* Flush CSS changes */
            this.overlay.className += " render-help-transition";
            this.overlay.textContent = "Click and drag!";
            this.overlay.addEventListener("mousedown", function (event) {
                this.parentNode.removeChild(this);
                mouseListener.mouseDown(event);
            });
            return {
                renderer,
                spectrumRenderer,
                progressBar,
            };
        }
        renderLoop(timestamp) {
            window.requestAnimationFrame(this.boundRenderLoop);
            if (!this.renderer.finished())
                this.renderer.render(timestamp);
            if (this.saveImageData) {
                /* Ensure we redraw the image before we grab it. This is a strange one:
                   To save power the renderer stops doing anything after it finished
                   tracing rays, and the canvas keeps displaying the correct image
                   (as you would expect). However, when we get the canvas as a blob,
                   the results are garbage unless we rendered to it in that frame.
                   There's most likely some browser/ANGLE meddling happening here, but
                   in interest of my mental health I'm not going to dig deeper into this */
                if (this.renderer.finished())
                    this.renderer.composite();
                let fileName = "Tantalum";
                if (this.savedImages > 0)
                    fileName += (this.savedImages + 1);
                fileName += ".png";
                this.canvas.toBlob(function (blob) { saveAs(blob, fileName); });
                this.savedImages++;
                this.saveImageData = false;
            }
            this.progressBar.setProgress(this.renderer.progress());
            this.progressBar.setLabel(Math.min(this.renderer.totalRaysTraced(), this.renderer.maxRayCount()) +
                "/" + this.renderer.maxRayCount() + " rays traced; Progress: " +
                this.progressBar.getProgressPercentage() + "%");
        }
        static fail(message) {
            const sorryP = document.createElement("p");
            sorryP.appendChild(document.createTextNode("Sorry! :("));
            sorryP.style.fontSize = "50px";
            const failureP = document.createElement("p");
            failureP.className = "warning-box";
            failureP.innerHTML = message;
            const errorImg = document.createElement("img");
            errorImg.title = errorImg.alt = "The Element of Failure";
            errorImg.src = "derp.gif";
            const failureDiv = document.createElement("div");
            failureDiv.className = "center";
            failureDiv.append(sorryP, errorImg, failureP);
            document.getElementById("content").appendChild(failureDiv);
            document.getElementById("render-overlay").style.display = 'none';
            document.getElementById("render-canvas").style.display = 'none';
        }
    }

    try {
        new Tantalum();
    }
    catch (e) {
        Tantalum.fail(e.message);
        throw e;
    }

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
