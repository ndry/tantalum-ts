(function () {
    'use strict';

    function replace(targetId, el) {
        const target = document.getElementById(targetId);
        target.parentNode.replaceChild(el, target);
    }
    class ProgressBar {
        constructor(hasLabel) {
            this.progressFraction = 0;
            this.progressPercentage = 0;
            const progressBackground = document.createElement("div");
            progressBackground.className = "progress";
            this.progressBar = document.createElement("div");
            this.progressBar.className = "progress-bar";
            progressBackground.appendChild(this.progressBar);
            this.setProgress(0.0);
            this.el = document.createElement("div");
            this.el.appendChild(progressBackground);
            if (hasLabel) {
                this.label = document.createElement("p");
                this.label.className = "progress-label";
                this.el.appendChild(this.label);
            }
        }
        getProgress() {
            return this.progressFraction;
        }
        setProgress(progressFraction) {
            this.progressFraction = progressFraction;
            this.progressPercentage = Math.min(Math.max(Math.floor(progressFraction * 100.0), 0), 100);
            this.progressBar.style.width = this.progressPercentage.toString() + "%";
        }
        setProgressWithoutTransition(progressFraction) {
            this.progressBar.classList.add("notransition");
            this.setProgress(progressFraction);
            this.progressBar.offsetHeight; /* Flush CSS changes */
            this.progressBar.classList.remove("notransition");
        }
        setLabel(text) {
            if (this.label)
                this.label.textContent = text;
        }
        getProgressPercentage() {
            return this.progressPercentage;
        }
    }
    class Slider {
        constructor(minValue, maxValue, hasLabel, callback) {
            this.minValue = minValue;
            this.maxValue = maxValue;
            this.callback = callback;
            this.value = 0;
            this.sliderBackground = document.createElement("div");
            this.sliderBackground.className = "slider";
            this.sliderBar = document.createElement("div");
            this.sliderBar.className = "slider-bar";
            this.sliderBackground.appendChild(this.sliderBar);
            this.sliderHandle = document.createElement("a");
            this.sliderHandle.className = "slider-handle";
            this.sliderBackground.appendChild(this.sliderHandle);
            var mouseMoveListener = this.mouseMove.bind(this);
            function mouseUpListener() {
                document.removeEventListener("mousemove", mouseMoveListener);
                document.removeEventListener("mouseup", mouseUpListener);
            }
            this.sliderHandle.addEventListener("mousedown", function (event) {
                event.preventDefault();
                document.addEventListener("mousemove", mouseMoveListener);
                document.addEventListener("mouseup", mouseUpListener);
            });
            this.el = document.createElement("div");
            this.el.appendChild(this.sliderBackground);
            if (hasLabel) {
                this.label = document.createElement("p");
                this.label.className = "slider-label";
                this.el.appendChild(this.label);
            }
            this.setPosition(0.45);
        }
        mouseMove(event) {
            var rect = this.sliderBackground.getBoundingClientRect();
            this.setPosition((event.clientX - rect.left) / (rect.right - rect.left));
        }
        setLabel(text) {
            if (this.label) {
                this.label.textContent = text;
            }
        }
        setValue(value) {
            value = Math.min(this.maxValue, Math.max(this.minValue, value));
            if (value != this.value) {
                this.value = value;
                var percentage = Math.max(Math.min(Math.floor(100.0 * (value - this.minValue) / (this.maxValue - this.minValue)), 100.0), 0.0);
                this.sliderHandle.style.left = this.sliderBar.style.width = percentage.toString() + "%";
                if (this.callback)
                    this.callback(value);
            }
        }
        setPosition(position) {
            this.setValue(Math.floor(this.minValue + position * (this.maxValue - this.minValue)));
        }
        show(show) {
            var display = show ? "block" : "none";
            this.sliderBackground.style.display = display;
            if (this.label)
                this.label.style.display = display;
        }
    }
    class ButtonGrid {
        constructor(cols, labels, selectionCallback) {
            this.cols = cols;
            this.selectionCallback = selectionCallback;
            this.selectedButton = 0;
            this.selectionCallback = selectionCallback;
            this.el = document.createElement("div");
            this.el.className = "button-grid";
            this.columns = Array.from({ length: cols }, () => {
                const column = document.createElement("div");
                column.className = "button-grid-column";
                return column;
            });
            this.el.append(...this.columns);
            this.cells = labels.map((label, i) => {
                var column = i % this.cols;
                var cell = document.createElement("div");
                cell.className = "button stretch-button button-grid-button";
                cell.appendChild(document.createTextNode(label));
                if (i == 0)
                    cell.classList.add("button-grid-tl");
                if (i == this.cols - 1)
                    cell.classList.add("button-grid-tr");
                if (i + this.cols >= labels.length) {
                    if (column == 0)
                        cell.classList.add("button-grid-bl");
                    if (column == this.cols - 1 || i == labels.length - 1)
                        cell.classList.add("button-grid-br");
                }
                cell.addEventListener("click", () => this.select(i));
                this.columns[column].appendChild(cell);
                return cell;
            });
            this.select(0);
        }
        select(idx) {
            if (idx < 0 || idx >= this.cells.length)
                return;
            this.cells[this.selectedButton].classList.remove("active");
            this.cells[idx].classList.add("active");
            if (this.selectedButton != idx && this.selectionCallback)
                this.selectionCallback(idx);
            this.selectedButton = idx;
        }
        show(show) {
            this.el.style.display = show ? "flex" : "none";
        }
    }
    class ButtonGroup extends ButtonGrid {
        constructor(vertical, labels, selectionCallback) {
            super(vertical ? 1 : labels.length, labels, selectionCallback);
        }
    }
    class MouseListener {
        constructor(target, callback) {
            this.target = target;
            this.callback = callback;
            this.mouseStart = [0, 0];
            this.mouseUpHandler = () => {
                document.removeEventListener('mouseup', this.mouseUpHandler);
                document.removeEventListener('mousemove', this.mouseMoveHandler);
            };
            this.mouseMoveHandler = (evt) => {
                this.callback(this.mouseStart, this.mapMouseEvent(evt));
            };
            this.mouseDown = (evt) => {
                evt.preventDefault();
                this.mouseStart = this.mapMouseEvent(evt);
                this.callback(this.mouseStart, this.mouseStart);
                document.addEventListener('mouseup', this.mouseUpHandler);
                document.addEventListener('mousemove', this.mouseMoveHandler);
            };
            target.addEventListener('mousedown', this.mouseDown);
        }
        mapMouseEvent(evt) {
            var rect = this.target.getBoundingClientRect();
            return [evt.clientX - rect.left, evt.clientY - rect.top];
        }
    }

    function glTypeSize(gl, type) {
        switch (type) {
            case gl.BYTE:
            case gl.UNSIGNED_BYTE:
                return 1;
            case gl.SHORT:
            case gl.UNSIGNED_SHORT:
                return 2;
            case gl.INT:
            case gl.UNSIGNED_INT:
            case gl.FLOAT:
                return 4;
            default:
                return 0;
        }
    }
    class Texture {
        constructor(gl, width, height, channels, isFloat, isLinear, isClamped, texels) {
            this.gl = gl;
            this.width = width;
            this.height = height;
            this.boundUnit = -1;
            const coordMode = isClamped ? gl.CLAMP_TO_EDGE : gl.REPEAT;
            this.type = isFloat ? gl.FLOAT : gl.UNSIGNED_BYTE;
            this.format = [gl.LUMINANCE, gl.RG, gl.RGB, gl.RGBA][channels - 1];
            this.glName = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this.glName);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.width, this.height, 0, this.format, this.type, texels);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, coordMode);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, coordMode);
            this.setSmooth(isLinear);
        }
        setSmooth(smooth) {
            const gl = this.gl;
            const interpMode = smooth ? gl.LINEAR : gl.NEAREST;
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, interpMode);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, interpMode);
        }
        copy(texels) {
            const gl = this.gl;
            gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.width, this.height, 0, this.format, this.type, texels);
        }
        bind(unit) {
            const gl = this.gl;
            gl.activeTexture(gl.TEXTURE0 + unit);
            gl.bindTexture(gl.TEXTURE_2D, this.glName);
            this.boundUnit = unit;
        }
    }
    class RenderTarget {
        constructor(gl, multiBufExt) {
            this.gl = gl;
            this.multiBufExt = multiBufExt;
            this.glName = gl.createFramebuffer();
        }
        bind() {
            const gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.glName);
        }
        unbind() {
            const gl = this.gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
        attachTexture(texture, index) {
            const gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + index, gl.TEXTURE_2D, texture.glName, 0);
        }
        detachTexture(index) {
            const gl = this.gl;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + index, gl.TEXTURE_2D, null, 0);
        }
        drawBuffers(numBufs) {
            const gl = this.gl;
            const buffers = Array.from({ length: numBufs }, (_, i) => gl.COLOR_ATTACHMENT0 + i);
            this.multiBufExt.drawBuffersWEBGL(buffers);
        }
    }
    class Shader {
        constructor(gl, shaderDict, vert, frag) {
            this.gl = gl;
            this.uniforms = {};
            this.vertex = this.createShaderObject(shaderDict, vert, false);
            this.fragment = this.createShaderObject(shaderDict, frag, true);
            this.program = gl.createProgram();
            gl.attachShader(this.program, this.vertex);
            gl.attachShader(this.program, this.fragment);
            gl.linkProgram(this.program);
            if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))
                alert("Could not initialise shaders");
        }
        bind() {
            const gl = this.gl;
            gl.useProgram(this.program);
        }
        createShaderObject(shaderDict, name, isFragment) {
            const gl = this.gl;
            let shaderSource = this.resolveShaderSource(shaderDict, name);
            const shaderObject = gl.createShader(isFragment ? gl.FRAGMENT_SHADER : gl.VERTEX_SHADER);
            gl.shaderSource(shaderObject, shaderSource);
            gl.compileShader(shaderObject);
            if (!gl.getShaderParameter(shaderObject, gl.COMPILE_STATUS)) {
                /* Add some line numbers for convenience */
                var lines = shaderSource.split("\n");
                for (var i = 0; i < lines.length; ++i)
                    lines[i] = ("   " + (i + 1)).slice(-4) + " | " + lines[i];
                shaderSource = lines.join("\n");
                throw new Error((isFragment ? "Fragment" : "Vertex") + " shader compilation error for shader '" + name + "':\n\n    " +
                    gl.getShaderInfoLog(shaderObject).split("\n").join("\n    ") +
                    "\nThe expanded shader source code was:\n\n" +
                    shaderSource);
            }
            return shaderObject;
        }
        resolveShaderSource(shaderDict, name) {
            if (!(name in shaderDict))
                throw new Error("Unable to find shader source for '" + name + "'");
            let shaderSource = shaderDict[name];
            /* Rudimentary include handling for convenience.
               Not the most robust, but it will do for our purposes */
            const pattern = new RegExp('#include "(.+)"');
            let match;
            while (match = pattern.exec(shaderSource)) {
                shaderSource = shaderSource.slice(0, match.index) +
                    this.resolveShaderSource(shaderDict, match[1]) +
                    shaderSource.slice(match.index + match[0].length);
            }
            return shaderSource;
        }
        uniformIndex(name) {
            const gl = this.gl;
            if (!(name in this.uniforms))
                this.uniforms[name] = gl.getUniformLocation(this.program, name);
            return this.uniforms[name];
        }
        uniformTexture(name, texture) {
            const gl = this.gl;
            const id = this.uniformIndex(name);
            if (id != -1)
                gl.uniform1i(id, texture.boundUnit);
        }
        uniformF(name, f) {
            const gl = this.gl;
            const id = this.uniformIndex(name);
            if (id != -1)
                gl.uniform1f(id, f);
        }
        uniform2F(name, f1, f2) {
            const gl = this.gl;
            var id = this.uniformIndex(name);
            if (id != -1)
                gl.uniform2f(id, f1, f2);
        }
    }
    class VertexBuffer {
        constructor(gl) {
            this.gl = gl;
            this.attributes = [];
            this.elementSize = 0;
            this.length = 0;
            this.glName = null;
        }
        bind() {
            const gl = this.gl;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.glName);
        }
        addAttribute(name, size, type, norm) {
            const gl = this.gl;
            this.attributes.push({
                name,
                size,
                type,
                norm,
                offset: this.elementSize,
                index: -1
            });
            this.elementSize += size * glTypeSize(gl, type);
        }
        init(numVerts) {
            const gl = this.gl;
            this.length = numVerts;
            this.glName = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, this.glName);
            gl.bufferData(gl.ARRAY_BUFFER, this.length * this.elementSize, gl.STATIC_DRAW);
        }
        copy(data) {
            const gl = this.gl;
            if (data.byteLength != this.length * this.elementSize)
                throw new Error("Resizing VBO during copy strongly discouraged");
            gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
        }
        draw(shader, mode, length) {
            const gl = this.gl;
            for (var i = 0; i < this.attributes.length; ++i) {
                this.attributes[i].index = gl.getAttribLocation(shader.program, this.attributes[i].name);
                if (this.attributes[i].index >= 0) {
                    var attr = this.attributes[i];
                    gl.enableVertexAttribArray(attr.index);
                    gl.vertexAttribPointer(attr.index, attr.size, attr.type, attr.norm, this.elementSize, attr.offset);
                }
            }
            gl.drawArrays(mode, 0, length ? length : this.length);
            for (var i = 0; i < this.attributes.length; ++i) {
                if (this.attributes[i].index >= 0) {
                    gl.disableVertexAttribArray(this.attributes[i].index);
                    this.attributes[i].index = -1;
                }
            }
        }
    }

    function wavelengthToRgbTable() {
        return new Float32Array([
            +0.00045, -0.00048, +0.00344, 0.0, +0.00054, -0.00057, +0.00411, 0.0, +0.00064, -0.00068, +0.00491, 0.0, +0.00076, -0.00081, +0.00587, 0.0,
            +0.00091, -0.00097, +0.00702, 0.0, +0.00109, -0.00116, +0.00840, 0.0, +0.00129, -0.00138, +0.01001, 0.0, +0.00153, -0.00164, +0.01190, 0.0,
            +0.00182, -0.00194, +0.01414, 0.0, +0.00218, -0.00234, +0.01703, 0.0, +0.00264, -0.00284, +0.02071, 0.0, +0.00322, -0.00348, +0.02534, 0.0,
            +0.00386, -0.00417, +0.03038, 0.0, +0.00450, -0.00486, +0.03546, 0.0, +0.00516, -0.00558, +0.04072, 0.0, +0.00598, -0.00647, +0.04724, 0.0,
            +0.00710, -0.00769, +0.05613, 0.0, +0.00863, -0.00936, +0.06836, 0.0, +0.01053, -0.01144, +0.08357, 0.0, +0.01274, -0.01385, +0.10125, 0.0,
            +0.01519, -0.01653, +0.12093, 0.0, +0.01803, -0.01965, +0.14389, 0.0, +0.02168, -0.02365, +0.17330, 0.0, +0.02643, -0.02888, +0.21162, 0.0,
            +0.03245, -0.03552, +0.26028, 0.0, +0.03908, -0.04284, +0.31394, 0.0, +0.04569, -0.05016, +0.36771, 0.0, +0.05227, -0.05746, +0.42149, 0.0,
            +0.06027, -0.06638, +0.48734, 0.0, +0.07081, -0.07815, +0.57443, 0.0, +0.08552, -0.09461, +0.69639, 0.0, +0.10362, -0.11491, +0.84703, 0.0,
            +0.12528, -0.13927, +1.02788, 0.0, +0.14983, -0.16697, +1.23378, 0.0, +0.17827, -0.19920, +1.47406, 0.0, +0.21158, -0.23708, +1.75729, 0.0,
            +0.25101, -0.28203, +2.09453, 0.0, +0.29624, -0.33380, +2.48475, 0.0, +0.34779, -0.39321, +2.93667, 0.0, +0.40658, -0.46162, +3.46319, 0.0,
            +0.47220, -0.53867, +4.06305, 0.0, +0.54051, -0.61973, +4.70338, 0.0, +0.60635, -0.69886, +5.33983, 0.0, +0.66537, -0.77121, +5.93862, 0.0,
            +0.71768, -0.83688, +6.49979, 0.0, +0.76113, -0.89376, +7.01109, 0.0, +0.79616, -0.94228, +7.47436, 0.0, +0.82035, -0.97986, +7.87338, 0.0,
            +0.83614, -1.00873, +8.22049, 0.0, +0.84242, -1.02744, +8.50645, 0.0, +0.84078, -1.03762, +8.74118, 0.0, +0.83034, -1.03859, +8.92043, 0.0,
            +0.81254, -1.03214, +9.05476, 0.0, +0.78703, -1.01809, +9.14316, 0.0, +0.75484, -0.99759, +9.19545, 0.0, +0.71615, -0.97105, +9.21808, 0.0,
            +0.67160, -0.93921, +9.21831, 0.0, +0.62161, -0.90259, +9.20002, 0.0, +0.56689, -0.86205, +9.17044, 0.0, +0.50834, -0.81861, +9.13661, 0.0,
            +0.44594, -0.77208, +9.09795, 0.0, +0.37943, -0.72170, +9.04709, 0.0, +0.30755, -0.66573, +8.97282, 0.0, +0.23092, -0.60438, +8.87416, 0.0,
            +0.14981, -0.53723, +8.74625, 0.0, +0.06594, -0.46565, +8.59299, 0.0, -0.02033, -0.38919, +8.40964, 0.0, -0.10876, -0.30770, +8.19449, 0.0,
            -0.20050, -0.21796, +7.92484, 0.0, -0.29554, -0.11954, +7.59637, 0.0, -0.39331, -0.01241, +7.21152, 0.0, -0.49150, +0.09945, +6.80323, 0.0,
            -0.58821, +0.21359, +6.39517, 0.0, -0.68287, +0.32900, +5.99509, 0.0, -0.77548, +0.44604, +5.60104, 0.0, -0.86610, +0.56489, +5.21161, 0.0,
            -0.95460, +0.68545, +4.82936, 0.0, -1.04075, +0.80685, +4.45829, 0.0, -1.12455, +0.92810, +4.09979, 0.0, -1.20591, +1.04853, +3.75664, 0.0,
            -1.28534, +1.16898, +3.42953, 0.0, -1.36289, +1.29080, +3.12382, 0.0, -1.43893, +1.41475, +2.83930, 0.0, -1.51418, +1.54219, +2.57957, 0.0,
            -1.59057, +1.67393, +2.33844, 0.0, -1.67070, +1.81285, +2.11752, 0.0, -1.75483, +1.95874, +1.91220, 0.0, -1.84334, +2.11293, +1.72443, 0.0,
            -1.93521, +2.27405, +1.55044, 0.0, -2.03042, +2.44286, +1.39069, 0.0, -2.13002, +2.62100, +1.24237, 0.0, -2.23687, +2.81319, +1.10525, 0.0,
            -2.35236, +3.02163, +0.97760, 0.0, -2.47428, +3.24476, +0.85780, 0.0, -2.59703, +3.47704, +0.74210, 0.0, -2.71594, +3.71384, +0.62737, 0.0,
            -2.82897, +3.95378, +0.51297, 0.0, -2.93632, +4.19762, +0.39993, 0.0, -3.03724, +4.44667, +0.28956, 0.0, -3.13108, +4.69930, +0.18189, 0.0,
            -3.21371, +4.95123, +0.07878, 0.0, -3.28397, +5.19852, -0.01863, 0.0, -3.33736, +5.43706, -0.10798, 0.0, -3.37511, +5.66511, -0.19039, 0.0,
            -3.39057, +5.87377, -0.26368, 0.0, -3.38528, +6.06146, -0.32886, 0.0, -3.35591, +6.22465, -0.38509, 0.0, -3.30812, +6.37058, -0.43551, 0.0,
            -3.24179, +6.50082, -0.48132, 0.0, -3.15961, +6.61749, -0.52364, 0.0, -3.06176, +6.71875, -0.56240, 0.0, -2.95103, +6.80507, -0.59813, 0.0,
            -2.82820, +6.87607, -0.63112, 0.0, -2.69357, +6.93282, -0.66147, 0.0, -2.54728, +6.97631, -0.68910, 0.0, -2.38914, +7.00683, -0.71390, 0.0,
            -2.22005, +7.02525, -0.73614, 0.0, -2.03886, +7.03046, -0.75560, 0.0, -1.84668, +7.02377, -0.77259, 0.0, -1.64223, +7.00396, -0.78687, 0.0,
            -1.42756, +6.97316, -0.79889, 0.0, -1.20113, +6.92961, -0.80833, 0.0, -0.96551, +6.87626, -0.81577, 0.0, -0.71778, +6.81012, -0.82080, 0.0,
            -0.46110, +6.73561, -0.82419, 0.0, -0.19336, +6.65064, -0.82569, 0.0, +0.08365, +6.55671, -0.82561, 0.0, +0.37088, +6.45270, -0.82381, 0.0,
            +0.66727, +6.33938, -0.82051, 0.0, +0.97318, +6.21586, -0.81561, 0.0, +1.28739, +6.08248, -0.80924, 0.0, +1.60955, +5.93863, -0.80137, 0.0,
            +1.93880, +5.78480, -0.79209, 0.0, +2.27437, +5.62195, -0.78153, 0.0, +2.61591, +5.45037, -0.76973, 0.0, +2.96233, +5.27108, -0.75682, 0.0,
            +3.31285, +5.08373, -0.74275, 0.0, +3.66602, +4.88945, -0.72766, 0.0, +4.02090, +4.68771, -0.71146, 0.0, +4.37621, +4.48023, -0.69439, 0.0,
            +4.73064, +4.26687, -0.67639, 0.0, +5.08331, +4.04937, -0.65773, 0.0, +5.43209, +3.82766, -0.63835, 0.0, +5.77578, +3.60300, -0.61845, 0.0,
            +6.11136, +3.37554, -0.59802, 0.0, +6.43833, +3.14646, -0.57722, 0.0, +6.75425, +2.91678, -0.55610, 0.0, +7.05863, +2.68778, -0.53481, 0.0,
            +7.34897, +2.46063, -0.51343, 0.0, +7.62475, +2.23621, -0.49201, 0.0, +7.88502, +2.01551, -0.47056, 0.0, +8.12917, +1.79937, -0.44912, 0.0,
            +8.35493, +1.58891, -0.42780, 0.0, +8.55610, +1.38639, -0.40686, 0.0, +8.72994, +1.19299, -0.38646, 0.0, +8.87308, +1.01015, -0.36670, 0.0,
            +8.99180, +0.83597, -0.34746, 0.0, +9.08621, +0.67076, -0.32872, 0.0, +9.16062, +0.51316, -0.31041, 0.0, +9.20686, +0.36631, -0.29275, 0.0,
            +9.22610, +0.22973, -0.27574, 0.0, +9.21024, +0.10654, -0.25962, 0.0, +9.16717, -0.00588, -0.24419, 0.0, +9.09596, -0.10655, -0.22948, 0.0,
            +9.00259, -0.19742, -0.21535, 0.0, +8.88469, -0.27749, -0.20186, 0.0, +8.74432, -0.34784, -0.18898, 0.0, +8.58049, -0.40808, -0.17677, 0.0,
            +8.39510, -0.45899, -0.16519, 0.0, +8.18703, -0.50078, -0.15418, 0.0, +7.95487, -0.53377, -0.14371, 0.0, +7.70010, -0.55866, -0.13371, 0.0,
            +7.42649, -0.57586, -0.12424, 0.0, +7.14029, -0.58670, -0.11524, 0.0, +6.84421, -0.59128, -0.10677, 0.0, +6.54303, -0.59108, -0.09875, 0.0,
            +6.24334, -0.58674, -0.09130, 0.0, +5.95045, -0.57990, -0.08435, 0.0, +5.66682, -0.57050, -0.07797, 0.0, +5.38831, -0.55895, -0.07199, 0.0,
            +5.11322, -0.54477, -0.06645, 0.0, +4.84120, -0.52865, -0.06124, 0.0, +4.57352, -0.51058, -0.05640, 0.0, +4.30991, -0.49103, -0.05187, 0.0,
            +4.05110, -0.47010, -0.04764, 0.0, +3.79769, -0.44817, -0.04369, 0.0, +3.55123, -0.42545, -0.04004, 0.0, +3.31243, -0.40220, -0.03666, 0.0,
            +3.08214, -0.37871, -0.03354, 0.0, +2.86197, -0.35542, -0.03067, 0.0, +2.65285, -0.33270, -0.02800, 0.0, +2.45568, -0.31075, -0.02556, 0.0,
            +2.26865, -0.28947, -0.02330, 0.0, +2.09183, -0.26889, -0.02122, 0.0, +1.92374, -0.24898, -0.01930, 0.0, +1.76572, -0.22991, -0.01753, 0.0,
            +1.61595, -0.21155, -0.01589, 0.0, +1.47600, -0.19411, -0.01440, 0.0, +1.34405, -0.17747, -0.01302, 0.0, +1.22181, -0.16189, -0.01176, 0.0,
            +1.10773, -0.14727, -0.01060, 0.0, +1.00305, -0.13378, -0.00954, 0.0, +0.90716, -0.12137, -0.00858, 0.0, +0.82139, -0.11020, -0.00773, 0.0,
            +0.74466, -0.10017, -0.00697, 0.0, +0.67637, -0.09120, -0.00631, 0.0, +0.61518, -0.08315, -0.00571, 0.0, +0.56049, -0.07594, -0.00518, 0.0,
            +0.51097, -0.06939, -0.00470, 0.0, +0.46462, -0.06325, -0.00425, 0.0, +0.42008, -0.05731, -0.00383, 0.0, +0.37742, -0.05161, -0.00343, 0.0,
            +0.33796, -0.04630, -0.00305, 0.0, +0.30196, -0.04144, -0.00272, 0.0, +0.26980, -0.03708, -0.00242, 0.0, +0.24065, -0.03310, -0.00216, 0.0,
            +0.21505, -0.02960, -0.00193, 0.0, +0.19221, -0.02648, -0.00172, 0.0, +0.17238, -0.02376, -0.00154, 0.0, +0.15483, -0.02136, -0.00138, 0.0,
            +0.13963, -0.01927, -0.00124, 0.0, +0.12619, -0.01742, -0.00112, 0.0, +0.11421, -0.01577, -0.00102, 0.0, +0.10320, -0.01425, -0.00092, 0.0,
            +0.09311, -0.01286, -0.00083, 0.0, +0.08395, -0.01159, -0.00075, 0.0, +0.07572, -0.01046, -0.00067, 0.0, +0.06834, -0.00944, -0.00061, 0.0,
            +0.06165, -0.00851, -0.00055, 0.0, +0.05561, -0.00768, -0.00049, 0.0, +0.05009, -0.00692, -0.00045, 0.0, +0.04513, -0.00623, -0.00040, 0.0,
            +0.04059, -0.00560, -0.00036, 0.0, +0.03653, -0.00504, -0.00033, 0.0, +0.03281, -0.00453, -0.00029, 0.0, +0.02951, -0.00407, -0.00026, 0.0,
            +0.02652, -0.00366, -0.00024, 0.0, +0.02386, -0.00330, -0.00021, 0.0, +0.02146, -0.00296, -0.00019, 0.0, +0.01930, -0.00267, -0.00017, 0.0,
            +0.01734, -0.00239, -0.00015, 0.0, +0.01557, -0.00215, -0.00014, 0.0, +0.01396, -0.00193, -0.00012, 0.0, +0.01250, -0.00173, -0.00011, 0.0,
            +0.01118, -0.00154, -0.00010, 0.0, +0.01000, -0.00138, -0.00009, 0.0, +0.00893, -0.00123, -0.00008, 0.0, +0.00797, -0.00110, -0.00007, 0.0,
            +0.00712, -0.00098, -0.00006, 0.0, +0.00635, -0.00088, -0.00006, 0.0, +0.00567, -0.00078, -0.00005, 0.0, +0.00506, -0.00070, -0.00005, 0.0,
            +0.00453, -0.00062, -0.00004, 0.0, +0.00405, -0.00056, -0.00004, 0.0, +0.00363, -0.00050, -0.00003, 0.0, +0.00326, -0.00045, -0.00003, 0.0
        ]);
    }

    const GasDischargeLines = [
        {
            "name": "Aluminum",
            "wavelengths": [
                390.068, 393.2, 394.4, 396.152, 399.586, 422.681, 458.582, 458.819, 466.68, 489.876,
                490.277, 528.021, 510.752, 528.377, 528.585, 531.232, 531.607, 537.184, 555.706, 555.795,
                559.323, 585.362, 597.194, 600.176, 600.188, 600.642, 606.111, 606.843, 606.853, 607.323,
                618.157, 618.168, 618.228, 618.245, 618.342, 620.152, 620.17, 622.618, 623.178, 624.336,
                633.574, 669.602, 669.867, 708.397, 708.464
            ],
            "strengths": [
                450, 60, 4500, 9000, 110, 290, 150, 110, 550, 110, 110, 150, 70, 290, 150, 110, 220, 150,
                180, 110, 450, 110, 220, 290, 220, 450, 150, 290, 110, 450, 110, 150, 290, 220, 450, 450,
                360, 290, 360, 450, 450, 360, 230, 60, 70
            ]
        },
        {
            "name": "Argon",
            "wavelengths": [
                392.572, 392.862, 393.255, 394.61, 394.751, 394.898, 397.936, 399.479, 401.386, 403.381,
                403.546, 404.289, 404.442, 405.292, 407.201, 407.239, 407.663, 407.957, 408.239, 410.391,
                413.172, 415.609, 415.859, 416.418, 417.93, 418.188, 419.071, 419.103, 419.832, 420.067,
                421.867, 422.264, 422.699, 422.816, 423.722, 425.119, 425.936, 426.629, 426.653, 427.217,
                427.753, 428.29, 430.01, 430.065, 430.924, 433.12, 433.203, 433.356, 433.534, 434.517,
                434.806, 435.221, 436.207, 436.783, 437.075, 437.133, 437.595, 437.967, 438.506, 440.01,
                440.099, 442.6, 443.019, 443.1, 443.384, 443.946, 444.888, 447.476, 448.181, 451.073,
                452.232, 453.055, 454.505, 456.441, 457.935, 458.99, 459.61, 460.957, 462.844, 463.723,
                465.79, 470.232, 472.159, 472.687, 473.205, 473.591, 476.487, 480.602, 484.781, 486.591,
                487.986, 488.904, 490.475, 493.321, 496.508, 500.933, 501.716, 506.204, 509.05, 514.178,
                514.531, 515.139, 516.229, 516.577, 518.775, 521.681, 522.127, 542.135, 545.165, 549.587,
                550.611, 555.87, 557.254, 560.673, 565.07, 573.952, 583.426, 586.031, 588.262, 588.858,
                591.209, 592.881, 594.267, 598.73, 599.9, 602.515, 603.213, 604.322, 605.272, 605.937,
                609.88, 610.564, 611.492, 614.544, 617.017, 617.228, 617.31, 621.25, 621.594, 624.312,
                629.687, 630.766, 636.958, 638.472, 641.631, 648.308, 653.811, 660.485, 663.822, 663.974,
                664.37, 666.068, 666.405, 666.636, 667.728, 668.429, 675.283, 675.616, 676.661, 686.127,
                687.129, 687.958, 688.817, 693.766, 695.148, 696.025, 696.543, 703.025, 706.722, 706.874,
                710.748, 712.582, 714.704, 715.884
            ],
            "strengths": [
                35, 50, 25, 70, 7, 35, 20, 35, 50, 50, 20, 150, 50, 100, 200, 70, 25, 35, 25, 150, 300,
                35, 400, 50, 35, 50, 100, 50, 200, 400, 25, 25, 25, 100, 100, 25, 200, 100, 70, 150, 550,
                20, 100, 25, 70, 200, 50, 100, 50, 25, 800, 50, 25, 50, 200, 70, 50, 150, 50, 70, 200,
                400, 150, 50, 50, 20, 35, 100, 200, 100, 20, 20, 400, 20, 400, 400, 15, 550, 7, 35, 400,
                15, 20, 550, 50, 300, 800, 550, 150, 50, 800, 70, 20, 35, 200, 50, 70, 70, 20, 100, 70, 5,
                15, 25, 20, 20, 7, 5, 10, 25, 5, 25, 10, 35, 20, 10, 5, 10, 15, 25, 50, 15, 5, 7, 5, 5,
                70, 35, 10, 20, 7, 10, 100, 10, 7, 150, 10, 10, 5, 25, 7, 15, 7, 20, 70, 25, 15, 15, 25,
                20, 50, 5, 5, 25, 100, 35, 150, 5, 15, 20, 150, 5, 10, 50, 7, 7, 9999, 150, 9999, 100, 25,
                25, 1000, 15
            ]
        },
        {
            "name": "Barium",
            "wavelengths": [
                405.371, 408.096, 408.487, 408.725, 408.734, 413.065, 413.243, 416.6, 417.935, 422.396,
                423.956, 424.26, 426.442, 426.792, 428.31, 429.116, 430.518, 430.927, 430.927, 432.3,
                432.511, 433.291, 435.033, 435.953, 440.254, 440.683, 441.366, 443.189, 446.709, 448.898,
                449.364, 450.435, 450.592, 452.317, 452.493, 455.403, 457.385, 457.964, 458.976, 459.182,
                459.972, 460.498, 461.992, 462.833, 467.362, 469.161, 469.744, 469.91, 470.042, 472.471,
                472.643, 487.765, 489.993, 490.285, 493.408, 494.731, 495.709, 499.564, 501.295, 501.295,
                504.955, 505.496, 509.754, 510.225, 513.454, 515.988, 525.38, 530.57, 542.455, 543.732,
                551.904, 553.548, 553.587, 559.331, 568.0, 568.018, 577.762, 578.404, 580.023, 580.568,
                581.881, 582.627, 585.368, 590.764, 597.17, 597.846, 599.709, 599.8, 601.947, 606.311,
                608.339, 610.199, 611.078, 612.923, 614.171, 634.168, 637.711, 638.376, 641.111, 645.085,
                648.291, 649.69, 649.876, 652.617, 652.731, 659.533, 665.411, 667.527, 669.384, 676.948,
                677.186, 686.569, 686.791, 687.408, 687.408, 696.148
            ],
            "strengths": [
                18, 13, 43, 8, 9, 910, 309, 103, 14, 34, 25, 17, 42, 8, 530, 26, 6, 4, 4, 61, 18, 39, 271,
                9, 273, 29, 13, 374, 30, 234, 137, 5, 209, 327, 188, 9300, 230, 580, 22, 28, 108, 28, 40,
                63, 133, 306, 15, 24, 80, 8, 371, 66, 273, 63, 6900, 25, 10, 5, 5, 5, 10, 19, 10, 12, 10,
                80, 5, 6, 199, 5, 280, 1830, 112, 5, 21, 41, 740, 5, 203, 419, 14, 610, 331, 94, 700, 8,
                620, 10, 610, 840, 5, 13, 880, 5, 1510, 900, 10, 10, 3, 580, 1770, 900, 1060, 8, 890, 740,
                9, 462, 454, 6, 4, 62, 8, 7, 7, 1
            ]
        },
        {
            "name": "Calcium",
            "wavelengths": [
                362.411, 363.075, 363.097, 364.441, 364.477, 364.499, 367.529, 367.821, 368.37, 369.411,
                369.436, 370.603, 373.69, 373.938, 374.835, 375.029, 375.334, 375.567, 375.839, 387.048,
                387.254, 387.256, 387.578, 387.58, 388.91, 392.348, 393.366, 393.529, 394.604, 394.89,
                395.705, 396.847, 397.257, 397.371, 408.177, 409.71, 409.853, 409.857, 410.982, 411.028,
                415.357, 416.431, 418.42, 420.618, 420.724, 422.007, 422.673, 423.374, 424.046, 424.074,
                428.301, 428.439, 428.936, 429.899, 430.253, 430.281, 430.774, 431.865, 432.919, 433.357,
                435.508, 435.838, 439.959, 440.629, 442.544, 443.13, 443.496, 443.569, 445.478, 445.589,
                445.661, 447.204, 447.923, 448.918, 449.988, 451.659, 452.694, 457.212, 457.855, 458.14,
                458.147, 458.587, 458.596, 468.527, 470.883, 471.627, 471.674, 472.103, 479.997, 485.917,
                487.813, 500.148, 500.895, 501.997, 502.114, 504.162, 505.007, 518.885, 523.182, 524.737,
                526.171, 526.224, 526.424, 526.556, 527.027, 527.198, 528.527, 530.132, 530.722, 532.129,
                532.806, 533.919, 534.947, 551.298, 557.058, 557.906, 558.197, 558.876, 559.012, 559.447,
                559.849, 560.129, 560.285, 585.745, 592.272, 592.369, 606.998, 610.272, 612.222, 616.129,
                616.217, 616.376, 616.644, 616.906, 616.956, 617.322, 621.398, 629.489, 637.011, 638.755,
                642.451, 643.907, 644.981, 645.56, 645.687, 646.257, 647.166, 648.535, 649.378, 649.965,
                653.878, 654.224, 657.278, 671.769, 714.815, 720.219, 730.869, 732.615
            ],
            "strengths": [
                15, 17, 14, 20, 14, 8, 5, 6, 30, 40, 10, 170, 180, 10, 6, 8, 9, 20, 30, 9, 11, 11, 12, 12,
                6, 6, 230, 9, 6, 15, 17, 220, 8, 18, 15, 50, 15, 15, 60, 30, 15, 15, 15, 40, 18, 50, 50,
                17, 15, 16, 24, 15, 22, 22, 25, 20, 23, 22, 15, 16, 20, 15, 19, 17, 25, 17, 26, 25, 30,
                28, 20, 20, 10, 20, 19, 18, 23, 18, 22, 23, 23, 24, 24, 20, 11, 11, 30, 40, 40, 10, 25,
                70, 10, 80, 40, 23, 10, 25, 10, 11, 22, 23, 22, 24, 25, 13, 60, 10, 70, 11, 10, 50, 27,
                23, 11, 10, 25, 27, 24, 26, 25, 24, 24, 30, 10, 10, 13, 27, 29, 22, 30, 22, 24, 26, 28,
                10, 12, 11, 11, 10, 12, 35, 30, 22, 80, 34, 29, 12, 32, 28, 10, 10, 23, 30, 33, 31, 10, 33
            ]
        },
        {
            "name": "Carbon",
            "wavelengths": [
                391.898, 392.069, 407.452, 407.585, 426.7, 426.726, 477.175, 493.205, 505.217, 513.294,
                513.328, 514.349, 514.516, 515.109, 538.034, 564.807, 566.247, 588.977, 589.159, 600.113,
                600.603, 600.718, 601.068, 601.322, 601.484, 657.805, 658.288, 658.761, 678.39, 711.318,
                711.519, 711.563, 711.699, 711.99
            ],
            "strengths": [
                570, 800, 250, 350, 800, 1000, 200, 200, 200, 350, 350, 350, 570, 400, 300, 250, 350, 570,
                350, 200, 250, 110, 150, 300, 250, 800, 570, 200, 250, 250, 250, 250, 200, 350
            ]
        },
        {
            "name": "Helium",
            "wavelengths": [
                396.473, 400.927, 402.619, 402.636, 412.082, 412.099, 414.376, 438.793, 443.755, 447.148,
                447.168, 468.54, 468.57, 471.315, 471.338, 492.193, 501.568, 504.774, 541.152, 587.562,
                587.597, 656.01, 667.815, 686.748, 706.519, 706.571
            ],
            "strengths": [
                20, 1, 50, 5, 12, 2, 3, 10, 3, 200, 25, 6, 30, 30, 4, 20, 100, 10, 5, 500, 100, 8, 100, 3,
                200, 30
            ]
        },
        {
            "name": "Hydrogen",
            "wavelengths": [
                397.007, 410.174, 434.047, 486.133, 656.272, 656.285
            ],
            "strengths": [
                8, 15, 30, 80, 120, 180
            ]
        },
        {
            "name": "Iron",
            "wavelengths": [
                400.524, 400.971, 401.453, 402.187, 404.064, 404.581, 406.359, 406.698, 406.798, 407.174,
                407.663, 410.074, 410.749, 411.854, 412.76, 413.206, 413.468, 413.7, 414.342, 414.387,
                415.39, 415.45, 415.68, 417.274, 417.491, 417.564, 417.759, 418.175, 418.489, 418.704,
                418.78, 419.143, 419.532, 419.83, 419.91, 420.203, 420.398, 420.67, 421.034, 421.618,
                421.936, 422.221, 422.596, 422.742, 423.36, 423.594, 423.88, 424.743, 425.012, 425.079,
                425.832, 426.047, 427.115, 427.176, 428.24, 429.146, 429.923, 430.79, 431.508, 432.576,
                435.273, 436.977, 437.593, 438.354, 440.475, 441.512, 442.73, 446.165, 446.655, 447.602,
                448.217, 448.225, 448.974, 452.861, 464.743, 473.677, 485.974, 487.132, 487.214, 487.821,
                489.075, 489.149, 490.331, 491.899, 492.05, 495.76, 500.186, 500.191, 500.571, 500.612,
                501.207, 501.494, 503.077, 504.176, 504.982, 505.163, 507.475, 510.073, 511.036, 513.369,
                513.925, 513.946, 515.191, 516.227, 516.628, 516.749, 516.889, 517.16, 519.145, 519.234,
                519.494, 520.458, 521.518, 521.627, 521.685, 522.686, 522.715, 523.294, 526.026, 526.656,
                526.954, 527.036, 528.179, 528.362, 530.23, 532.418, 532.804, 532.853, 533.29, 533.993,
                534.102, 536.487, 536.747, 536.996, 537.149, 538.337, 539.317, 539.713, 540.412, 540.577,
                541.091, 541.52, 542.407, 542.783, 542.97, 543.452, 544.687, 545.545, 545.561, 546.593,
                546.694, 548.231, 549.752, 550.146, 550.62, 550.678, 556.962, 557.284, 558.676, 561.564,
                562.454, 566.252, 576.299, 586.235, 591.411, 598.696, 596.171, 596.24, 606.548, 610.216,
                613.661, 613.769, 614.773, 614.924, 619.156, 621.343, 621.928, 623.073, 623.837, 624.632,
                624.756, 625.255, 639.36, 640.0, 641.165, 641.69, 642.135, 643.084, 644.643, 645.638,
                649.498, 651.605, 654.624, 659.291, 667.799
            ],
            "strengths": [
                400, 60, 80, 100, 50, 4000, 1500, 50, 50, 1200, 40, 40, 40, 150, 40, 400, 80, 40, 200,
                800, 40, 50, 60, 50, 60, 50, 50, 120, 50, 120, 120, 80, 40, 150, 40, 300, 40, 80, 80, 400,
                100, 50, 50, 200, 100, 250, 50, 50, 200, 300, 40, 800, 250, 1200, 1200, 80, 250, 1200,
                150, 1500, 80, 80, 800, 3000, 1200, 300, 600, 400, 120, 80, 80, 200, 50, 50, 30, 30, 50,
                120, 60, 30, 100, 250, 30, 150, 500, 1500, 80, 18, 30, 100, 60, 30, 25, 150, 30, 30, 25,
                18, 150, 40, 40, 100, 25, 30, 80, 2500, 80, 500, 50, 80, 200, 30, 25, 150, 18, 60, 1000,
                250, 18, 100, 1200, 800, 30, 60, 25, 150, 800, 300, 100, 80, 500, 25, 40, 50, 400, 60, 40,
                300, 60, 250, 30, 60, 60, 30, 250, 100, 200, 25, 120, 16, 20, 16, 25, 20, 18, 30, 30, 60,
                120, 200, 20, 50, 20, 30, 30, 30, 18, 30, 40, 30, 40, 40, 30, 20, 40, 30, 30, 40, 20, 20,
                80, 30, 20, 30, 20, 20, 20, 30, 20, 200, 60, 20, 20, 20, 40
            ]
        },
        {
            "name": "Krypton",
            "wavelengths": [
                390.618, 392.008, 399.484, 399.779, 405.704, 406.513, 408.834, 409.873, 410.925, 414.512,
                425.058, 427.397, 428.297, 429.292, 430.049, 431.781, 431.855, 431.958, 432.298, 435.136,
                435.548, 436.264, 436.969, 437.612, 438.654, 439.997, 442.519, 443.169, 443.681, 445.392,
                446.369, 447.501, 448.988, 450.235, 452.314, 455.661, 457.721, 458.298, 459.28, 461.529,
                461.917, 463.389, 465.888, 468.04, 469.13, 469.436, 473.9, 476.244, 476.574, 481.176,
                482.518, 483.208, 484.661, 485.72, 494.559, 502.24, 508.652, 512.573, 520.832, 530.866,
                533.341, 546.817, 556.222, 557.029, 558.039, 564.956, 568.189, 569.035, 583.286, 587.091,
                599.222, 599.385, 605.613, 642.018, 642.103, 645.629, 657.007, 669.923, 690.468
            ],
            "strengths": [
                150, 200, 100, 100, 300, 300, 500, 250, 100, 250, 150, 1000, 100, 600, 200, 500, 400,
                1000, 150, 100, 3000, 500, 200, 800, 300, 200, 100, 500, 600, 600, 800, 800, 400, 600,
                400, 200, 800, 300, 150, 500, 1000, 800, 2000, 500, 100, 200, 3000, 300, 1000, 300, 300,
                800, 700, 150, 300, 200, 250, 400, 500, 200, 500, 200, 500, 2000, 80, 100, 400, 200, 100,
                3000, 200, 60, 60, 300, 100, 200, 150, 60, 100
            ]
        },
        {
            "name": "Magnesium",
            "wavelengths": [
                390.386, 393.84, 398.421, 398.675, 405.469, 405.75, 407.506, 408.183, 416.51, 416.727,
                435.191, 435.453, 438.038, 438.464, 439.059, 442.8, 443.399, 443.649, 443.66, 448.116,
                448.133, 453.429, 457.11, 462.13, 470.299, 473.003, 473.959, 473.971, 485.11, 516.733,
                517.268, 518.361, 526.421, 526.437, 534.598, 540.154, 550.96, 552.841, 571.109, 578.531,
                578.556, 591.643, 591.816, 631.872, 631.924, 631.949, 634.674, 634.696, 654.597, 662.044,
                662.057, 663.083, 678.145, 678.785, 681.286, 681.927, 689.49, 696.54, 706.041
            ],
            "strengths": [
                4, 6, 1, 8, 2, 10, 3, 2, 4, 15, 20, 6, 6, 9, 10, 8, 9, 5, 4, 14, 12, 6, 28, 3, 7, 10, 6,
                5, 7, 75, 22, 400, 8, 7, 1, 9, 2, 6, 30, 5, 4, 7, 6, 10, 9, 7, 10, 9, 11, 5, 6, 2, 7, 8,
                7, 8, 4, 6, 8
            ]
        },
        {
            "name": "Mercury",
            "wavelengths": [
                404.656, 407.783, 410.805, 433.922, 434.749, 435.833, 439.862, 466.028, 485.572, 488.3,
                488.991, 491.607, 497.037, 498.064, 510.27, 512.064, 512.845, 513.794, 529.074, 531.678,
                535.405, 538.463, 546.074, 554.963, 567.586, 576.96, 578.966, 579.066, 580.378, 585.925,
                587.173, 587.198, 607.272, 614.95, 623.44, 652.113, 671.643, 690.752, 708.19, 709.186
            ],
            "strengths": [
                1800, 150, 40, 125, 240, 2000, 100, 90, 80, 5, 5, 80, 5, 5, 20, 40, 100, 20, 20, 5, 60,
                30, 1100, 30, 160, 1240, 1100, 280, 140, 60, 60, 20, 20, 1000, 30, 80, 160, 250, 250, 200
            ]
        },
        {
            "name": "Neon",
            "wavelengths": [
                421.974, 423.385, 425.065, 436.986, 437.94, 437.955, 438.506, 439.199, 439.799, 440.93,
                441.322, 442.139, 442.852, 442.863, 443.09, 443.094, 445.705, 452.272, 453.775, 454.038,
                456.906, 470.44, 470.886, 471.007, 471.207, 471.535, 475.273, 478.893, 479.022, 482.734,
                488.492, 500.516, 503.775, 514.494, 533.078, 534.109, 534.328, 540.056, 556.277, 565.666,
                571.923, 574.83, 576.442, 580.445, 582.016, 585.249, 587.283, 588.19, 590.246, 590.643,
                594.483, 596.547, 597.463, 597.553, 598.791, 603.0, 607.434, 609.616, 612.845, 614.306,
                616.359, 618.215, 621.728, 626.65, 630.479, 633.443, 638.299, 640.225, 650.653, 653.288,
                659.895, 665.209, 667.828, 671.704, 692.947, 702.405, 703.241, 705.129, 705.911
            ],
            "strengths": [
                150, 100, 120, 120, 70, 150, 100, 200, 150, 150, 100, 100, 100, 100, 150, 150, 120, 100,
                10, 10, 100, 15, 12, 10, 10, 15, 10, 12, 10, 10, 10, 4, 10, 10, 25, 20, 8, 60, 5, 10, 5,
                12, 80, 12, 40, 500, 100, 100, 60, 60, 100, 100, 100, 120, 80, 100, 100, 80, 60, 100, 120,
                250, 150, 150, 60, 100, 120, 200, 150, 60, 150, 70, 90, 20, 100, 90, 100, 50, 80
            ]
        },
        {
            "name": "Nitrogen",
            "wavelengths": [
                391.9, 395.585, 399.5, 403.508, 404.131, 404.353, 409.994, 410.995, 417.616, 422.774,
                423.691, 423.705, 424.178, 443.274, 444.703, 453.041, 460.148, 460.716, 461.387, 462.139,
                463.054, 464.308, 478.813, 480.329, 484.738, 489.511, 491.494, 493.512, 495.023, 496.398,
                498.737, 499.436, 500.148, 500.27, 500.515, 500.732, 501.062, 501.639, 502.566, 504.51,
                528.12, 529.268, 549.567, 553.536, 566.663, 567.602, 567.956, 568.621, 571.077, 574.73,
                575.25, 576.475, 582.954, 585.404, 592.781, 593.178, 594.024, 594.165, 595.239, 599.943,
                600.847, 616.776, 637.962, 641.165, 642.064, 642.302, 642.832, 643.768, 644.094, 645.79,
                646.844, 648.205, 648.27, 648.375, 648.171, 648.48, 649.122, 649.954, 650.631, 661.056,
                662.254, 663.694, 664.496, 664.65, 665.346, 665.651, 672.262
            ],
            "strengths": [
                360, 450, 1000, 360, 550, 360, 140, 185, 285, 285, 285, 220, 450, 285, 650, 360, 550, 450,
                360, 450, 870, 550, 285, 450, 180, 285, 160, 210, 160, 350, 285, 450, 650, 360, 870, 550,
                450, 360, 360, 550, 185, 140, 450, 285, 650, 550, 870, 450, 450, 285, 700, 240, 265, 235,
                360, 550, 285, 650, 285, 160, 210, 285, 360, 185, 210, 210, 210, 185, 235, 185, 300, 750,
                360, 300, 265, 325, 160, 210, 185, 750, 185, 185, 235, 185, 235, 210, 185
            ]
        },
        {
            "name": "Oxygen",
            "wavelengths": [
                391.196, 391.929, 394.729, 394.748, 394.759, 395.437, 395.461, 397.326, 398.22, 406.99,
                407.216, 407.587, 408.391, 408.714, 408.927, 409.724, 410.5, 411.922, 413.281, 414.606,
                415.33, 418.546, 418.979, 423.327, 425.374, 425.398, 427.547, 430.378, 431.714, 433.686,
                434.556, 434.943, 436.69, 436.825, 439.595, 441.491, 441.698, 444.821, 445.238, 446.545,
                446.628, 446.783, 446.941, 459.097, 459.617, 460.939, 463.885, 464.181, 464.914, 465.084,
                466.164, 467.623, 469.921, 470.536, 492.46, 494.306, 532.91, 532.968, 533.074, 543.518,
                543.578, 543.686, 557.734, 595.839, 595.858, 599.528, 604.623, 604.644, 604.649, 610.627,
                615.598, 615.677, 615.818, 625.683, 626.155, 636.634, 637.432, 645.36, 645.444, 645.598,
                660.491, 665.383, 700.192, 700.223, 715.67
            ],
            "strengths": [
                450, 160, 185, 160, 140, 220, 100, 450, 220, 160, 285, 450, 80, 50, 150, 110, 220, 285,
                160, 50, 220, 285, 450, 80, 50, 50, 50, 50, 285, 160, 220, 285, 220, 100, 220, 450, 285,
                160, 160, 50, 50, 50, 50, 360, 285, 80, 160, 360, 450, 160, 360, 285, 220, 285, 160, 220,
                135, 160, 190, 90, 110, 135, 120, 160, 190, 80, 160, 190, 110, 100, 400, 450, 490, 80,
                100, 100, 100, 320, 360, 400, 80, 100, 360, 450, 210
            ]
        },
        {
            "name": "Potassium",
            "wavelengths": [
                360.888, 361.849, 362.642, 368.154, 371.66, 372.134, 373.913, 374.442, 376.736, 378.319,
                380.014, 381.656, 381.75, 387.374, 387.862, 389.792, 392.3, 392.636, 394.253, 395.521,
                396.672, 397.258, 399.51, 400.124, 401.21, 404.259, 409.369, 411.499, 413.472, 414.919,
                418.624, 422.297, 422.567, 426.34, 430.5, 430.91, 434.003, 438.816, 446.665, 450.533,
                459.565, 460.845, 465.938, 482.923, 494.329, 500.56, 505.627, 531.024, 547.013, 564.273,
                577.232, 596.964, 612.027, 624.659, 630.729, 642.796, 659.5
            ],
            "strengths": [
                5, 6, 4, 6, 5, 5, 5, 5, 6, 6, 6, 6, 7, 5, 4, 8, 5, 5, 6, 6, 6, 6, 6, 7, 5, 6, 5, 6, 7, 7,
                8, 7, 7, 7, 7, 7, 5, 7, 5, 6, 5, 8, 5, 9, 6, 8, 7, 5, 6, 5, 4, 2, 8, 6, 7, 5, 2
            ]
        },
        {
            "name": "Silicon",
            "wavelengths": [
                390.552, 395.574, 397.746, 399.177, 399.801, 407.545, 407.678, 410.294, 412.807, 413.089,
                418.335, 419.072, 419.813, 462.142, 462.172, 478.299, 479.221, 479.232, 488.32, 490.699,
                493.28, 494.761, 500.606, 504.103, 505.598, 518.19, 518.525, 519.286, 520.241, 529.519,
                540.534, 541.724, 542.892, 543.289, 543.862, 544.726, 545.449, 545.645, 546.643, 546.687,
                546.921, 549.323, 549.645, 551.754, 554.074, 557.666, 562.222, 563.297, 563.948, 564.561,
                566.066, 566.555, 566.956, 568.144, 568.448, 568.881, 569.043, 570.111, 570.137, 570.637,
                570.84, 574.767, 575.363, 575.422, 576.298, 577.215, 578.038, 578.573, 579.307, 579.49,
                579.786, 580.047, 580.674, 582.78, 584.613, 586.748, 586.84, 587.376, 591.522, 594.855,
                595.756, 597.893, 606.745, 608.006, 608.667, 612.502, 613.157, 613.185, 614.249, 614.502,
                615.513, 623.732, 623.829, 624.381, 624.447, 625.419, 633.195, 634.71, 637.136, 652.661,
                652.72, 655.546, 666.052, 666.5, 667.188, 669.938, 671.704, 672.185, 674.164, 675.028,
                681.845, 682.982, 684.857, 697.652, 700.357, 700.588, 701.728, 701.765, 703.49, 716.469,
                716.555, 718.489, 719.358, 719.39
            ],
            "strengths": [
                300, 10, 10, 15, 10, 20, 15, 70, 300, 500, 10, 100, 50, 100, 150, 50, 35, 80, 15, 20, 20,
                30, 40, 1000, 1000, 100, 100, 200, 500, 30, 100, 15, 15, 15, 100, 20, 15, 100, 500, 500,
                100, 40, 200, 35, 100, 150, 30, 100, 200, 90, 150, 80, 1000, 30, 120, 300, 100, 90, 200,
                100, 160, 45, 45, 45, 45, 70, 70, 30, 90, 30, 100, 150, 200, 30, 50, 10, 300, 40, 150,
                200, 500, 500, 10, 20, 10, 90, 85, 90, 100, 100, 160, 160, 40, 125, 125, 180, 45, 1000,
                1000, 45, 45, 45, 50, 15, 100, 20, 50, 100, 30, 20, 30, 50, 30, 80, 180, 180, 30, 90, 250,
                70, 200, 70, 65, 30
            ]
        },
        {
            "name": "Sodium",
            "wavelengths": [
                371.107, 411.37, 412.308, 423.326, 423.899, 424.09, 424.208, 424.208, 424.941, 425.252,
                427.364, 427.679, 427.679, 428.784, 429.101, 429.248, 429.286, 430.881, 430.904, 432.091,
                432.14, 432.462, 432.462, 433.729, 434.149, 434.411, 434.474, 436.86, 437.522, 438.749,
                439.003, 439.281, 439.334, 439.334, 440.512, 441.988, 442.325, 444.67, 444.741, 445.474,
                445.523, 445.721, 447.463, 447.88, 448.167, 449.015, 449.087, 449.418, 449.766, 449.766,
                449.962, 450.697, 451.921, 452.498, 453.332, 454.163, 454.519, 455.153, 459.092, 466.481,
                466.856, 466.856, 472.223, 473.11, 474.167, 474.794, 475.182, 476.879, 478.879, 497.854,
                498.281, 514.884, 515.34, 519.165, 520.855, 540.046, 541.455, 568.263, 568.819, 568.821,
                588.995, 589.592, 615.423, 616.075, 617.525, 619.926, 623.468, 626.001, 627.474, 636.115,
                636.641, 651.421, 652.468, 653.07, 654.404, 654.575, 655.243, 737.323, 737.349
            ],
            "strengths": [
                850, 300, 250, 250, 6, 250, 10, 10, 1, 2, 15, 20, 20, 2, 3, 250, 250, 250, 250, 250, 30,
                40, 40, 250, 3, 250, 5, 200, 200, 200, 40, 250, 60, 60, 200, 5, 8, 200, 200, 200, 200,
                200, 200, 200, 200, 200, 200, 60, 100, 100, 200, 200, 200, 200, 200, 10, 15, 200, 160,
                120, 200, 200, 160, 160, 160, 20, 30, 160, 100, 200, 400, 40, 80, 100, 80, 70, 90, 280,
                70, 560, 80000, 40000, 120, 240, 60, 70, 70, 80, 80, 70, 70, 90, 80, 130, 130, 130, 80,
                20, 10
            ]
        },
        {
            "name": "Strontium",
            "wavelengths": [
                403.038, 403.238, 407.771, 409.403, 409.702, 410.563, 416.18, 421.552, 429.857, 430.545,
                433.58, 443.804, 460.733, 468.508, 472.228, 474.192, 478.432, 481.188, 483.208, 485.504,
                486.87, 487.249, 487.606, 487.632, 489.198, 496.226, 496.794, 507.109, 513.034, 515.607,
                515.826, 522.22, 522.511, 522.927, 523.855, 525.69, 525.771, 526.221, 528.832, 532.982,
                539.103, 544.348, 545.084, 546.39, 548.084, 548.612, 550.417, 552.183, 553.481, 554.005,
                554.336, 566.466, 568.972, 597.01, 634.575, 636.394, 636.996, 638.075, 638.65, 638.824,
                640.847, 644.668, 646.579, 650.4, 654.679, 655.026, 661.726, 664.354, 679.105, 687.838,
                689.259
            ],
            "strengths": [
                1300, 300, 46000, 30, 30, 30, 200, 32000, 9, 340, 35, 350, 65000, 9, 3200, 2200, 1400,
                4800, 3600, 500, 600, 3000, 600, 2000, 1000, 8000, 1300, 30, 30, 800, 35, 1400, 2000,
                2000, 2800, 4800, 40, 30, 30, 350, 30, 40, 1500, 30, 7000, 1100, 3500, 2600, 2000, 2000,
                250, 30, 30, 200, 250, 250, 350, 1000, 900, 600, 9000, 250, 250, 5500, 1000, 1700, 3000,
                800, 1800, 4800, 1200
            ]
        },
        {
            "name": "Sulfur",
            "wavelengths": [
                390.2, 393.33, 412.08, 414.23, 414.51, 415.31, 416.27, 469.41, 469.54, 469.62, 471.62,
                481.55, 492.41, 492.53, 499.35, 542.86, 543.28, 545.38, 547.36, 550.97, 556.49, 560.61,
                564.0, 564.03, 564.7, 565.99, 566.47, 570.61, 581.92, 605.27, 628.64, 628.71, 630.55,
                631.27, 638.49, 639.73, 639.8, 641.37, 674.36, 674.88, 675.72, 757.9
            ],
            "strengths": [
                285, 360, 450, 280, 360, 450, 450, 450, 285, 160, 280, 450, 360, 450, 285, 360, 650, 1000,
                1000, 1000, 280, 1000, 450, 450, 280, 650, 450, 160, 450, 450, 280, 450, 450, 450, 280,
                280, 280, 360, 160, 285, 450, 450
            ]
        },
        {
            "name": "Xenon",
            "wavelengths": [
                390.791, 403.759, 405.746, 409.889, 415.804, 418.01, 419.315, 420.848, 420.947, 421.372,
                421.56, 422.3, 423.825, 424.538, 425.157, 429.64, 431.051, 433.052, 436.92, 437.378,
                439.32, 439.577, 440.688, 441.607, 444.813, 446.219, 448.086, 452.186, 473.415, 479.262,
                480.702, 482.971, 484.329, 491.651, 492.315, 497.171, 497.271, 498.877, 499.117, 502.828,
                504.492, 508.062, 512.242, 512.57, 517.882, 518.804, 519.137, 519.21, 526.044, 526.195,
                529.222, 530.927, 531.387, 533.933, 536.32, 536.807, 537.239, 539.28, 541.915, 543.896,
                544.545, 545.045, 546.039, 547.261, 549.486, 552.553, 553.107, 556.662, 561.667, 565.938,
                566.756, 567.091, 569.575, 569.961, 571.61, 572.691, 575.103, 575.865, 577.639, 581.596,
                582.389, 582.48, 587.502, 589.329, 589.499, 590.513, 593.417, 594.553, 597.113, 597.646,
                600.892, 603.62, 605.115, 609.35, 609.759, 610.143, 611.508, 614.645, 617.83, 617.966,
                618.242, 619.407, 619.826, 622.002, 627.082, 627.754, 628.441, 628.601, 630.086, 631.806,
                634.396, 635.635, 637.528, 639.799, 646.97, 647.284, 648.776, 649.872, 650.418, 651.283,
                652.865, 653.316, 659.501, 659.556, 659.725, 659.884, 666.892, 669.432, 672.801, 678.871,
                679.037, 680.574, 682.732, 687.211, 688.216, 691.022, 692.553, 694.211, 697.618, 699.088,
                708.215
            ],
            "strengths": [
                100, 100, 200, 100, 200, 1000, 500, 300, 100, 300, 100, 300, 400, 500, 100, 500, 500,
                1000, 200, 100, 500, 500, 200, 150, 500, 1000, 500, 100, 600, 150, 500, 400, 300, 500,
                500, 200, 400, 300, 100, 200, 200, 1000, 300, 100, 100, 300, 400, 100, 500, 500, 2000,
                300, 1000, 2000, 200, 200, 500, 100, 3000, 800, 300, 200, 400, 1000, 100, 200, 600, 100,
                300, 300, 600, 150, 100, 200, 200, 500, 500, 300, 300, 100, 300, 150, 100, 300, 100, 200,
                100, 500, 300, 2000, 200, 1000, 2000, 600, 1500, 400, 100, 100, 150, 120, 300, 500, 100,
                100, 500, 400, 100, 100, 250, 500, 400, 600, 200, 100, 300, 150, 120, 100, 200, 300, 200,
                100, 1000, 100, 400, 100, 150, 300, 200, 150, 100, 1000, 200, 100, 300, 80, 100, 800, 100,
                2000, 150
            ]
        }
    ];

    var blend_test_frag = "#include \"preamble\"\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(vec3(7.0, 59.0, -7.0), 1.0);\r\n}\r\n";

    var blend_test_pack_frag = "#include \"preamble\"\r\n\r\nuniform sampler2D Tex;\r\n\r\nvoid main() {\r\n    gl_FragColor = texture2D(Tex, vec2(0.5))*(1.0/255.0);\r\n}\r\n";

    var blend_test_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\n\r\nvoid main(void) {\r\n    gl_Position = vec4(Position, 1.0);\r\n}\r\n";

    var bsdf = "float sellmeierIor(vec3 b, vec3 c, float lambda) {\r\n    float lSq = (lambda*1e-3)*(lambda*1e-3);\r\n    return 1.0 + dot((b*lSq)/(lSq - c), vec3(1.0));\r\n}\r\n\r\nfloat tanh(float x) {\r\n    if (abs(x) > 10.0) /* Prevent nasty overflow problems */\r\n        return sign(x);\r\n    float e = exp(-2.0*x);\r\n    return (1.0 - e)/(1.0 + e);\r\n}\r\nfloat atanh(float x) {\r\n    return 0.5*log((1.0 + x)/(1.0 - x));\r\n}\r\n\r\nfloat dielectricReflectance(float eta, float cosThetaI, out float cosThetaT) {\r\n    float sinThetaTSq = eta*eta*(1.0 - cosThetaI*cosThetaI);\r\n    if (sinThetaTSq > 1.0) {\r\n        cosThetaT = 0.0;\r\n        return 1.0;\r\n    }\r\n    cosThetaT = sqrt(1.0 - sinThetaTSq);\r\n\r\n    float Rs = (eta*cosThetaI - cosThetaT)/(eta*cosThetaI + cosThetaT);\r\n    float Rp = (eta*cosThetaT - cosThetaI)/(eta*cosThetaT + cosThetaI);\r\n\r\n    return (Rs*Rs + Rp*Rp)*0.5;\r\n}\r\n\r\nvec2 sampleDiffuse(inout vec4 state, vec2 wi) {\r\n    float x = rand(state)*2.0 - 1.0;\r\n    float y = sqrt(1.0 - x*x);\r\n    return vec2(x, y*sign(wi.y));\r\n}\r\nvec2 sampleMirror(vec2 wi) {\r\n    return vec2(-wi.x, wi.y);\r\n}\r\nvec2 sampleDielectric(inout vec4 state, vec2 wi, float ior) {\r\n    float cosThetaT;\r\n    float eta = wi.y < 0.0 ? ior : 1.0/ior;\r\n    float Fr = dielectricReflectance(eta, abs(wi.y), cosThetaT);\r\n    if (rand(state) < Fr)\r\n        return vec2(-wi.x, wi.y);\r\n    else\r\n        return vec2(-wi.x*eta, -cosThetaT*sign(wi.y));\r\n}\r\n\r\nfloat sampleVisibleNormal(float sigma, float xi, float theta0, float theta1) {\r\n    float sigmaSq = sigma*sigma;\r\n    float invSigmaSq = 1.0/sigmaSq;\r\n    \r\n    float cdf0 = tanh(theta0*0.5*invSigmaSq);\r\n    float cdf1 = tanh(theta1*0.5*invSigmaSq);\r\n\r\n    return 2.0*sigmaSq*atanh(cdf0 + (cdf1 - cdf0)*xi);\r\n}\r\nvec2 sampleRoughMirror(inout vec4 state, vec2 wi, inout vec3 throughput, float sigma) {\r\n    float theta = asin(clamp(wi.x, -1.0, 1.0));\r\n    float theta0 = max(theta - PI_HALF, -PI_HALF);\r\n    float theta1 = min(theta + PI_HALF,  PI_HALF);\r\n\r\n    float thetaM = sampleVisibleNormal(sigma, rand(state), theta0, theta1);\r\n    vec2 m = vec2(sin(thetaM), cos(thetaM));\r\n    vec2 wo = m*(dot(wi, m)*2.0) - wi;\r\n    if (wo.y < 0.0)\r\n        throughput = vec3(0.0);\r\n    return wo;\r\n}\r\nvec2 sampleRoughDielectric(inout vec4 state, vec2 wi, float sigma, float ior)\r\n{\r\n    float theta = asin(min(abs(wi.x), 1.0));\r\n    float theta0 = max(theta - PI_HALF, -PI_HALF);\r\n    float theta1 = min(theta + PI_HALF,  PI_HALF);\r\n\r\n    float thetaM = sampleVisibleNormal(sigma, rand(state), theta0, theta1);\r\n    vec2 m = vec2(sin(thetaM), cos(thetaM));\r\n\r\n    float wiDotM = dot(wi, m);\r\n    \r\n    float cosThetaT;\r\n    float etaM = wiDotM < 0.0 ? ior : 1.0/ior;\r\n    float F = dielectricReflectance(etaM, abs(wiDotM), cosThetaT);\r\n    if (wiDotM < 0.0)\r\n        cosThetaT = -cosThetaT;\r\n\r\n    if (rand(state) < F)\r\n        return 2.0*wiDotM*m - wi;\r\n    else\r\n        return (etaM*wiDotM - cosThetaT)*m - etaM*wi;\r\n}\r\n";

    var compose_frag = "#include \"preamble\"\r\n\r\nuniform sampler2D Frame;\r\nuniform float Exposure;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(pow(texture2D(Frame, vTexCoord).rgb*Exposure, vec3(1.0/2.2)), 1.0);\r\n}\r\n";

    var compose_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\nattribute vec2 TexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main(void) {\r\n    gl_Position = vec4(Position, 1.0);\r\n    vTexCoord = TexCoord;\r\n}\r\n";

    var csg_intersect = "struct Segment {\r\n    float tNear, tFar;\r\n    vec2  nNear, nFar;\r\n};\r\n\r\nSegment segmentIntersection(Segment a, Segment b) {\r\n    return Segment(\r\n        max(a.tNear, b.tNear),\r\n        min(a.tFar,  b.tFar),\r\n        (a.tNear > b.tNear) ? a.nNear : b.nNear,\r\n        (a.tFar  < b.tFar)  ? a.nFar  : b.nFar\r\n    );\r\n}\r\nSegment segmentSubtraction(Segment a, Segment b, float tMin) {\r\n    if (a.tNear >= a.tFar || b.tNear >= b.tFar || a.tFar <= b.tNear || a.tNear >= b.tFar)\r\n        return a;\r\n    \r\n    Segment s1 = Segment(a.tNear, b.tNear, a.nNear, -b.nNear);\r\n    Segment s2 = Segment(b.tFar,  a.tFar, -b.nFar,   a.nFar);\r\n    bool valid1 = s1.tNear <= s1.tFar;\r\n    bool valid2 = s2.tNear <= s2.tFar;\r\n    \r\n    if (valid1 && valid2) {\r\n        if (s1.tFar >= tMin) return s1; else return s2;\r\n    } else {\r\n        if (valid1) return s1; else return s2;\r\n    }\r\n}\r\nvoid segmentCollapse(Segment segment, float matId, inout Intersection isect) {\r\n    segment.tNear = max(segment.tNear, isect.tMin);\r\n    segment.tFar  = min(segment.tFar,  isect.tMax);\r\n    \r\n    if (segment.tNear <= segment.tFar) {\r\n        if (segment.tNear > isect.tMin) {\r\n            isect.tMax = segment.tNear;\r\n            isect.n = segment.nNear;\r\n            isect.mat = matId;\r\n        } else if (segment.tFar < isect.tMax) {\r\n            isect.tMax = segment.tFar;\r\n            isect.n = segment.nFar;\r\n            isect.mat = matId;\r\n        }\r\n    }\r\n}\r\n\r\nSegment horzSpanIntersect(Ray ray, float y, float radius) {\r\n    float dc = (y - ray.pos.y)*ray.invDir.y;\r\n    float dt = ray.dirSign.y*radius*ray.invDir.y;\r\n    return Segment(dc - dt, dc + dt, vec2(0.0, -ray.dirSign.y), vec2(0.0, ray.dirSign.y));\r\n}\r\nSegment vertSpanIntersect(Ray ray, float x, float radius) {\r\n    float dc = (x - ray.pos.x)*ray.invDir.x;\r\n    float dt = ray.dirSign.x*radius*ray.invDir.x;\r\n    return Segment(dc - dt, dc + dt, vec2(-ray.dirSign.x, 0.0), vec2(ray.dirSign.x, 0.0));\r\n}\r\nSegment boxSegmentIntersect(Ray ray, vec2 center, vec2 radius) {\r\n    return segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, radius.y),\r\n        vertSpanIntersect(ray, center.x, radius.x)\r\n    );\r\n}\r\nSegment sphereSegmentIntersect(Ray ray, vec2 center, float radius) {\r\n    Segment result;\r\n    \r\n    vec2 p = ray.pos - center;\r\n    float B = dot(p, ray.dir);\r\n    float C = dot(p, p) - radius*radius;\r\n    float detSq = B*B - C;\r\n    if (detSq >= 0.0) {\r\n        float det = sqrt(detSq);\r\n        result.tNear = -B - det;\r\n        result.tFar  = -B + det;\r\n        result.nNear = (p + ray.dir*result.tNear)*(1.0/radius);\r\n        result.nFar  = (p + ray.dir*result.tFar)*(1.0/radius);\r\n    } else {\r\n        result.tNear =  1e30;\r\n        result.tFar  = -1e30;\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\nvoid biconvexLensIntersect(Ray ray, vec2 center, float h, float d, float r1, float r2, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentIntersection(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        sphereSegmentIntersect(ray, center + vec2(r1 - d, 0.0), r1)),\r\n        sphereSegmentIntersect(ray, center - vec2(r2 - d, 0.0), r2)\r\n    ), matId, isect);\r\n}\r\nvoid biconcaveLensIntersect(Ray ray, vec2 center, float h, float d, float r1, float r2, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentSubtraction(segmentSubtraction(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        vertSpanIntersect(ray, center.x + 0.5*(r2 - r1), 0.5*(abs(r1) + abs(r2)) + d)),\r\n        sphereSegmentIntersect(ray, center + vec2(r2 + d, 0.0), r2), isect.tMin),\r\n        sphereSegmentIntersect(ray, center - vec2(r1 + d, 0.0), r1), isect.tMin\r\n    ), matId, isect);\r\n}\r\nvoid meniscusLensIntersect(Ray ray, vec2 center, float h, float d, float r1, float r2, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentSubtraction(segmentIntersection(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        vertSpanIntersect(ray, center.x + 0.5*r2, 0.5*abs(r2) + d)),\r\n        sphereSegmentIntersect(ray, center + vec2(r1 - sign(r1)*d, 0.0), abs(r1))),\r\n        sphereSegmentIntersect(ray, center + vec2(r2 + sign(r2)*d, 0.0), abs(r2)), isect.tMin\r\n    ), matId, isect);\r\n}\r\nvoid planoConvexLensIntersect(Ray ray, vec2 center, float h, float d, float r, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentIntersection(\r\n        boxSegmentIntersect(ray, center, vec2(d, h)),\r\n        sphereSegmentIntersect(ray, center + vec2(r - d, 0.0), abs(r))\r\n    ), matId, isect);\r\n}\r\nvoid planoConcaveLensIntersect(Ray ray, vec2 center, float h, float d, float r, float matId, inout Intersection isect) {\r\n    segmentCollapse(segmentSubtraction(segmentIntersection(\r\n        horzSpanIntersect(ray, center.y, h),\r\n        vertSpanIntersect(ray, center.x - 0.5*r, 0.5*abs(r) + d)),\r\n        sphereSegmentIntersect(ray, center - vec2(r + d, 0.0), abs(r)), isect.tMin\r\n    ), matId, isect);\r\n}\r\n";

    var init_frag = "#extension GL_EXT_draw_buffers : require\r\n#include \"preamble\"\r\n\r\n#include \"rand\"\r\n\r\nuniform sampler2D RngData;\r\nuniform sampler2D Spectrum;\r\nuniform sampler2D Emission;\r\nuniform sampler2D ICDF;\r\nuniform sampler2D PDF;\r\nuniform vec2 EmitterPos;\r\nuniform vec2 EmitterDir;\r\nuniform float EmitterPower;\r\nuniform float SpatialSpread;\r\nuniform vec2 AngularSpread;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    vec4 state = texture2D(RngData, vTexCoord);\r\n\r\n    float theta = AngularSpread.x + (rand(state) - 0.5)*AngularSpread.y;\r\n    vec2 dir = vec2(cos(theta), sin(theta));\r\n    vec2 pos = EmitterPos + (rand(state) - 0.5)*SpatialSpread*vec2(-EmitterDir.y, EmitterDir.x);\r\n    \r\n    float randL = rand(state);\r\n    float spectrumOffset = texture2D(ICDF, vec2(randL, 0.5)).r + rand(state)*(1.0/256.0);\r\n    float lambda = 360.0 + (750.0 - 360.0)*spectrumOffset;\r\n    vec3 rgb = EmitterPower\r\n                    *texture2D(Emission, vec2(spectrumOffset, 0.5)).r\r\n                    *texture2D(Spectrum, vec2(spectrumOffset, 0.5)).rgb\r\n                    /texture2D(PDF,      vec2(spectrumOffset, 0.5)).r;\r\n    \r\n    gl_FragData[0] = vec4(pos, dir);\r\n    gl_FragData[1] = state;\r\n    gl_FragData[2] = vec4(rgb, lambda);\r\n}\r\n";

    var init_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\nattribute vec2 TexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(Position, 1.0);\r\n    vTexCoord = TexCoord;\r\n}\r\n";

    var intersect = "void bboxIntersect(Ray ray, vec2 center, vec2 radius, float matId, inout Intersection isect) {\r\n    vec2 pos = ray.pos - center;\r\n    float tx1 = (-radius.x - pos.x)*ray.invDir.x;\r\n    float tx2 = ( radius.x - pos.x)*ray.invDir.x;\r\n    float ty1 = (-radius.y - pos.y)*ray.invDir.y;\r\n    float ty2 = ( radius.y - pos.y)*ray.invDir.y;\r\n    \r\n    float minX = min(tx1, tx2), maxX = max(tx1, tx2);\r\n    float minY = min(ty1, ty2), maxY = max(ty1, ty2);\r\n \r\n    float tmin = max(isect.tMin, max(minX, minY));\r\n    float tmax = min(isect.tMax, min(maxX, maxY));\r\n \r\n    if (tmax >= tmin) {\r\n        isect.tMax = (tmin == isect.tMin) ? tmax : tmin;\r\n        isect.n = isect.tMax == tx1 ? vec2(-1.0, 0.0) : isect.tMax == tx2 ? vec2(1.0, 0.0) :\r\n                  isect.tMax == ty1 ? vec2( 0.0, 1.0) :                     vec2(0.0, 1.0);\r\n        isect.mat = matId;\r\n    }\r\n}\r\nvoid sphereIntersect(Ray ray, vec2 center, float radius, float matId, inout Intersection isect) {\r\n    vec2 p = ray.pos - center;\r\n    float B = dot(p, ray.dir);\r\n    float C = dot(p, p) - radius*radius;\r\n    float detSq = B*B - C;\r\n    if (detSq >= 0.0) {\r\n        float det = sqrt(detSq);\r\n        float t = -B - det;\r\n        if (t <= isect.tMin || t >= isect.tMax)\r\n            t = -B + det;\r\n        if (t > isect.tMin && t < isect.tMax) {\r\n            isect.tMax = t;\r\n            isect.n = normalize(p + ray.dir*t);\r\n            isect.mat = matId;\r\n        }\r\n    }\r\n}\r\nvoid lineIntersect(Ray ray, vec2 a, vec2 b, float matId, inout Intersection isect) {\r\n    vec2 sT = b - a;\r\n    vec2 sN = vec2(-sT.y, sT.x);\r\n    float t = dot(sN, a - ray.pos)/dot(sN, ray.dir);\r\n    float u = dot(sT, ray.pos + ray.dir*t - a);\r\n    if (t < isect.tMin || t >= isect.tMax || u < 0.0 || u > dot(sT, sT))\r\n        return;\r\n    \r\n    isect.tMax = t;\r\n    isect.n = normalize(sN);\r\n    isect.mat = matId;\r\n}\r\nvoid prismIntersect(Ray ray, vec2 center, float radius, float matId, inout Intersection isect) {\r\n    lineIntersect(ray, center + vec2(   0.0,  1.0)*radius, center + vec2( 0.866, -0.5)*radius, matId, isect);\r\n    lineIntersect(ray, center + vec2( 0.866, -0.5)*radius, center + vec2(-0.866, -0.5)*radius, matId, isect);\r\n    lineIntersect(ray, center + vec2(-0.866, -0.5)*radius, center + vec2(   0.0,  1.0)*radius, matId, isect);\r\n}\r\n";

    var pass_frag = "#include \"preamble\"\r\n\r\nuniform sampler2D Frame;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(texture2D(Frame, vTexCoord).rgb, 1.0);\r\n}\r\n";

    var preamble = "#define PI      3.1415926536\r\n#define PI_HALF 1.5707963268\r\n\r\nprecision highp float;\r\n";

    var rand = "float rand(inout vec4 state) {\r\n    const vec4 q = vec4(   1225.0,    1585.0,    2457.0,    2098.0);\r\n    const vec4 r = vec4(   1112.0,     367.0,      92.0,     265.0);\r\n    const vec4 a = vec4(   3423.0,    2646.0,    1707.0,    1999.0);\r\n    const vec4 m = vec4(4194287.0, 4194277.0, 4194191.0, 4194167.0);\r\n\r\n    vec4 beta = floor(state/q);\r\n    vec4 p = a*(state - beta*q) - beta*r;\r\n    beta = (1.0 - sign(p))*0.5*m;\r\n    state = p + beta;\r\n    return fract(dot(state/m, vec4(1.0, -1.0, 1.0, -1.0)));\r\n}\r\n";

    var ray_frag = "#include \"preamble\"\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(vColor, 1.0);\r\n}\r\n";

    var ray_vert = "#include \"preamble\"\r\n\r\nuniform sampler2D PosDataA;\r\nuniform sampler2D PosDataB;\r\nuniform sampler2D RgbData;\r\nuniform float Aspect;\r\n\r\nattribute vec3 TexCoord;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    vec2 posA = texture2D(PosDataA, TexCoord.xy).xy;\r\n    vec2 posB = texture2D(PosDataB, TexCoord.xy).xy;\r\n    vec2 pos = mix(posA, posB, TexCoord.z);\r\n    vec2 dir = posB - posA;\r\n    float biasCorrection = clamp(length(dir)/max(abs(dir.x), abs(dir.y)), 1.0, 1.414214);\r\n    \r\n    gl_Position = vec4(pos.x/Aspect, pos.y, 0.0, 1.0);\r\n    vColor = texture2D(RgbData, TexCoord.xy).rgb*biasCorrection;\r\n}\r\n";

    var scene1 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n#include \"csg_intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    biconvexLensIntersect   (ray, vec2(-0.4, 0.0), 0.375, 0.15,   0.75, 0.75, 1.0, isect);\r\n    biconcaveLensIntersect  (ray, vec2( 0.4, 0.0), 0.375, 0.0375, 0.75, 0.75, 1.0, isect);\r\n    planoConvexLensIntersect(ray, vec2(-1.2, 0.0), 0.375, 0.075,  0.75,       1.0, isect);\r\n    meniscusLensIntersect   (ray, vec2( 0.8, 0.0), 0.375, 0.15,   0.45, 0.75, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.4;\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene2 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    sphereIntersect(ray, vec2(-1.424, -0.8), 0.356, 1.0, isect);\r\n    sphereIntersect(ray, vec2(-0.72,  -0.8), 0.356, 2.0, isect);\r\n    sphereIntersect(ray, vec2( 0.0,   -0.8), 0.356, 3.0, isect);\r\n    sphereIntersect(ray, vec2( 0.72,  -0.8), 0.356, 4.0, isect);\r\n    sphereIntersect(ray, vec2( 1.424, -0.8), 0.356, 5.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n           if (isect.mat == 1.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.02);\r\n    } else if (isect.mat == 2.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.05);\r\n    } else if (isect.mat == 3.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.1);\r\n    } else if (isect.mat == 4.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.2);\r\n    } else if (isect.mat == 5.0) { return sampleRoughMirror(state, wiLocal, throughput, 0.5);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene3 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.2,  0.8), 1.0, isect);\r\n    sphereIntersect(ray, vec2(-0.7, -0.45), 0.35, 3.0, isect);\r\n    sphereIntersect(ray, vec2( 0.7, -0.45), 0.35, 2.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 2.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.4;\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else if (isect.mat == 3.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else if (isect.mat == 1.0) {\r\n             if (isect.n.x == -1.0) throughput *= vec3(0.14,  0.45,  0.091);\r\n        else if (isect.n.x ==  1.0) throughput *= vec3(0.63,  0.065, 0.05);\r\n        else                        throughput *= vec3(0.725, 0.71,  0.68);\r\n        return sampleDiffuse(state, wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene4 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    prismIntersect(ray, vec2(0.0, 0.0), 0.6, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 17.4688), lambda)/1.8;\r\n        return sampleRoughDielectric(state, wiLocal, 0.1, ior);\r\n    } else {\r\n        throughput *= vec3(0.05);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene5 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n#include \"csg_intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    planoConcaveLensIntersect(ray, vec2(0.8, 0.0), 0.6, 0.3, 0.6, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene6 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    sphereIntersect(ray, vec2(-0.95,   0.25),    0.4, 1.0, isect);\r\n    sphereIntersect(ray, vec2(-0.15,  -0.25),    0.2, 1.0, isect);\r\n    sphereIntersect(ray, vec2(1.11667, 0.18333), 0.2, 1.0, isect);\r\n    lineIntersect(ray, vec2(0.168689, -0.885424), vec2(1.13131,  -0.614576), 2.0, isect);\r\n    lineIntersect(ray, vec2(1.71686,   0.310275), vec2(0.983139,  0.989725), 2.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sqrt(sellmeierIor(vec3(1.0396, 0.2318, 1.0105), vec3(0.0060, 0.0200, 103.56), lambda));\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else if (isect.mat == 2.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.5);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var scene7 = "#include \"trace_frag\"\r\n\r\n#include \"bsdf\"\r\n#include \"intersect\"\r\n#include \"csg_intersect\"\r\n\r\nvoid intersect(Ray ray, inout Intersection isect) {\r\n    bboxIntersect(ray, vec2(0.0), vec2(1.78, 1.0), 0.0, isect);\r\n    sphereIntersect(ray, vec2(0.0, 0.0), 0.4, 1.0, isect);\r\n    biconvexLensIntersect(ray, vec2(-0.4, -0.65), 0.3, 0.12, 0.5, 0.5, 1.0, isect);\r\n    meniscusLensIntersect(ray, vec2(-0.8, -0.65), 0.3, 0.08, -0.5, -0.5, 1.0, isect);\r\n    planoConcaveLensIntersect(ray, vec2(1.3, 0.0), 0.3, 0.0, 0.3, 2.0, isect);\r\n    prismIntersect(ray, vec2(0.8, -0.7), 0.2, 1.0, isect);\r\n}\r\n\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput) {\r\n    if (isect.mat == 1.0) {\r\n        float ior = sellmeierIor(vec3(1.6215, 0.2563, 1.6445), vec3(0.0122, 0.0596, 147.4688), lambda)/1.6; // SF10\r\n        return sampleDielectric(state, wiLocal, ior);\r\n    } else if (isect.mat == 2.0) {\r\n        return sampleMirror(wiLocal);\r\n    } else {\r\n        throughput *= vec3(0.25);\r\n        return sampleDiffuse(state, wiLocal);\r\n    }\r\n}\r\n";

    var trace_frag = "#extension GL_EXT_draw_buffers : require\r\n#include \"preamble\"\r\n#include \"rand\"\r\n\r\nuniform sampler2D PosData;\r\nuniform sampler2D RngData;\r\nuniform sampler2D RgbData;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nstruct Ray {\r\n    vec2 pos;\r\n    vec2 dir;\r\n    vec2 invDir;\r\n    vec2 dirSign;\r\n};\r\nstruct Intersection {\r\n    float tMin;\r\n    float tMax;\r\n    vec2 n;\r\n    float mat;\r\n};\r\n\r\nvoid intersect(Ray ray, inout Intersection isect);\r\nvec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput);\r\n\r\nRay unpackRay(vec4 posDir) {\r\n    vec2 pos = posDir.xy;\r\n    vec2 dir = posDir.zw;\r\n    dir.x = abs(dir.x) < 1e-5 ? 1e-5 : dir.x; /* The nuclear option to fix NaN issues on some platforms */\r\n    dir.y = abs(dir.y) < 1e-5 ? 1e-5 : dir.y;\r\n    return Ray(pos, normalize(dir), 1.0/dir, sign(dir));\r\n}\r\n\r\nvoid main() {\r\n    vec4 posDir    = texture2D(PosData, vTexCoord);\r\n    vec4 state     = texture2D(RngData, vTexCoord);\r\n    vec4 rgbLambda = texture2D(RgbData, vTexCoord);\r\n    \r\n    Ray ray = unpackRay(posDir);\r\n    Intersection isect;\r\n    isect.tMin = 1e-4;\r\n    isect.tMax = 1e30;\r\n    intersect(ray, isect);\r\n    \r\n    vec2 t = vec2(-isect.n.y, isect.n.x);\r\n    vec2 wiLocal = -vec2(dot(t, ray.dir), dot(isect.n, ray.dir));\r\n    vec2 woLocal = sample(state, isect, rgbLambda.w, wiLocal, rgbLambda.rgb);\r\n    \r\n    if (isect.tMax == 1e30) {\r\n        rgbLambda.rgb = vec3(0.0);\r\n    } else {\r\n        posDir.xy = ray.pos + ray.dir*isect.tMax;\r\n        posDir.zw = woLocal.y*isect.n + woLocal.x*t;\r\n    }\r\n    \r\n    gl_FragData[0] = posDir;\r\n    gl_FragData[1] = state;\r\n    gl_FragData[2] = rgbLambda;\r\n}\r\n";

    var trace_vert = "#include \"preamble\"\r\n\r\nattribute vec3 Position;\r\nattribute vec2 TexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(Position, 1.0);\r\n    vTexCoord = TexCoord;\r\n}\r\n";

    var Shaders = /*#__PURE__*/Object.freeze({
        __proto__: null,
        blend_test_frag: blend_test_frag,
        blend_test_pack_frag: blend_test_pack_frag,
        blend_test_vert: blend_test_vert,
        bsdf: bsdf,
        compose_frag: compose_frag,
        compose_vert: compose_vert,
        csg_intersect: csg_intersect,
        init_frag: init_frag,
        init_vert: init_vert,
        intersect: intersect,
        pass_frag: pass_frag,
        preamble: preamble,
        rand: rand,
        ray_frag: ray_frag,
        ray_vert: ray_vert,
        scene1: scene1,
        scene2: scene2,
        scene3: scene3,
        scene4: scene4,
        scene5: scene5,
        scene6: scene6,
        scene7: scene7,
        trace_frag: trace_frag,
        trace_vert: trace_vert
    });

    const LAMBDA_MIN = 360.0;
    const LAMBDA_MAX = 750.0;
    class RayState {
        constructor(gl, size) {
            this.gl = gl;
            this.size = size;
            const posData = new Float32Array(size * size * 4);
            const rngData = new Float32Array(size * size * 4);
            const rgbData = new Float32Array(size * size * 4);
            for (let i = 0; i < size * size; ++i) {
                const theta = Math.random() * Math.PI * 2.0;
                posData[i * 4 + 0] = 0.0;
                posData[i * 4 + 1] = 0.0;
                posData[i * 4 + 2] = Math.cos(theta);
                posData[i * 4 + 3] = Math.sin(theta);
                for (let t = 0; t < 4; ++t)
                    rngData[i * 4 + t] = Math.random() * 4194167.0;
                for (let t = 0; t < 4; ++t)
                    rgbData[i * 4 + t] = 0.0;
            }
            this.posTex = new Texture(gl, size, size, 4, true, false, true, posData);
            this.rngTex = new Texture(gl, size, size, 4, true, false, true, rngData);
            this.rgbTex = new Texture(gl, size, size, 4, true, false, true, rgbData);
        }
        bind(shader) {
            this.posTex.bind(0);
            this.rngTex.bind(1);
            this.rgbTex.bind(2);
            shader.uniformTexture("PosData", this.posTex);
            shader.uniformTexture("RngData", this.rngTex);
            shader.uniformTexture("RgbData", this.rgbTex);
        }
        attach(fbo) {
            fbo.attachTexture(this.posTex, 0);
            fbo.attachTexture(this.rngTex, 1);
            fbo.attachTexture(this.rgbTex, 2);
        }
        detach(fbo) {
            fbo.detachTexture(0);
            fbo.detachTexture(1);
            fbo.detachTexture(2);
        }
    }
    class Renderer {
        constructor(gl, multiBufExt, width, height, scenes) {
            this.gl = gl;
            this.multiBufExt = multiBufExt;
            this.width = width;
            this.height = height;
            this.maxSampleCount = 100000;
            this.spreadType = Renderer.SPREAD_POINT;
            this.emissionSpectrumType = Renderer.SPECTRUM_WHITE;
            this.emitterTemperature = 5000.0;
            this.emitterGas = 0;
            this.currentScene = 0;
            this.needsReset = true;
            this.maxPathLength = 12;
            this.raySize = 512;
            this.rayCount = this.raySize * this.raySize;
            this.currentState = 0;
            this.activeBlock = 4;
            this.aspect = 1;
            this.emitterPos = [0, 0];
            this.emitterAngle = 0;
            this.wavesTraced = 0;
            this.raysTraced = 0;
            this.samplesTraced = 0;
            this.pathLength = 0;
            this.elapsedTimes = [];
            this.emitterPower = 0;
            this.spatialSpread = 0;
            this.angularSpread = [0, 0];
            this.quadVbo = this.createQuadVbo();
            this.compositeProgram = new Shader(gl, Shaders, "compose_vert", "compose_frag");
            this.passProgram = new Shader(gl, Shaders, "compose_vert", "pass_frag");
            this.initProgram = new Shader(gl, Shaders, "init_vert", "init_frag");
            this.rayProgram = new Shader(gl, Shaders, "ray_vert", "ray_frag");
            this.tracePrograms = scenes.map(s => new Shader(gl, Shaders, "trace_vert", s));
            this.spectrumTable = wavelengthToRgbTable();
            this.spectrum = new Texture(gl, this.spectrumTable.length / 4, 1, 4, true, true, true, this.spectrumTable);
            this.emission = new Texture(gl, Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);
            this.emissionIcdf = new Texture(gl, Renderer.ICDF_SAMPLES, 1, 1, true, false, true, null);
            this.emissionPdf = new Texture(gl, Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);
            this.resetActiveBlock();
            this.currentState = 0;
            this.rayStates = [new RayState(gl, this.raySize), new RayState(gl, this.raySize)];
            this.rayVbo = new VertexBuffer(gl);
            this.rayVbo.addAttribute("TexCoord", 3, gl.FLOAT, false);
            this.rayVbo.init(this.rayCount * 2);
            var vboData = new Float32Array(this.rayCount * 2 * 3);
            for (var i = 0; i < this.rayCount; ++i) {
                var u = ((i % this.raySize) + 0.5) / this.raySize;
                var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
                vboData[i * 6 + 0] = vboData[i * 6 + 3] = u;
                vboData[i * 6 + 1] = vboData[i * 6 + 4] = v;
                vboData[i * 6 + 2] = 0.0;
                vboData[i * 6 + 5] = 1.0;
            }
            this.rayVbo.copy(vboData);
            this.fbo = new RenderTarget(gl, multiBufExt);
            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.blendFunc(gl.ONE, gl.ONE);
            this.changeResolution(width, height);
            this.setEmitterPos([width / 2, height / 2], [width / 2, height / 2]);
            this.computeEmissionSpectrum();
        }
        resetActiveBlock() {
            this.activeBlock = 4;
        }
        setEmissionSpectrumType(type) {
            this.emissionSpectrumType = type;
            this.computeEmissionSpectrum();
        }
        setEmitterTemperature(temperature) {
            this.emitterTemperature = temperature;
            if (this.emissionSpectrumType == Renderer.SPECTRUM_INCANDESCENT)
                this.computeEmissionSpectrum();
        }
        setEmitterGas(gasId) {
            this.emitterGas = gasId;
            if (this.emissionSpectrumType == Renderer.SPECTRUM_GAS_DISCHARGE)
                this.computeEmissionSpectrum();
        }
        computeEmissionSpectrum() {
            if (!this.emissionSpectrum) {
                this.emissionSpectrum = new Float32Array(Renderer.SPECTRUM_SAMPLES);
            }
            switch (this.emissionSpectrumType) {
                case Renderer.SPECTRUM_WHITE:
                    for (var i = 0; i < Renderer.SPECTRUM_SAMPLES; ++i)
                        this.emissionSpectrum[i] = 1.0;
                    break;
                case Renderer.SPECTRUM_INCANDESCENT:
                    var h = 6.626070040e-34;
                    var c = 299792458.0;
                    var kB = 1.3806488e-23;
                    var T = this.emitterTemperature;
                    for (var i = 0; i < Renderer.SPECTRUM_SAMPLES; ++i) {
                        var l = (LAMBDA_MIN + (LAMBDA_MAX - LAMBDA_MIN) * (i + 0.5) / Renderer.SPECTRUM_SAMPLES) * 1e-9;
                        var power = 1e-12 * (2.0 * h * c * c) / (l * l * l * l * l * (Math.exp(h * c / (l * kB * T)) - 1.0));
                        this.emissionSpectrum[i] = power;
                    }
                    break;
                case Renderer.SPECTRUM_GAS_DISCHARGE:
                    var wavelengths = GasDischargeLines[this.emitterGas].wavelengths;
                    var strengths = GasDischargeLines[this.emitterGas].strengths;
                    for (var i = 0; i < Renderer.SPECTRUM_SAMPLES; ++i)
                        this.emissionSpectrum[i] = 0.0;
                    for (var i = 0; i < wavelengths.length; ++i) {
                        var idx = Math.floor((wavelengths[i] - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN) * Renderer.SPECTRUM_SAMPLES);
                        if (idx < 0 || idx >= Renderer.SPECTRUM_SAMPLES)
                            continue;
                        this.emissionSpectrum[idx] += strengths[i];
                    }
            }
            this.computeSpectrumIcdf();
            this.emission.bind(0);
            this.emission.copy(this.emissionSpectrum);
            this.reset();
        }
        computeSpectrumIcdf() {
            if (!this.cdf) {
                this.cdf = new Float32Array(Renderer.SPECTRUM_SAMPLES + 1);
                this.pdf = new Float32Array(Renderer.SPECTRUM_SAMPLES);
                this.icdf = new Float32Array(Renderer.ICDF_SAMPLES);
            }
            const pdf = this.pdf;
            const icdf = this.icdf;
            const emissionSpectrum = this.emissionSpectrum;
            let sum = 0.0;
            for (var i = 0; i < Renderer.SPECTRUM_SAMPLES; ++i)
                sum += emissionSpectrum[i];
            /* Mix in 10% of a uniform sample distribution to stay on the safe side.
               Especially gas emission spectra with lots of emission lines
               tend to have small peaks that fall through the cracks otherwise */
            var safetyPadding = 0.1;
            var normalization = Renderer.SPECTRUM_SAMPLES / sum;
            /* Precompute cdf and pdf (unnormalized for now) */
            this.cdf[0] = 0.0;
            for (var i = 0; i < Renderer.SPECTRUM_SAMPLES; ++i) {
                emissionSpectrum[i] *= normalization;
                /* Also take into account the observer response when distributing samples.
                   Otherwise tends to prioritize peaks just barely outside the visible spectrum */
                var observerResponse = (1.0 / 3.0) * (Math.abs(this.spectrumTable[i * 4]) +
                    Math.abs(this.spectrumTable[i * 4 + 1]) +
                    Math.abs(this.spectrumTable[i * 4 + 2]));
                pdf[i] = observerResponse * (emissionSpectrum[i] + safetyPadding) / (1.0 + safetyPadding);
                this.cdf[i + 1] = pdf[i] + this.cdf[i];
            }
            /* All done! Time to normalize */
            var cdfSum = this.cdf[Renderer.SPECTRUM_SAMPLES];
            for (var i = 0; i < Renderer.SPECTRUM_SAMPLES; ++i) {
                pdf[i] *= Renderer.SPECTRUM_SAMPLES / cdfSum;
                this.cdf[i + 1] /= cdfSum;
            }
            /* Make sure we don't fall into any floating point pits */
            this.cdf[Renderer.SPECTRUM_SAMPLES] = 1.0;
            /* Precompute an inverted mapping of the cdf. This is biased!
               Unfortunately we can't really afford to do runtime bisection
               on the GPU, so this will have to do. For our purposes a small
               amount of bias is tolerable anyway. */
            var cdfIdx = 0;
            for (var i = 0; i < Renderer.ICDF_SAMPLES; ++i) {
                var target = Math.min((i + 1) / Renderer.ICDF_SAMPLES, 1.0);
                while (this.cdf[cdfIdx] < target)
                    cdfIdx++;
                icdf[i] = (cdfIdx - 1.0) / Renderer.SPECTRUM_SAMPLES;
            }
            this.emissionIcdf.bind(0);
            this.emissionIcdf.copy(icdf);
            this.emissionPdf.bind(0);
            this.emissionPdf.copy(pdf);
        }
        getEmissionSpectrum() {
            return this.emissionSpectrum;
        }
        setMaxPathLength(length) {
            this.maxPathLength = length;
            this.reset();
        }
        setMaxSampleCount(count) {
            this.maxSampleCount = count;
        }
        changeResolution(width, height) {
            this.emitterPos[0] = (this.emitterPos[0] + 0.5) * width / this.width - 0.5;
            this.emitterPos[1] = (this.emitterPos[1] + 0.5) * height / this.height - 0.5;
            this.width = width;
            this.height = height;
            this.aspect = this.width / this.height;
            this.screenBuffer = new Texture(this.gl, this.width, this.height, 4, true, false, true, null);
            this.waveBuffer = new Texture(this.gl, this.width, this.height, 4, true, false, true, null);
            this.resetActiveBlock();
            this.reset();
        }
        changeScene(idx) {
            this.resetActiveBlock();
            this.currentScene = idx;
            this.reset();
        }
        reset() {
            if (!this.needsReset)
                return;
            this.needsReset = false;
            this.wavesTraced = 0;
            this.raysTraced = 0;
            this.samplesTraced = 0;
            this.pathLength = 0;
            this.elapsedTimes = [];
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            this.fbo.attachTexture(this.screenBuffer, 0);
            this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            this.fbo.unbind();
        }
        setSpreadType(type) {
            this.resetActiveBlock();
            this.spreadType = type;
            this.computeSpread();
            this.reset();
        }
        setNormalizedEmitterPos(posA, posB) {
            this.setEmitterPos([posA[0] * this.width, posA[1] * this.height], [posB[0] * this.width, posB[1] * this.height]);
        }
        setEmitterPos(posA, posB) {
            this.emitterPos = this.spreadType == Renderer.SPREAD_POINT ? posB : posA;
            this.emitterAngle = this.spreadType == Renderer.SPREAD_POINT ? 0.0 : Math.atan2(posB[1] - posA[1], posB[0] - posA[0]);
            this.computeSpread();
            this.reset();
        }
        computeSpread() {
            switch (this.spreadType) {
                case Renderer.SPREAD_POINT:
                    this.emitterPower = 0.1;
                    this.spatialSpread = 0.0;
                    this.angularSpread = [0.0, Math.PI * 2.0];
                    break;
                case Renderer.SPREAD_CONE:
                    this.emitterPower = 0.03;
                    this.spatialSpread = 0.0;
                    this.angularSpread = [this.emitterAngle, Math.PI * 0.3];
                    break;
                case Renderer.SPREAD_BEAM:
                    this.emitterPower = 0.03;
                    this.spatialSpread = 0.4;
                    this.angularSpread = [this.emitterAngle, 0.0];
                    break;
                case Renderer.SPREAD_LASER:
                    this.emitterPower = 0.05;
                    this.spatialSpread = 0.0;
                    this.angularSpread = [this.emitterAngle, 0.0];
                    break;
                case Renderer.SPREAD_AREA:
                    this.emitterPower = 0.1;
                    this.spatialSpread = 0.4;
                    this.angularSpread = [this.emitterAngle, Math.PI];
                    break;
            }
        }
        createQuadVbo() {
            const gl = this.gl;
            var vbo = new VertexBuffer(gl);
            vbo.addAttribute("Position", 3, gl.FLOAT, false);
            vbo.addAttribute("TexCoord", 2, gl.FLOAT, false);
            vbo.init(4);
            vbo.copy(new Float32Array([
                1.0, 1.0, 0.0, 1.0, 1.0,
                -1.0, 1.0, 0.0, 0.0, 1.0,
                -1.0, -1.0, 0.0, 0.0, 0.0,
                1.0, -1.0, 0.0, 1.0, 0.0
            ]));
            return vbo;
        }
        totalRaysTraced() {
            return this.raysTraced;
        }
        maxRayCount() {
            return this.maxPathLength * this.maxSampleCount;
        }
        totalSamplesTraced() {
            return this.samplesTraced;
        }
        progress() {
            return Math.min(this.totalRaysTraced() / this.maxRayCount(), 1.0);
        }
        finished() {
            return this.totalSamplesTraced() >= this.maxSampleCount;
        }
        composite() {
            this.screenBuffer.bind(0);
            this.compositeProgram.bind();
            this.compositeProgram.uniformTexture("Frame", this.screenBuffer);
            this.compositeProgram.uniformF("Exposure", this.width / (Math.max(this.samplesTraced, this.raySize * this.activeBlock)));
            this.quadVbo.draw(this.compositeProgram, this.gl.TRIANGLE_FAN);
        }
        render(timestamp) {
            this.needsReset = true;
            this.elapsedTimes.push(timestamp);
            var current = this.currentState;
            var next = 1 - current;
            this.fbo.bind();
            var gl = this.gl;
            gl.viewport(0, 0, this.raySize, this.raySize);
            gl.scissor(0, 0, this.raySize, this.activeBlock);
            gl.enable(gl.SCISSOR_TEST);
            this.fbo.drawBuffers(3);
            this.rayStates[next].attach(this.fbo);
            this.quadVbo.bind();
            if (this.pathLength == 0) {
                this.initProgram.bind();
                this.rayStates[current].rngTex.bind(0);
                this.spectrum.bind(1);
                this.emission.bind(2);
                this.emissionIcdf.bind(3);
                this.emissionPdf.bind(4);
                this.initProgram.uniformTexture("RngData", this.rayStates[current].rngTex);
                this.initProgram.uniformTexture("Spectrum", this.spectrum);
                this.initProgram.uniformTexture("Emission", this.emission);
                this.initProgram.uniformTexture("ICDF", this.emissionIcdf);
                this.initProgram.uniformTexture("PDF", this.emissionPdf);
                this.initProgram.uniform2F("EmitterPos", ((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0);
                this.initProgram.uniform2F("EmitterDir", Math.cos(this.angularSpread[0]), -Math.sin(this.angularSpread[0]));
                this.initProgram.uniformF("EmitterPower", this.emitterPower);
                this.initProgram.uniformF("SpatialSpread", this.spatialSpread);
                this.initProgram.uniform2F("AngularSpread", -this.angularSpread[0], this.angularSpread[1]);
                this.quadVbo.draw(this.initProgram, gl.TRIANGLE_FAN);
                current = 1 - current;
                next = 1 - next;
                this.rayStates[next].attach(this.fbo);
            }
            var traceProgram = this.tracePrograms[this.currentScene];
            traceProgram.bind();
            this.rayStates[current].bind(traceProgram);
            this.quadVbo.draw(traceProgram, gl.TRIANGLE_FAN);
            this.rayStates[next].detach(this.fbo);
            gl.disable(gl.SCISSOR_TEST);
            gl.viewport(0, 0, this.width, this.height);
            this.fbo.drawBuffers(1);
            this.fbo.attachTexture(this.waveBuffer, 0);
            if (this.pathLength == 0 || this.wavesTraced == 0)
                gl.clear(gl.COLOR_BUFFER_BIT);
            gl.enable(gl.BLEND);
            this.rayProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.rayProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.rayProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.rayProgram.uniformF("Aspect", this.aspect);
            this.rayVbo.bind();
            this.rayVbo.draw(this.rayProgram, gl.LINES, this.raySize * this.activeBlock * 2);
            this.raysTraced += this.raySize * this.activeBlock;
            this.pathLength += 1;
            this.quadVbo.bind();
            if (this.pathLength == this.maxPathLength || this.wavesTraced == 0) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.waveBuffer.bind(0);
                this.passProgram.bind();
                this.passProgram.uniformTexture("Frame", this.waveBuffer);
                this.quadVbo.draw(this.passProgram, gl.TRIANGLE_FAN);
                if (this.pathLength == this.maxPathLength) {
                    this.samplesTraced += this.raySize * this.activeBlock;
                    this.wavesTraced += 1;
                    this.pathLength = 0;
                    if (this.elapsedTimes.length > 5) {
                        var avgTime = 0;
                        for (var i = 1; i < this.elapsedTimes.length; ++i)
                            avgTime += this.elapsedTimes[i] - this.elapsedTimes[i - 1];
                        avgTime /= this.elapsedTimes.length - 1;
                        /* Let's try to stay at reasonable frame times. Targeting 16ms is
                           a bit tricky because there's a lot of variability in how often
                           the browser executes this loop and 16ms might well not be
                           reachable, but 24ms seems to do ok */
                        if (avgTime > 24.0)
                            this.activeBlock = Math.max(4, this.activeBlock - 4);
                        else
                            this.activeBlock = Math.min(512, this.activeBlock + 4);
                        this.elapsedTimes = [this.elapsedTimes[this.elapsedTimes.length - 1]];
                    }
                }
            }
            gl.disable(gl.BLEND);
            this.fbo.unbind();
            this.composite();
            this.currentState = next;
        }
    }
    Renderer.SPECTRUM_WHITE = 0;
    Renderer.SPECTRUM_INCANDESCENT = 1;
    Renderer.SPECTRUM_GAS_DISCHARGE = 2;
    Renderer.SPECTRUM_SAMPLES = 256;
    Renderer.ICDF_SAMPLES = 1024;
    Renderer.SPREAD_POINT = 0;
    Renderer.SPREAD_CONE = 1;
    Renderer.SPREAD_BEAM = 2;
    Renderer.SPREAD_LASER = 3;
    Renderer.SPREAD_AREA = 4;
    class SpectrumRenderer {
        constructor(canvas, spectrum) {
            this.canvas = canvas;
            this.spectrum = spectrum;
            this.smooth = true;
            this.context = this.canvas.getContext('2d');
            this.spectrumFill = new Image();
            this.spectrumFill.src = 'Spectrum.png';
            this.spectrumFill.addEventListener('load', this.loadPattern.bind(this));
            if (this.spectrumFill.complete)
                this.loadPattern();
        }
        setSpectrum(spectrum) {
            this.spectrum = spectrum;
            this.draw();
        }
        loadPattern() {
            this.pattern = this.context.createPattern(this.spectrumFill, 'repeat-y');
            this.draw();
        }
        setColor(r, g, b) {
            this.context.strokeStyle = 'rgb(' + r + ',' + g + ',' + b + ')';
        }
        drawLine(p) {
            this.context.moveTo(p[0], p[1]);
            for (var i = 2; i < p.length; i += 2)
                this.context.lineTo(p[i], p[i + 1]);
        }
        setSmooth(smooth) {
            this.smooth = smooth;
        }
        draw() {
            var ctx = this.context;
            var w = this.canvas.width;
            var h = this.canvas.height;
            var marginX = 10;
            var marginY = 20;
            ctx.clearRect(0, 0, w, h);
            var graphW = w - 2 * marginX;
            var graphH = h - 2 * marginY;
            var graphX = 0 * 0.5 + marginX;
            var graphY = 0 * 0.5 + h - marginY;
            var axisX0 = 360;
            var axisX1 = 750;
            var axisY0 = 0.0;
            var axisY1 = 1.0;
            var xTicks = 50.0;
            var yTicks = 0.2;
            var tickSize = 10;
            var mapX = function (x) { return graphX + Math.floor(graphW * (x - axisX0) / (axisX1 - axisX0)); };
            var mapY = function (y) { return graphY - Math.floor(graphH * (y - axisY0) / (axisY1 - axisY0)); };
            ctx.beginPath();
            this.setColor(128, 128, 128);
            ctx.lineWidth = 1;
            ctx.setLineDash([1, 2]);
            for (var gx = axisX0 - 10 + xTicks; gx <= axisX1; gx += xTicks)
                this.drawLine([mapX(gx), graphY, mapX(gx), graphY - graphH]);
            for (var gy = axisY0 + yTicks; gy <= axisY1; gy += yTicks)
                this.drawLine([graphX, mapY(gy), graphX + graphW, mapY(gy)]);
            ctx.stroke();
            ctx.setLineDash([]);
            var max = 0.0;
            for (var i = 0; i < this.spectrum.length; ++i)
                max = Math.max(this.spectrum[i], max);
            max *= 1.1;
            var grapher = this;
            var drawGraph = function () {
                var spectrum = grapher.spectrum;
                var path = new Path2D();
                path.moveTo(0, h);
                for (var gx = axisX0; gx <= axisX1; gx += grapher.smooth ? 15 : 1) {
                    var x = mapX(gx);
                    var sx = spectrum.length * (gx - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN);
                    var y = mapY(spectrum[Math.max(Math.min(Math.floor(sx), spectrum.length - 1), 0)] / max);
                    if (gx == axisX0)
                        path.moveTo(x, y);
                    else
                        path.lineTo(x, y);
                }
                return path;
            };
            var filled = drawGraph();
            filled.lineTo(graphX + graphW, graphY);
            filled.lineTo(graphX, graphY);
            ctx.fillStyle = this.pattern;
            ctx.fill(filled);
            ctx.fillStyle = "black";
            var outline = drawGraph();
            this.setColor(0, 0, 0);
            ctx.lineWidth = 2;
            ctx.stroke(outline);
            ctx.beginPath();
            this.setColor(128, 128, 128);
            ctx.lineWidth = 2;
            this.drawLine([
                graphX + graphW, graphY - tickSize,
                graphX + graphW, graphY,
                graphX, graphY,
                graphX, graphY - graphH,
                graphX + tickSize, graphY - graphH
            ]);
            ctx.stroke();
            ctx.beginPath();
            ctx.lineWidth = 2;
            for (var gx = axisX0 - 10 + xTicks; gx < axisX1; gx += xTicks)
                this.drawLine([mapX(gx), graphY, mapX(gx), graphY - tickSize]);
            for (var gy = axisY0 + yTicks; gy < axisY1; gy += yTicks)
                this.drawLine([graphX, mapY(gy), graphX + tickSize, mapY(gy)]);
            ctx.stroke();
            ctx.font = "15px serif";
            ctx.textAlign = "center";
            for (var gx = axisX0 - 10 + xTicks; gx < axisX1; gx += xTicks)
                ctx.fillText(gx.toString(), mapX(gx), graphY + 15);
            ctx.fillText("λ", graphX + graphW, graphY + 16);
        }
    }

    class Tantalum {
        constructor() {
            this.canvas = document.getElementById("render-canvas");
            this.overlay = document.getElementById("render-overlay");
            this.content = document.getElementById("content");
            this.controls = document.getElementById("controls");
            this.spectrumCanvas = document.getElementById("spectrum-canvas");
            this.savedImages = 0;
            this.saveImageData = false;
            this.boundRenderLoop = this.renderLoop.bind(this);
            try {
                const { gl, multiBufExt } = this.setupGL();
                this.gl = gl;
                this.multiBufExt = multiBufExt;
            }
            catch (e) {
                /* GL errors at this stage are to be expected to some degree,
                   so display a nice error message and call it quits */
                e.message += ". This demo won't run in your browser.";
                throw e;
            }
            try {
                const ui = this.setupUI();
                this.renderer = ui.renderer;
                this.spectrumRenderer = ui.spectrumRenderer;
                this.progressBar = ui.progressBar;
            }
            catch (e) {
                /* Errors here are a bit more serious and shouldn't normally happen.
                   Let's just dump what we have and hope the user can make sense of it */
                e.message = "Ooops! Something unexpected happened. The error message is listed below:<br/>" +
                    "<pre>" + e.message + "</pre>";
                throw e;
            }
            /* Ok, all seems well. Time to show the controls */
            this.controls.style.visibility = "visible";
            window.requestAnimationFrame(this.boundRenderLoop);
        }
        setupGL() {
            let gl;
            try {
                gl = (this.canvas.getContext("webgl") || this.canvas.getContext("experimental-webgl"));
            }
            catch (e) {
                e.message = "Could not initialise WebGL: " + e.message;
                throw e;
            }
            if (!gl)
                throw new Error("Could not initialise WebGL");
            const floatExt = gl.getExtension("OES_texture_float");
            const floatLinExt = gl.getExtension("OES_texture_float_linear");
            const floatBufExt = gl.getExtension("WEBGL_color_buffer_float");
            const multiBufExt = gl.getExtension("WEBGL_draw_buffers");
            if (!floatExt || !floatLinExt)
                throw new Error("Your platform does not support float textures");
            if (!multiBufExt)
                throw new Error("Your platform does not support the draw buffers extension");
            if (!floatBufExt)
                this.colorBufferFloatTest(gl);
            return { gl, multiBufExt };
        }
        colorBufferFloatTest(gl) {
            /* This one is slightly awkward. The WEBGL_color_buffer_float
               extension is apparently causing a lot of troubles for
               ANGLE, so barely anyone bothers to implement it. On the other
               hand, most platforms do actually implicitly support float render
               targets just fine, even though they pretend they don't.
               So to *actually* figure out whether we can do float attachments
               or not, we have to do a very hacky up-front blending test
               and see whether the results come out correct.
               Hurray WebGL! */
            const shader = new Shader(gl, Shaders, "blend_test_vert", "blend_test_frag");
            const packShader = new Shader(gl, Shaders, "blend_test_vert", "blend_test_pack_frag");
            const target = new Texture(gl, 1, 1, 4, true, false, false, new Float32Array([-6.0, 10.0, 30.0, 2.0]));
            const fbo = new RenderTarget(gl, this.multiBufExt);
            const vbo = new VertexBuffer(gl);
            vbo.bind();
            vbo.addAttribute("Position", 3, gl.FLOAT, false);
            vbo.init(4);
            vbo.copy(new Float32Array([1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0]));
            gl.viewport(0, 0, 1, 1);
            fbo.bind();
            fbo.drawBuffers(1);
            fbo.attachTexture(target, 0);
            gl.enable(gl.BLEND);
            gl.blendFunc(gl.ONE, gl.ONE);
            shader.bind();
            vbo.draw(shader, gl.TRIANGLE_FAN);
            vbo.draw(shader, gl.TRIANGLE_FAN);
            fbo.unbind();
            gl.disable(gl.BLEND);
            /* Of course we can neither read back texture contents or read floating point
               FBO attachments in WebGL, so we have to do another pass, convert to uint8
               and check whether the results are ok.
               Hurray WebGL! */
            packShader.bind();
            target.bind(0);
            packShader.uniformTexture("Tex", target);
            vbo.draw(packShader, gl.TRIANGLE_FAN);
            const pixels = new Uint8Array([0, 0, 0, 0]);
            gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
            if (pixels[0] != 8 || pixels[1] != 128 || pixels[2] != 16 || pixels[3] != 4) {
                console.log("Floating point blending test failed. Result was " + pixels + " but should have been " + [8, 128, 16, 4]);
                throw new Error("Your platform does not support floating point attachments");
            }
        }
        setupUI() {
            function map(a, b) { return [a * 0.5 / 1.78 + 0.5, -b * 0.5 + 0.5]; }
            const config = {
                "resolutions": [[820, 461], [1024, 576], [1280, 720], [1600, 900], [1920, 1080], [4096, 2160]],
                "scenes": [
                    { 'shader': 'scene1', 'name': 'Lenses', 'posA': [0.5, 0.5], 'posB': [0.5, 0.5], 'spread': Renderer.SPREAD_POINT },
                    { 'shader': 'scene6', 'name': 'Spheres', 'posA': map(-1.59, 0.65), 'posB': map(0.65, -0.75), 'spread': Renderer.SPREAD_BEAM },
                    { 'shader': 'scene7', 'name': 'Playground', 'posA': [0.3, 0.52], 'posB': [0.3, 0.52], 'spread': Renderer.SPREAD_POINT },
                    { 'shader': 'scene4', 'name': 'Prism', 'posA': [0.1, 0.65], 'posB': [0.4, 0.4], 'spread': Renderer.SPREAD_LASER },
                    { 'shader': 'scene5', 'name': 'Cardioid', 'posA': [0.2, 0.5], 'posB': [0.2, 0.5], 'spread': Renderer.SPREAD_POINT },
                    { 'shader': 'scene3', 'name': 'Cornell Box', 'posA': [0.5, 0.101], 'posB': [0.5, 0.2], 'spread': Renderer.SPREAD_AREA },
                    { 'shader': 'scene2', 'name': 'Rough Mirror Spheres', 'posA': [0.25, 0.125], 'posB': [0.5, 0.66], 'spread': Renderer.SPREAD_LASER }
                ]
            };
            const renderer = new Renderer(this.gl, this.multiBufExt, this.canvas.width, this.canvas.height, config.scenes.map(s => s.shader));
            const spectrumRenderer = new SpectrumRenderer(this.spectrumCanvas, renderer.getEmissionSpectrum());
            /* Let's try and make member variables in JS a little less verbose... */
            const { content, canvas } = this;
            const progressBar = new ProgressBar(true);
            replace("render-progress", progressBar.el);
            const resolutionLabels = [];
            for (let i = 0; i < config.resolutions.length; ++i)
                resolutionLabels.push(config.resolutions[i][0] + "x" + config.resolutions[i][1]);
            replace("resolution-selector", new ButtonGroup(false, resolutionLabels, function (idx) {
                const [width, height] = config.resolutions[idx];
                content.style.width = width + "px";
                content.style.height = height + "px";
                canvas.width = width;
                canvas.height = height;
                renderer.changeResolution(width, height);
            }).el);
            const spreadSelector = new ButtonGroup(true, ["Point", "Cone", "Beam", "Laser", "Area"], renderer.setSpreadType.bind(renderer));
            replace("spread-selector", spreadSelector.el);
            function selectScene(idx) {
                renderer.changeScene(idx);
                spreadSelector.select(config.scenes[idx].spread);
                renderer.setNormalizedEmitterPos(config.scenes[idx].posA, config.scenes[idx].posB);
            }
            replace("scene-selector", new ButtonGroup(true, config.scenes.map(s => s.name), selectScene).el);
            const mouseListener = new MouseListener(canvas, renderer.setEmitterPos.bind(renderer));
            const temperatureSlider = new Slider(1000, 10000, true, function (temperature) {
                this.setLabel("Temperature: " + temperature + "K");
                renderer.setEmitterTemperature(temperature);
                spectrumRenderer.setSpectrum(renderer.getEmissionSpectrum());
            });
            replace("emission-temperature", temperatureSlider.el);
            const bounceSlider = new Slider(1, 20, true, function (length) {
                this.setLabel((length - 1) + " light bounces");
                renderer.setMaxPathLength(length);
            });
            bounceSlider.setValue(12);
            replace("path-length", bounceSlider.el);
            const sampleSlider = new Slider(400, 700, true, function (exponent100) {
                const sampleCount = Math.floor(Math.pow(10, exponent100 * 0.01));
                this.setLabel(sampleCount + " light paths");
                renderer.setMaxSampleCount(sampleCount);
            });
            sampleSlider.setValue(600);
            replace("sample-count", sampleSlider.el);
            const gasGrid = new ButtonGrid(4, GasDischargeLines.map(l => l.name), function (gasId) {
                renderer.setEmitterGas(gasId);
                spectrumRenderer.setSpectrum(renderer.getEmissionSpectrum());
            });
            replace("gas-selection", gasGrid.el);
            temperatureSlider.show(false);
            gasGrid.show(false);
            replace("emission-selector", new ButtonGroup(false, ["White", "Incandescent", "Gas Discharge"], function (type) {
                renderer.setEmissionSpectrumType(type);
                spectrumRenderer.setSmooth(type != Renderer.SPECTRUM_GAS_DISCHARGE);
                spectrumRenderer.setSpectrum(renderer.getEmissionSpectrum());
                temperatureSlider.show(type == Renderer.SPECTRUM_INCANDESCENT);
                gasGrid.show(type == Renderer.SPECTRUM_GAS_DISCHARGE);
            }).el);
            document.getElementById('save-button')
                .addEventListener('click', () => this.saveImageData = true);
            selectScene(0);
            this.overlay.className = "render-help";
            this.overlay.offsetHeight; /* Flush CSS changes */
            this.overlay.className += " render-help-transition";
            this.overlay.textContent = "Click and drag!";
            this.overlay.addEventListener("mousedown", function (event) {
                this.parentNode.removeChild(this);
                mouseListener.mouseDown(event);
            });
            return {
                renderer,
                spectrumRenderer,
                progressBar,
            };
        }
        renderLoop(timestamp) {
            window.requestAnimationFrame(this.boundRenderLoop);
            if (!this.renderer.finished())
                this.renderer.render(timestamp);
            if (this.saveImageData) {
                /* Ensure we redraw the image before we grab it. This is a strange one:
                   To save power the renderer stops doing anything after it finished
                   tracing rays, and the canvas keeps displaying the correct image
                   (as you would expect). However, when we get the canvas as a blob,
                   the results are garbage unless we rendered to it in that frame.
                   There's most likely some browser/ANGLE meddling happening here, but
                   in interest of my mental health I'm not going to dig deeper into this */
                if (this.renderer.finished())
                    this.renderer.composite();
                let fileName = "Tantalum";
                if (this.savedImages > 0)
                    fileName += (this.savedImages + 1);
                fileName += ".png";
                this.canvas.toBlob(function (blob) { saveAs(blob, fileName); });
                this.savedImages++;
                this.saveImageData = false;
            }
            this.progressBar.setProgress(this.renderer.progress());
            this.progressBar.setLabel(Math.min(this.renderer.totalRaysTraced(), this.renderer.maxRayCount()) +
                "/" + this.renderer.maxRayCount() + " rays traced; Progress: " +
                this.progressBar.getProgressPercentage() + "%");
        }
        static fail(message) {
            const sorryP = document.createElement("p");
            sorryP.appendChild(document.createTextNode("Sorry! :("));
            sorryP.style.fontSize = "50px";
            const failureP = document.createElement("p");
            failureP.className = "warning-box";
            failureP.innerHTML = message;
            const errorImg = document.createElement("img");
            errorImg.title = errorImg.alt = "The Element of Failure";
            errorImg.src = "derp.gif";
            const failureDiv = document.createElement("div");
            failureDiv.className = "center";
            failureDiv.append(sorryP, errorImg, failureP);
            document.getElementById("content").appendChild(failureDiv);
            document.getElementById("render-overlay").style.display = 'none';
            document.getElementById("render-canvas").style.display = 'none';
        }
    }

    try {
        new Tantalum();
    }
    catch (e) {
        Tantalum.fail(e.message);
        throw e;
    }

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
